[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/abstracts/configurationFile.js",
    "content": "const fs = require('fs-extra');\nconst extend = require('extend');\nconst path = require('path');\n/**\n * A helper class for creating configuration files that can be overwritten on\n * implementation.\n * @abstract\n * @version 1.0\n */\nclass ConfigurationFile {\n  /**\n   * Class constructor.\n   * @param {PathUtils}         pathUtils            To build the path to the overwrite file.\n   * @param {string|Array}      overwritePaths       A path of a list of paths for files that can\n   *                                                 overwrite the configuration. If used as a\n   *                                                 string, it will assume the path is inside\n   *                                                 the `config` folder, but if used as a list, the\n   *                                                 paths will be relative to the project root\n   *                                                 directory.\n   *                                                 If used as an array, the class will use the\n   *                                                 first file of the list that exists and ignore\n   *                                                 the rest.\n   * @param {boolean}           [asFactory=false]    If `true`, every time `getConfig` gets called,\n   *                                                 the configuration will be created again,\n   *                                                 instead of caching it the first time it's\n   *                                                 created.\n   * @param {?ConfigurationFile} [parentConfig=null] If this parameter is used, the configuration\n   *                                                 created by the instance will be merged on top\n   *                                                 of the configuration returned by the\n   *                                                 `getConfig` method of the parent configuration.\n   * @throws {TypeError} If instantiated directly.\n   * @abstract\n   */\n  constructor(pathUtils, overwritePaths, asFactory = false, parentConfig = null) {\n    if (new.target === ConfigurationFile) {\n      throw new TypeError(\n        'ConfigurationFile is an abstract class, it can\\'t be instantiated directly'\n      );\n    }\n    /**\n     * A local reference for the `pathUtils` service.\n     * @type {PathUtils}\n     */\n    this.pathUtils = pathUtils;\n    /**\n     * A list of paths that can overwrite the configuration.\n     * @type {Array}\n     */\n    this.overwritePaths = (typeof overwritePaths === 'string') ?\n      [path.join('config', overwritePaths)] :\n      (overwritePaths || []);\n    /**\n     * Whether the configuration should be created every time `getConfig` gets called or not.\n     * @type {boolean}\n     */\n    this.asFactory = asFactory;\n    /**\n     * A parent configuration to extend.\n     * @type {?ConfigurationFile}\n     */\n    this.parentConfig = parentConfig;\n    /**\n     * This will store the configuration after creating it.\n     * @type {?Object}\n     * @ignore\n     * @access protected\n     */\n    this._config = null;\n    /**\n     * A flag to know if the overwrite file has been loaded or not.\n     * @type {boolean}\n     * @ignore\n     * @access protected\n     */\n    this._fileConfigLoaded = false;\n    /**\n     * A function that eventually will return the changes from the overwrite file. Once the file\n     * is loaded, if the file exports a function, then it will replace this variable, otherwise, the\n     * return value of this method will be become the exported configuration.\n     * @return {Object}\n     * @ignore\n     * @access protected\n     */\n    this._fileConfig = () => ({});\n  }\n  /**\n   * This method will be called the first time `getConfig` gets called (or every time, depending on\n   * the value of the `asFactory` property) and it should return the configuration contents.\n   * As parameters, it will return the same ones sent to `getConfig`.\n   * @example\n   * // Let's say the class receives this call: `getConfig({ name: 'Charito'}, 'hello')`, you could\n   * // do something like this:\n   * createConfig(options, prefix) {\n   *   return { message: `${prefix} ${options.name}` };\n   * }\n   * // And the configuration would be `{ message: 'hello Charito'}`\n   * @throws {Error} if not overwritten.\n   * @abstract\n   */\n  createConfig() {\n    throw new Error('This method must to be overwritten');\n  }\n  /**\n   * This is the public method all other services uses to obtain the configuration. If the\n   * configuration doesn't exists or `asFactory` was set to `true` on the `constructor`, the\n   * configuration will be reloaded.\n   * @param  {Array} args A list of parameters for the service to use when creating the\n   *                      configuration\n   * @return {Object}\n   */\n  getConfig(...args) {\n    if (!this._config || this.asFactory) {\n      this._loadConfig(...args);\n    }\n\n    return this._config;\n  }\n  /**\n   * This is the real method that creates the configuration.\n   * @param  {Array} args A list of parameters for the service to use when creating the\n   *                      configuration\n   * @ignore\n   * @access protected\n   */\n  _loadConfig(...args) {\n    // If the overwrite file wasn't loaded yet...\n    if (!this._fileConfigLoaded) {\n      // ...turn on the flag that says it was loaded.\n      this._fileConfigLoaded = true;\n      // Call the method that loads the file.\n      this._loadConfigFromFile();\n    }\n\n    let parentConfig = {};\n    // If a parent configuration was defined on the constructor...\n    if (this.parentConfig) {\n      /**\n       * Get its configuration by calling its `getConfig` method with the same parameters this\n       * method received.\n       */\n      parentConfig = this.parentConfig.getConfig(...args);\n    }\n    // Define the current configuration using the parent one.\n    let currentConfig = extend(true, {}, parentConfig);\n    // Create a new set of arguments by adding the current configuration at the end.\n    let currentArgs = [...args, currentConfig];\n    // Update the current configuration by calling `createConfig` with the new arguments.\n    currentConfig = extend(true, {}, currentConfig, this.createConfig(...currentArgs));\n    // Update the arguments with the \"new current configuration\".\n    currentArgs = [...args, currentConfig];\n    // Finally, call the method for the overwrite file and merge everything together.\n    this._config = extend(true, {}, currentConfig, this._fileConfig(...currentArgs));\n  }\n  /**\n   * Load the configuration from an overwrite file.\n   * @ignore\n   * @access protected\n   */\n  _loadConfigFromFile() {\n    const filepath = this.overwritePaths\n    .map((overwrite) => this.pathUtils.join(overwrite))\n    .find((overwrite) => fs.pathExistsSync(overwrite));\n    // If there's a file...\n    if (filepath) {\n      // ...require it\n      // eslint-disable-next-line global-require, import/no-dynamic-require\n      const overwriteContents = require(filepath);\n      // If the file exported anything...\n      if (overwriteContents) {\n        // ...get the type of whatever the file exported.\n        const overwriteType = typeof overwriteContents;\n        // If the file exported a function...\n        if (overwriteType === 'function') {\n          // ...set it as the `_fileConfig` property.\n          this._fileConfig = overwriteContents;\n        } else {\n          // ...otherwise, set the `_fileConfig` property to return whatever the file exported.\n          this._fileConfig = () => overwriteContents;\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = ConfigurationFile;\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/src/abstracts/configurationFile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "ConfigurationFile",
    "memberof": "src/abstracts/configurationFile.js",
    "static": true,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/abstracts/configurationFile.js",
    "importStyle": "ConfigurationFile",
    "description": "A helper class for creating configuration files that can be overwritten on\nimplementation.",
    "lineNumber": 10,
    "version": "1.0",
    "abstract": true,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "PathUtils"
        ],
        "spread": false,
        "optional": false,
        "name": "pathUtils",
        "description": "To build the path to the overwrite file."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "overwritePaths",
        "description": "A path of a list of paths for files that can\n                                                overwrite the configuration. If used as a\n                                                string, it will assume the path is inside\n                                                the `config` folder, but if used as a list, the\n                                                paths will be relative to the project root\n                                                directory.\n                                                If used as an array, the class will use the\n                                                first file of the list that exists and ignore\n                                                the rest."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "asFactory",
        "description": "If `true`, every time `getConfig` gets called,\n                                                the configuration will be created again,\n                                                instead of caching it the first time it's\n                                                created."
      },
      {
        "nullable": true,
        "types": [
          "ConfigurationFile"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "parentConfig",
        "description": "If this parameter is used, the configuration\n                                                created by the instance will be merged on top\n                                                of the configuration returned by the\n                                                `getConfig` method of the parent configuration."
      }
    ],
    "abstract": true,
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": "If instantiated directly."
      }
    ]
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "pathUtils",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#pathUtils",
    "access": "public",
    "description": "A local reference for the `pathUtils` service.",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "PathUtils"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "overwritePaths",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#overwritePaths",
    "access": "public",
    "description": "A list of paths that can overwrite the configuration.",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "asFactory",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#asFactory",
    "access": "public",
    "description": "Whether the configuration should be created every time `getConfig` gets called or not.",
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "parentConfig",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#parentConfig",
    "access": "public",
    "description": "A parent configuration to extend.",
    "lineNumber": 61,
    "type": {
      "nullable": true,
      "types": [
        "ConfigurationFile"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "_config",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#_config",
    "access": "protected",
    "description": "This will store the configuration after creating it.",
    "lineNumber": 68,
    "ignore": true,
    "type": {
      "nullable": true,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "_fileConfigLoaded",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#_fileConfigLoaded",
    "access": "protected",
    "description": "A flag to know if the overwrite file has been loaded or not.",
    "lineNumber": 75,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "_fileConfig",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#_fileConfig",
    "access": "protected",
    "description": "A function that eventually will return the changes from the overwrite file. Once the file\nis loaded, if the file exports a function, then it will replace this variable, otherwise, the\nreturn value of this method will be become the exported configuration.",
    "lineNumber": 84,
    "ignore": true,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "createConfig",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#createConfig",
    "access": "public",
    "description": "This method will be called the first time `getConfig` gets called (or every time, depending on\nthe value of the `asFactory` property) and it should return the configuration contents.\nAs parameters, it will return the same ones sent to `getConfig`.",
    "examples": [
      "// Let's say the class receives this call: `getConfig({ name: 'Charito'}, 'hello')`, you could\n// do something like this:\ncreateConfig(options, prefix) {\n  return { message: `${prefix} ${options.name}` };\n}\n// And the configuration would be `{ message: 'hello Charito'}`"
    ],
    "lineNumber": 100,
    "abstract": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if not overwritten."
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "getConfig",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#getConfig",
    "access": "public",
    "description": "This is the public method all other services uses to obtain the configuration. If the\nconfiguration doesn't exists or `asFactory` was set to `true` on the `constructor`, the\nconfiguration will be reloaded.",
    "lineNumber": 111,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "A list of parameters for the service to use when creating the\n                     configuration"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "_loadConfig",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#_loadConfig",
    "access": "protected",
    "description": "This is the real method that creates the configuration.",
    "lineNumber": 125,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "A list of parameters for the service to use when creating the\n                     configuration"
      }
    ],
    "return": null
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "_loadConfigFromFile",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#_loadConfigFromFile",
    "access": "protected",
    "description": "Load the configuration from an overwrite file.",
    "lineNumber": 159,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 66,
    "kind": "file",
    "name": "src/express.js",
    "content": "const projext = require('projext/index');\n/**\n * Implements the Rollup middleware for a target on an Express app.\n * @param {Express} expressApp    The app where the middleware is going to be `use`d.\n * @param {string}  targetToBuild The name of the target that will be builded on the middleware.\n * @param {string}  targetToServe The name of the target that will implement the middleware.\n *                                When the other target is builded, it will assume that is on the\n *                                distribution directory, and if the target serving it is being\n *                                executed from the source directory it won't be able to use the\n *                                file system without hardcoding some relatives paths from the\n *                                build to the source; to avoid that, the method gets the build\n *                                path of this target, so when using `getDirectory()`, it\n *                                will think they are both on the distribution directory and the\n *                                paths can be created relative to that.\n * @return {MiddlewareInformation}\n */\nconst useExpress = (expressApp, targetToBuild, targetToServe) => {\n  // Get the middleware service.\n  const rollupMiddleware = projext.get('rollupMiddleware');\n  // Generate the middleware for the target.\n  const info = rollupMiddleware.generate(targetToBuild, targetToServe);\n  // Register the middleware on the app.\n  expressApp.use(info.middleware());\n\n  return info;\n};\n\nmodule.exports = useExpress;\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/src/express.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 67,
    "kind": "function",
    "name": "useExpress",
    "memberof": "src/express.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/express.js~useExpress",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/express.js",
    "importStyle": "useExpress",
    "description": "Implements the Rollup middleware for a target on an Express app.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Express"
        ],
        "spread": false,
        "optional": false,
        "name": "expressApp",
        "description": "The app where the middleware is going to be `use`d."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "targetToBuild",
        "description": "The name of the target that will be builded on the middleware."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "targetToServe",
        "description": "The name of the target that will implement the middleware.\n                               When the other target is builded, it will assume that is on the\n                               distribution directory, and if the target serving it is being\n                               executed from the source directory it won't be able to use the\n                               file system without hardcoding some relatives paths from the\n                               build to the source; to avoid that, the method gets the build\n                               path of this target, so when using `getDirectory()`, it\n                               will think they are both on the distribution directory and the\n                               paths can be created relative to that."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MiddlewareInformation"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 68,
    "kind": "file",
    "name": "src/index.js",
    "content": "const { name } = require('../package.json');\n\nconst {\n  rollupConfiguration,\n  rollupBuildEngine,\n} = require('./services/building');\n\nconst {\n  rollupBrowserDevelopmentConfiguration,\n  rollupBrowserProductionConfiguration,\n  rollupNodeDevelopmentConfiguration,\n  rollupNodeProductionConfiguration,\n  rollupPluginSettingsConfiguration,\n} = require('./services/configurations');\n\nconst {\n  rollupMiddleware,\n} = require('./services/server');\n/**\n * This is the method called by projext when loading the plugin. It takes care of registering\n * the Rollup build engine service and all the other services the engine depends on.\n * @param {Projext} app The projext main container.\n * @ignore\n */\nconst loadPlugin = (app) => {\n  /**\n   * This define the basic information of the plugin for other services to use:\n   * - The name of the plugin.\n   * - Where the Rollup configuration file is located.\n   * - The subpaths the plugin expose. Since they won't match a dependency on the `package.json`,\n   *   a Node target may want to include them while bundling.\n   */\n  app.set('rollupPluginInfo', () => ({\n    name,\n    configuration: 'src/rollup.config.js',\n    external: [\n      'express',\n      'jimpex',\n    ],\n  }));\n  // Register the main services of the build engine.\n  app.register(rollupConfiguration);\n  app.register(rollupBuildEngine);\n\n  // Register the services for building the targets configurations.\n  app.register(rollupBrowserDevelopmentConfiguration);\n  app.register(rollupBrowserProductionConfiguration);\n  app.register(rollupNodeDevelopmentConfiguration);\n  app.register(rollupNodeProductionConfiguration);\n  app.register(rollupPluginSettingsConfiguration);\n\n  // Register the service for server integration.\n  app.register(rollupMiddleware);\n};\n\nmodule.exports = loadPlugin;\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 69,
    "kind": "function",
    "name": "loadPlugin",
    "memberof": "src/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~loadPlugin",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup",
    "importStyle": "loadPlugin",
    "description": "This is the method called by projext when loading the plugin. It takes care of registering\nthe Rollup build engine service and all the other services the engine depends on.",
    "lineNumber": 25,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Projext"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "The projext main container."
      }
    ],
    "return": null
  },
  {
    "__docId__": 70,
    "kind": "file",
    "name": "src/jimpex/frontendFs.js",
    "content": "const path = require('path');\nconst { provider } = require('jimple');\n/**\n * This service overwrites the `Jimpex` default `FrontendFs` so all its methods will wait for\n * Rollup to finish building the files before being able to read, write or delete them.\n */\nclass RollupFrontendFs {\n  /**\n   * @param {RollupMiddlewareGetDirectory}  getDirectory  A function to get the directory where\n   *                                                      Rollup is bundling the files.\n   * @param {RollupMiddlewareGetFileSystem} getFileSystem A function to get access to the file\n   *                                                      system after Rollup finishes bundling\n   *                                                      the files.\n   */\n  constructor(getDirectory, getFileSystem) {\n    /**\n     * A function to get the directory where Rollup is bundling the files.\n     * @type {RollupMiddlewareGetDirectory}\n     */\n    this.getDirectory = getDirectory;\n    /**\n     * A function to get access to the file system after Rollup finishes bundling the files.\n     * @type {RollupMiddlewareGetFileSystem}\n     */\n    this.getFileSystem = getFileSystem;\n  }\n  /**\n   * Read a file from the file system.\n   * @param {string} filepath           The path to the file.\n   * @param {string} [encoding='utf-8'] The text encoding in which the file should be read.\n   * @return {Promise<string,Error>}\n   */\n  read(filepath, encoding = 'utf-8') {\n    return this.getFileSystem()\n    .then((fileSystem) => new Promise((resolve, reject) => {\n      fileSystem.readFile(this._getPath(filepath), encoding, (error, data) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(data);\n        }\n      });\n    }));\n  }\n  /**\n   * Write a file on the file system.\n   * @param {string} filepath The path to the file.\n   * @param {string} data     The contents of the file.\n   * @return {Promise<undefined,Error>}\n   */\n  write(filepath, data) {\n    return this.getFileSystem()\n    .then((fileSystem) => new Promise((resolve, reject) => {\n      fileSystem.writeFile(this._getPath(filepath), data, (error) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve();\n        }\n      });\n    }));\n  }\n  /**\n   * Delete a file from the file system.\n   * @param {string} filepath The path to the file.\n   * @return {Promise<undefined,Error>}\n   */\n  delete(filepath) {\n    return this.getFileSystem()\n    .then((fileSystem) => new Promise((resolve, reject) => {\n      fileSystem.unlink(this._getPath(filepath), (error) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve();\n        }\n      });\n    }));\n  }\n  /**\n   * Generate a path using the Rollup output directory as root.\n   * @param {string} rest The path you want to prefix with the Rollup output directory.\n   * @return {string}\n   * @ignore\n   * @access protected\n   */\n  _getPath(rest) {\n    return path.join(this.getDirectory(), rest);\n  }\n}\n/**\n * Generate a `Provider` with an already defined `getDirectory` and `getFileSystem` functions.\n * @example\n * // Generate the provider\n * const provider = rollupFrontendFs(() => 'some-dir', () => ...);\n * // Register it on the container\n * container.register(provider);\n * // Getting access to the service instance\n * const frontendFs = container.get('frontendFs');\n * @param {RollupMiddlewareGetDirectory}  getDirectory  A function to get the directory where\n *                                                      Rollup is bundling the files.\n * @param {RollupMiddlewareGetFileSystem} getFileSystem A function to get access to the file\n *                                                      system after Rollup finishes bundling\n *                                                      the files.\n * @return {Provider}\n */\nconst rollupFrontendFs = (getDirectory, getFileSystem) => provider((app) => {\n  app.set('frontendFs', () => new RollupFrontendFs(\n    getDirectory,\n    getFileSystem\n  ));\n});\n\nmodule.exports = {\n  RollupFrontendFs,\n  rollupFrontendFs,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/src/jimpex/frontendFs.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 71,
    "kind": "class",
    "name": "RollupFrontendFs",
    "memberof": "src/jimpex/frontendFs.js",
    "static": true,
    "longname": "src/jimpex/frontendFs.js~RollupFrontendFs",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/jimpex/frontendFs.js",
    "importStyle": "{RollupFrontendFs}",
    "description": "This service overwrites the `Jimpex` default `FrontendFs` so all its methods will wait for\nRollup to finish building the files before being able to read, write or delete them.",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 72,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/jimpex/frontendFs.js~RollupFrontendFs",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jimpex/frontendFs.js~RollupFrontendFs#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "RollupMiddlewareGetDirectory"
        ],
        "spread": false,
        "optional": false,
        "name": "getDirectory",
        "description": "A function to get the directory where\n                                                     Rollup is bundling the files."
      },
      {
        "nullable": null,
        "types": [
          "RollupMiddlewareGetFileSystem"
        ],
        "spread": false,
        "optional": false,
        "name": "getFileSystem",
        "description": "A function to get access to the file\n                                                     system after Rollup finishes bundling\n                                                     the files."
      }
    ]
  },
  {
    "__docId__": 73,
    "kind": "member",
    "name": "getDirectory",
    "memberof": "src/jimpex/frontendFs.js~RollupFrontendFs",
    "static": false,
    "longname": "src/jimpex/frontendFs.js~RollupFrontendFs#getDirectory",
    "access": "public",
    "description": "A function to get the directory where Rollup is bundling the files.",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "RollupMiddlewareGetDirectory"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "getFileSystem",
    "memberof": "src/jimpex/frontendFs.js~RollupFrontendFs",
    "static": false,
    "longname": "src/jimpex/frontendFs.js~RollupFrontendFs#getFileSystem",
    "access": "public",
    "description": "A function to get access to the file system after Rollup finishes bundling the files.",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "RollupMiddlewareGetFileSystem"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "read",
    "memberof": "src/jimpex/frontendFs.js~RollupFrontendFs",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jimpex/frontendFs.js~RollupFrontendFs#read",
    "access": "public",
    "description": "Read a file from the file system.",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "The path to the file."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'utf-8'",
        "defaultRaw": "'utf-8'",
        "name": "encoding",
        "description": "The text encoding in which the file should be read."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string,Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "write",
    "memberof": "src/jimpex/frontendFs.js~RollupFrontendFs",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jimpex/frontendFs.js~RollupFrontendFs#write",
    "access": "public",
    "description": "Write a file on the file system.",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "The path to the file."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The contents of the file."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<undefined,Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "delete",
    "memberof": "src/jimpex/frontendFs.js~RollupFrontendFs",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jimpex/frontendFs.js~RollupFrontendFs#delete",
    "access": "public",
    "description": "Delete a file from the file system.",
    "lineNumber": 68,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "The path to the file."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<undefined,Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "_getPath",
    "memberof": "src/jimpex/frontendFs.js~RollupFrontendFs",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jimpex/frontendFs.js~RollupFrontendFs#_getPath",
    "access": "protected",
    "description": "Generate a path using the Rollup output directory as root.",
    "lineNumber": 87,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "rest",
        "description": "The path you want to prefix with the Rollup output directory."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 79,
    "kind": "function",
    "name": "rollupFrontendFs",
    "memberof": "src/jimpex/frontendFs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/jimpex/frontendFs.js~rollupFrontendFs",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/jimpex/frontendFs.js",
    "importStyle": "{rollupFrontendFs}",
    "description": "Generate a `Provider` with an already defined `getDirectory` and `getFileSystem` functions.",
    "examples": [
      "// Generate the provider\nconst provider = rollupFrontendFs(() => 'some-dir', () => ...);\n// Register it on the container\ncontainer.register(provider);\n// Getting access to the service instance\nconst frontendFs = container.get('frontendFs');"
    ],
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "RollupMiddlewareGetDirectory"
        ],
        "spread": false,
        "optional": false,
        "name": "getDirectory",
        "description": "A function to get the directory where\n                                                     Rollup is bundling the files."
      },
      {
        "nullable": null,
        "types": [
          "RollupMiddlewareGetFileSystem"
        ],
        "spread": false,
        "optional": false,
        "name": "getFileSystem",
        "description": "A function to get access to the file\n                                                     system after Rollup finishes bundling\n                                                     the files."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 80,
    "kind": "file",
    "name": "src/jimpex/index.js",
    "content": "const { rollupFrontendFs } = require('./frontendFs');\nconst { rollupSendFile } = require('./sendFile');\n\nmodule.exports = {\n  rollupFrontendFs,\n  rollupSendFile,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/src/jimpex/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 81,
    "kind": "file",
    "name": "src/jimpex/sendFile.js",
    "content": "const { provider } = require('jimple');\n/**\n * This service overwrites the `Jimpex` default `sendFile` so it will use the `frontendFs` service\n * to reads the file contents.\n */\nclass RollupSendFile {\n  /**\n   * Class constructor.\n   * @param {RollupFrontendFs} frontendFs To be able to read the file the Rollup output directory.\n   */\n  constructor(frontendFs) {\n    /**\n     * A local reference for the `frontendFs` service.\n     * @type {RollupFrontendFs}\n     */\n    this.frontendFs = frontendFs;\n    /**\n     * Bind the `sendFile` method to use it as the service main function.\n     * @ignore\n     */\n    this.sendFile = this.sendFile.bind(this);\n  }\n  /**\n   * Send a file on the Jimpex response.\n   * @param {Reponse}  res           The response object generated by Express.\n   * @param {string}   filepath      The path to the file that needs to be sent.\n   * @param {function} [next=()=>{}] If anything goes wrong, this function will be called with the\n   *                                 exception.\n   */\n  sendFile(res, filepath, next = () => {}) {\n    this.frontendFs.read(filepath)\n    .then((contents) => {\n      res.write(contents);\n      res.end();\n    })\n    .catch((error) => {\n      next(error);\n    });\n  }\n}\n/**\n * The service provider that once registered on the app container will set\n * `RollupSendFile.sendFile` as the `sendFile` service.\n * @example\n * // Register it on the container\n * container.register(sendFile);\n * // Getting access to the service instance\n * const sendFile = container.get('sendFile');\n * @type {Provider}\n */\nconst rollupSendFile = provider((app) => {\n  app.set('sendFile', () => new RollupSendFile(\n    app.get('frontendFs')\n  ).sendFile);\n});\n\nmodule.exports = {\n  RollupSendFile,\n  rollupSendFile,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/src/jimpex/sendFile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 82,
    "kind": "class",
    "name": "RollupSendFile",
    "memberof": "src/jimpex/sendFile.js",
    "static": true,
    "longname": "src/jimpex/sendFile.js~RollupSendFile",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/jimpex/sendFile.js",
    "importStyle": "{RollupSendFile}",
    "description": "This service overwrites the `Jimpex` default `sendFile` so it will use the `frontendFs` service\nto reads the file contents.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 83,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/jimpex/sendFile.js~RollupSendFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jimpex/sendFile.js~RollupSendFile#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "RollupFrontendFs"
        ],
        "spread": false,
        "optional": false,
        "name": "frontendFs",
        "description": "To be able to read the file the Rollup output directory."
      }
    ]
  },
  {
    "__docId__": 84,
    "kind": "member",
    "name": "frontendFs",
    "memberof": "src/jimpex/sendFile.js~RollupSendFile",
    "static": false,
    "longname": "src/jimpex/sendFile.js~RollupSendFile#frontendFs",
    "access": "public",
    "description": "A local reference for the `frontendFs` service.",
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "RollupFrontendFs"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "sendFile",
    "memberof": "src/jimpex/sendFile.js~RollupSendFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jimpex/sendFile.js~RollupSendFile#sendFile",
    "access": "public",
    "description": "Send a file on the Jimpex response.",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "Reponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The response object generated by Express."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "The path to the file that needs to be sent."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "next",
        "description": "If anything goes wrong, this function will be called with the\n                                exception."
      }
    ],
    "return": null
  },
  {
    "__docId__": 87,
    "kind": "variable",
    "name": "rollupSendFile",
    "memberof": "src/jimpex/sendFile.js",
    "static": true,
    "longname": "src/jimpex/sendFile.js~rollupSendFile",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/jimpex/sendFile.js",
    "importStyle": "{rollupSendFile}",
    "description": "The service provider that once registered on the app container will set\n`RollupSendFile.sendFile` as the `sendFile` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(sendFile);\n// Getting access to the service instance\nconst sendFile = container.get('sendFile');"
    ],
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 88,
    "kind": "file",
    "name": "src/jimpex.js",
    "content": "const projext = require('projext/index');\nconst { middleware } = require('jimpex');\n\nconst { rollupFrontendFs, rollupSendFile } = require('./jimpex/index');\n/**\n * Implements the Rollup middleware for a target on a Jimpex app.\n * @param {Jimpex} jimpexApp     The app where the middleware is going to be registered.\n * @param {string} targetToBuild The name of the target that will be builded on the middleware.\n * @param {string} targetToServe The name of the target that will implement the middleware.\n *                               When the other target is builded, it will assume that is on the\n *                               distribution directory, and if the target serving it is being\n *                               executed from the source directory it won't be able to use the\n *                               file system without hardcoding some relatives paths from the\n *                               build to the source; to avoid that, the method gets the build\n *                               path of this target, so when using `getDirectory()`, it\n *                               will think they are both on the distribution directory and the\n *                               paths can be created relative to that.\n * @return {MiddlewareInformation}\n */\nconst useJimpex = (jimpexApp, targetToBuild, targetToServe) => {\n  // Get the middleware service.\n  const rollupMiddleware = projext.get('rollupMiddleware');\n  // Generate the middleware for the target.\n  const info = rollupMiddleware.generate(targetToBuild, targetToServe);\n  /**\n   * Register the overwrite services...\n   * - The `rollupFrontendFs` overwrites the regular `frontendFs` in order to block the file system\n   * until Rollup finishes the build process.\n   * - The `rollupSendFile` overwrites the regular `sendFile`, so instead of doing\n   * `reqsponse.sendFile`, it will first read the file using the updated `frontendFs` and then\n   * send its data as response.\n   */\n  jimpexApp.register(rollupFrontendFs(\n    info.getDirectory,\n    info.getFileSystem\n  ));\n  jimpexApp.register(rollupSendFile);\n  // Register the middleware.\n  jimpexApp.use(middleware(() => info.middleware()));\n  // Add an event listener that shows a _'waiting'_ message when the server starts.\n  jimpexApp.get('events').once('after-start', () => {\n    jimpexApp.get('appLogger').warning('waiting for Rollup...');\n  });\n\n  return info;\n};\n\nmodule.exports = useJimpex;\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/src/jimpex.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 89,
    "kind": "function",
    "name": "useJimpex",
    "memberof": "src/jimpex.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/jimpex.js~useJimpex",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/jimpex.js",
    "importStyle": "useJimpex",
    "description": "Implements the Rollup middleware for a target on a Jimpex app.",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Jimpex"
        ],
        "spread": false,
        "optional": false,
        "name": "jimpexApp",
        "description": "The app where the middleware is going to be registered."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "targetToBuild",
        "description": "The name of the target that will be builded on the middleware."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "targetToServe",
        "description": "The name of the target that will implement the middleware.\n                              When the other target is builded, it will assume that is on the\n                              distribution directory, and if the target serving it is being\n                              executed from the source directory it won't be able to use the\n                              file system without hardcoding some relatives paths from the\n                              build to the source; to avoid that, the method gets the build\n                              path of this target, so when using `getDirectory()`, it\n                              will think they are both on the distribution directory and the\n                              paths can be created relative to that."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MiddlewareInformation"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "src/plugins/compression/index.js",
    "content": "const path = require('path');\nconst rollupUtils = require('rollup-pluginutils');\nconst extend = require('extend');\nconst fs = require('fs-extra');\nconst zopfli = require('node-zopfli');\nconst { deferred } = require('wootils/shared');\n/**\n * This is a Rollup plugin that takes all the files that match an specific filter and compress using\n * Gzip.\n */\nclass ProjextRollupCompressionPlugin {\n  /**\n   * @param {ProjextRollupCompressionPluginOptions} [options={}]\n   * The options to customize the plugin behaviour.\n   * @param {string} [name='projext-rollup-plugin-compression']\n   * The name of the plugin's instance.\n   */\n  constructor(options = {}, name = 'projext-rollup-plugin-compression') {\n    /**\n     * The plugin options.\n     * @type {ProjextRollupCompressionPluginOptions}\n     * @access protected\n     * @ignore\n     */\n    this._options = extend(\n      true,\n      {\n        folder: './dist',\n        include: [],\n        exclude: [],\n        stats: () => {},\n      },\n      options\n    );\n    /**\n     * The name of the plugin instance.\n     * @type {string}\n     */\n    this.name = name;\n    /**\n     * The filter to decide which files will be compressed and which won't.\n     * @type {RollupFilter}\n     */\n    this.filter = rollupUtils.createFilter(\n      this._options.include,\n      this._options.exclude\n    );\n    /**\n     * @ignore\n     */\n    this.onwrite = this.onwrite.bind(this);\n  }\n  /**\n   * Gets the plugin options\n   * @return {ProjextRollupCompressionPluginOptions}\n   */\n  getOptions() {\n    return this._options;\n  }\n  /**\n   * This method gets called after Rollup writes the files on the file system. It takes care\n   * of finding all the files that match the filter and compressing them with Gzip.\n   * @return {Promise<Array,Error>} If everything goes well, the Promise will resolve on a list\n   *                                of {@link ProjextRollupCompressionPluginEntry} objects.\n   */\n  onwrite() {\n    return Promise.all(this._findAllTheFiles().map((file) => this._compressFile(file)));\n  }\n  /**\n   * Finds all the files on the directory specified on the options.\n   * @return {Array}\n   * @access protected\n   * @ignore\n   */\n  _findAllTheFiles() {\n    return this._readDirectory(this._options.folder);\n  }\n  /**\n   * Reads a directory recursively until it finds all the files that match the plugin's filter.\n   * @param {string} directory The directory to read.\n   * @return {Array}\n   * @access protected\n   * @ignore\n   */\n  _readDirectory(directory) {\n    const result = [];\n    // Get all the items on the directory.\n    fs.readdirSync(directory)\n    // Filter hidden and already compressed files.\n    .filter((item) => !item.startsWith('.') && !item.endsWith('.gz'))\n    // Normalize the item information.\n    .map((item) => {\n      const itemPath = path.join(directory, item);\n      return {\n        path: itemPath,\n        isDirectory: fs.lstatSync(itemPath).isDirectory(),\n      };\n    })\n    // Remove items that aren't directories or that doesn't match the plugin's filter.\n    .filter((item) => item.isDirectory || this.filter(item.path))\n    // Process the remaining items.\n    .forEach((item) => {\n      // If the item is a directory...\n      if (item.isDirectory) {\n        // ...read all its files and push them to the return list.\n        result.push(...this._readDirectory(item.path));\n      } else {\n        // ...otherwise, just add it to the return list.\n        result.push(item.path);\n      }\n    });\n    // Return the findings.\n    return result;\n  }\n  /**\n   * Compresses a file using Gzip.\n   * @param {string} filepath The path to the file to compress.\n   * @return {Promise<ProjextRollupCompressionPluginEntry,Error>}\n   * @access protected\n   * @ignore\n   */\n  _compressFile(filepath) {\n    // Get a deferred for the stats entry.\n    const statsDeferred = deferred();\n    // Add the deferred promise on the stats.\n    this._options.stats(statsDeferred.promise);\n    return new Promise((resolve, reject) => {\n      // Define the path for the compressed file.\n      const newFilepath = `${filepath}.gz`;\n      // Read the file.\n      fs.createReadStream(filepath)\n      .on('error', reject)\n      // Compress the file.\n      .pipe(zopfli.createGzip())\n      // Write the compressed file.\n      .pipe(fs.createWriteStream(newFilepath))\n      .on('error', (error) => {\n        statsDeferred.reject(error);\n        reject(error);\n      })\n      .on('close', () => {\n        // Resolve the deferred for the stats entry.\n        statsDeferred.resolve({\n          plugin: this.name,\n          filepath: newFilepath,\n        });\n        // Resolve the method's promise.\n        resolve({\n          original: filepath,\n          compressed: newFilepath,\n        });\n      });\n    });\n  }\n}\n/**\n * Shorthand method to create an instance of {@link ProjextRollupCompressionPlugin}.\n * @param {ProjextRollupCompressionPluginOptions} options\n * The options to customize the plugin behaviour.\n * @param {string} name\n * The name of the plugin's instance.\n * @return {ProjextRollupCompressionPlugin}\n */\nconst compression = (options, name) => new ProjextRollupCompressionPlugin(options, name);\n\nmodule.exports = {\n  ProjextRollupCompressionPlugin,\n  compression,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/src/plugins/compression/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "class",
    "name": "ProjextRollupCompressionPlugin",
    "memberof": "src/plugins/compression/index.js",
    "static": true,
    "longname": "src/plugins/compression/index.js~ProjextRollupCompressionPlugin",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/plugins/compression/index.js",
    "importStyle": "{ProjextRollupCompressionPlugin}",
    "description": "This is a Rollup plugin that takes all the files that match an specific filter and compress using\nGzip.",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 92,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/plugins/compression/index.js~ProjextRollupCompressionPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/compression/index.js~ProjextRollupCompressionPlugin#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProjextRollupCompressionPluginOptions"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "The options to customize the plugin behaviour."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'projext-rollup-plugin-compression'",
        "defaultRaw": "'projext-rollup-plugin-compression'",
        "name": "name",
        "description": "The name of the plugin's instance."
      }
    ]
  },
  {
    "__docId__": 93,
    "kind": "member",
    "name": "_options",
    "memberof": "src/plugins/compression/index.js~ProjextRollupCompressionPlugin",
    "static": false,
    "longname": "src/plugins/compression/index.js~ProjextRollupCompressionPlugin#_options",
    "access": "protected",
    "description": "The plugin options.",
    "lineNumber": 25,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "ProjextRollupCompressionPluginOptions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 94,
    "kind": "member",
    "name": "name",
    "memberof": "src/plugins/compression/index.js~ProjextRollupCompressionPlugin",
    "static": false,
    "longname": "src/plugins/compression/index.js~ProjextRollupCompressionPlugin#name",
    "access": "public",
    "description": "The name of the plugin instance.",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 95,
    "kind": "member",
    "name": "filter",
    "memberof": "src/plugins/compression/index.js~ProjextRollupCompressionPlugin",
    "static": false,
    "longname": "src/plugins/compression/index.js~ProjextRollupCompressionPlugin#filter",
    "access": "public",
    "description": "The filter to decide which files will be compressed and which won't.",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "RollupFilter"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "getOptions",
    "memberof": "src/plugins/compression/index.js~ProjextRollupCompressionPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/compression/index.js~ProjextRollupCompressionPlugin#getOptions",
    "access": "public",
    "description": "Gets the plugin options",
    "lineNumber": 57,
    "return": {
      "nullable": null,
      "types": [
        "ProjextRollupCompressionPluginOptions"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "onwrite",
    "memberof": "src/plugins/compression/index.js~ProjextRollupCompressionPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/compression/index.js~ProjextRollupCompressionPlugin#onwrite",
    "access": "public",
    "description": "This method gets called after Rollup writes the files on the file system. It takes care\nof finding all the files that match the filter and compressing them with Gzip.",
    "lineNumber": 66,
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array,Error>"
      ],
      "spread": false,
      "description": "If everything goes well, the Promise will resolve on a list\n                               of {@link ProjextRollupCompressionPluginEntry} objects."
    },
    "params": []
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "_findAllTheFiles",
    "memberof": "src/plugins/compression/index.js~ProjextRollupCompressionPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/compression/index.js~ProjextRollupCompressionPlugin#_findAllTheFiles",
    "access": "protected",
    "description": "Finds all the files on the directory specified on the options.",
    "lineNumber": 75,
    "ignore": true,
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "_readDirectory",
    "memberof": "src/plugins/compression/index.js~ProjextRollupCompressionPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/compression/index.js~ProjextRollupCompressionPlugin#_readDirectory",
    "access": "protected",
    "description": "Reads a directory recursively until it finds all the files that match the plugin's filter.",
    "lineNumber": 85,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "directory",
        "description": "The directory to read."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "_compressFile",
    "memberof": "src/plugins/compression/index.js~ProjextRollupCompressionPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/compression/index.js~ProjextRollupCompressionPlugin#_compressFile",
    "access": "protected",
    "description": "Compresses a file using Gzip.",
    "lineNumber": 122,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "The path to the file to compress."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<ProjextRollupCompressionPluginEntry,Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 102,
    "kind": "function",
    "name": "compression",
    "memberof": "src/plugins/compression/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugins/compression/index.js~compression",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/plugins/compression/index.js",
    "importStyle": "{compression}",
    "description": "Shorthand method to create an instance of {@link ProjextRollupCompressionPlugin}.",
    "lineNumber": 164,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProjextRollupCompressionPluginOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to customize the plugin behaviour."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the plugin's instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ProjextRollupCompressionPlugin"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 103,
    "kind": "file",
    "name": "src/plugins/css/index.js",
    "content": "const path = require('path');\nconst rollupUtils = require('rollup-pluginutils');\nconst extend = require('extend');\nconst fs = require('fs-extra');\nconst insertStyle = require('./insertFn');\n/**\n * This is a Rollup plugin for handling CSS stylesheets: Move them into a separated bundle,\n * inject them when the browser loads the app and transform them into strings so they can be used\n * on Node.\n */\nclass ProjextRollupCSSPlugin {\n  /**\n   * @param {ProjextRollupCSSPluginOptions} [options={}]\n   * The options to customize the plugin behaviour.\n   * @param {string} [name='projext-rollup-plugin-css']\n   * The name of the plugin's instance.\n   */\n  constructor(options = {}, name = 'projext-rollup-plugin-css') {\n    /**\n     * The plugin options.\n     * @type {ProjextRollupCSSPluginOptions}\n     * @access protected\n     * @ignore\n     */\n    this._options = extend(\n      true,\n      {\n        include: options.include || [/\\.css$/i],\n        exclude: [],\n        insert: false,\n        output: '',\n        processor: null,\n        insertFnName: '___$insertCSSBlocks',\n        stats: () => {},\n      },\n      options\n    );\n    // Normalize the value of the `output` option.\n    if (!this._options.insert && !this._options.output) {\n      this._options.output = !!this._options.output;\n    }\n    /**\n     * The name of the plugin instance.\n     * @type {string}\n     */\n    this.name = name;\n    /**\n     * The filter to decide which files will be processed and which won't.\n     * @type {RollupFilter}\n     */\n    this.filter = rollupUtils.createFilter(\n      this._options.include,\n      this._options.exclude\n    );\n    /**\n     * A list with all the files the plugin processed. This gets resetted every time the build\n     * process starts.\n     * @type {Array}\n     * @access protected\n     * @ignore\n     */\n    this._files = [];\n    /**\n     * A list of dictionaries with the information of all the files that will end up on a bundle.\n     * @type {Array}\n     * @access protected\n     * @ignore\n     */\n    this._toBundle = [];\n    /**\n     * @ignore\n     */\n    this.intro = this.intro.bind(this);\n    /**\n     * @ignore\n     */\n    this.transform = this.transform.bind(this);\n    /**\n     * @ignore\n     */\n    this.ongenerate = this.ongenerate.bind(this);\n  }\n  /**\n   * Gets the plugin options\n   * @return {ProjextRollupCSSPluginOptions}\n   */\n  getOptions() {\n    return this._options;\n  }\n  /**\n   * This gets called when Rollup starts the bundling process. If the `insert` option was set to\n   * `true`, this method will return the custom function the bundle will use to inject the\n   * styles on the `<head />`.\n   * @return {?string}\n   */\n  intro() {\n    let result = null;\n    if (this._options.insert) {\n      result = insertStyle.toString().replace(insertStyle.name, this._options.insertFnName);\n    }\n\n    return result;\n  }\n  /**\n   * Processes a file in order to determine whether it should export an empty string (in case\n   * the styles are being moved to a bundle), export the code and/or add extra named exports.\n   * @param {string} code     The contents of the file that it's being processed.\n   * @param {string} filepath The path of the file that it's being processed.\n   * @return {?Promise<RollupFileDefinition,Error>}\n   */\n  transform(code, filepath) {\n    let result = null;\n    // Validate that the file matches the plugin's filter.\n    if (this.filter(filepath)) {\n      // If the file wasn't already processed or the plugin won't generate a bundle...\n      if (!this._files.includes(filepath) || !this._options.output) {\n        // If the plugin will generate a bundle, mark the file as processed.\n        if (this._options.output) {\n          this._files.push(filepath);\n        }\n        const css = code.trim();\n        // If there's code on the file...\n        if (css) {\n          // ...then process the code.\n          result = this._process(css, filepath)\n          .then((processed) => {\n            let cssCode;\n            let rest;\n            let nextStep;\n            // If the processed value is a string...\n            if (typeof processed === 'string') {\n              // ...assume that's the style code.\n              cssCode = processed;\n            } else if (typeof processed.css !== 'string') {\n              /**\n               * If the object doesn't have a `css` property, it means that there's no style code,\n               * so throw an error.\n               */\n              const error = new Error('You need to return the styles using the `css` property');\n              nextStep = Promise.reject(error);\n            } else {\n              // But if the object has a `css` property, assume that's the style code.\n              cssCode = processed.css;\n              // Take the other keys as `rest` so they'll be used as the extra named exports.\n              rest = processed;\n              delete rest.css;\n            }\n            /**\n             * If a next step on the promise chain wasn't already defined, it means that there are\n             * no errors so far, so let's continue.\n             */\n            if (!nextStep) {\n              // If the code should be injected on the `<head />`.\n              if (this._options.insert) {\n                // ...format the code.\n                const escaped = JSON.stringify(cssCode);\n                // Define the call to the inject function.\n                const insertCall = `${this._options.insertFnName}(${escaped})`;\n                // Use the call inject function as the default export.\n                nextStep = this._transformResult(insertCall, rest);\n              } else if (this._options.output === false) {\n                /**\n                 * But if the code should be returned as a string, format it and set it as the\n                 * default export.\n                 */\n                const escaped = JSON.stringify(cssCode);\n                nextStep = this._transformResult(escaped, rest);\n              } else {\n                /**\n                 * Finally, if the code will be added to a bundle, keep the code and path\n                 * information so they'll be used on `ongenerate` and set the default export as\n                 * an empty string.\n                 */\n                this._toBundle.push({\n                  filepath,\n                  css: cssCode,\n                });\n                nextStep = this._transformResult('', rest);\n              }\n            }\n\n            return nextStep;\n          });\n        } else {\n          // If there wasn't any code to process, set an empty string as the default export.\n          result = Promise.resolve(this._transformResult());\n        }\n      } else {\n        /**\n         * If the file was already processed or it shouldn't be returned as a string, set an empty\n         * string as the default export.\n         */\n        result = Promise.resolve(this._transformResult());\n      }\n    }\n\n    return result;\n  }\n  /**\n   * This gets called by Rollup when the bundle is being generated. It takes care, if needed, to\n   * create the stylesheet bundle.\n   */\n  ongenerate() {\n    const { insert, output } = this._options;\n    /**\n     * If the code shouldn't be injected, there's a valid path for the bundle and there are files\n     * to put on the bundle...\n     */\n    if (\n      !insert &&\n      output &&\n      this._toBundle.length\n    ) {\n      // Puth all the files' contents on a single string.\n      const code = this._toBundle\n      .map((file) => file.css)\n      .join('\\n');\n\n      // If there's already a file on the specified path for the bundle...\n      if (fs.pathExistsSync(output)) {\n        // Append the code to the existing file.\n        const currentCode = fs.readFileSync(output, 'utf-8');\n        fs.writeFileSync(output, `${currentCode}\\n${code}`);\n      } else {\n        // Otherwise, create the new the file and add the code to it.\n        fs.ensureDirSync(path.dirname(output));\n        fs.writeFileSync(output, code);\n        this._options.stats(this.name, output);\n      }\n    }\n    // Reset the lists that keep track of the processed files.\n    this._files = [];\n    this._toBundle = [];\n  }\n  /**\n   * If an custom processor was specified on the options, the method will return the call to the\n   * processor, otherwise, it will return a promise with the received code.\n   * The idea of this method is that `transform` won't need to make an `if` and check whether\n   * the process should start with a promise or be sync, as this method always returns a promise.\n   * @param {string} css      The code to process.\n   * @param {string} filepath The path of the file which code will be processed.\n   * @return {Promise<StringOrObject,Error>}\n   * @access protected\n   * @ignore\n   */\n  _process(css, filepath) {\n    return this._options.processor ?\n      this._options.processor(css, filepath) :\n      Promise.resolve(css);\n  }\n  /**\n   * Formats the results of `transform` so they can be accepted by Rollup.\n   * @param {string}  css         The value of the file defult export.\n   * @param {?Object} [rest=null] A dictionary that will be used to create extra named exports if\n   *                              defined.\n   * @return {RollupFileDefinition}\n   * @access protected\n   * @ignore\n   */\n  _transformResult(css, rest = null) {\n    // If no code was defined, set the value of the default export to an empty string.\n    const cssCode = css || '\\'\\'';\n    // Generate the line with the default export.\n    let code = `export default ${cssCode};`;\n    // If extra named exports were defined...\n    if (rest) {\n      // Format each entry as a named export.\n      const restCode = Object.keys(rest)\n      .map((name) => {\n        const value = JSON.stringify(rest[name]);\n        return `export const ${name} = ${value};`;\n      })\n      .join('\\n');\n\n      // Append the named exports to the existing code.\n      code = `${code}\\n${restCode}`;\n    }\n\n    // Return the definition for Rollup.\n    return {\n      code,\n      map: {\n        mappings: '',\n      },\n    };\n  }\n}\n/**\n * Shorthand method to create an instance of {@link ProjextRollupCSSPlugin}.\n * @param {ProjextRollupCSSPluginOptions} options\n * The options to customize the plugin behaviour.\n * @param {string} name\n * The name of the plugin's instance.\n * @return {ProjextRollupCSSPlugin}\n */\nconst css = (options, name) => new ProjextRollupCSSPlugin(options, name);\n\nmodule.exports = {\n  ProjextRollupCSSPlugin,\n  css,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/src/plugins/css/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 104,
    "kind": "class",
    "name": "ProjextRollupCSSPlugin",
    "memberof": "src/plugins/css/index.js",
    "static": true,
    "longname": "src/plugins/css/index.js~ProjextRollupCSSPlugin",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/plugins/css/index.js",
    "importStyle": "{ProjextRollupCSSPlugin}",
    "description": "This is a Rollup plugin for handling CSS stylesheets: Move them into a separated bundle,\ninject them when the browser loads the app and transform them into strings so they can be used\non Node.",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 105,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/plugins/css/index.js~ProjextRollupCSSPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/css/index.js~ProjextRollupCSSPlugin#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProjextRollupCSSPluginOptions"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "The options to customize the plugin behaviour."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'projext-rollup-plugin-css'",
        "defaultRaw": "'projext-rollup-plugin-css'",
        "name": "name",
        "description": "The name of the plugin's instance."
      }
    ]
  },
  {
    "__docId__": 106,
    "kind": "member",
    "name": "_options",
    "memberof": "src/plugins/css/index.js~ProjextRollupCSSPlugin",
    "static": false,
    "longname": "src/plugins/css/index.js~ProjextRollupCSSPlugin#_options",
    "access": "protected",
    "description": "The plugin options.",
    "lineNumber": 25,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "ProjextRollupCSSPluginOptions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 107,
    "kind": "member",
    "name": "name",
    "memberof": "src/plugins/css/index.js~ProjextRollupCSSPlugin",
    "static": false,
    "longname": "src/plugins/css/index.js~ProjextRollupCSSPlugin#name",
    "access": "public",
    "description": "The name of the plugin instance.",
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 108,
    "kind": "member",
    "name": "filter",
    "memberof": "src/plugins/css/index.js~ProjextRollupCSSPlugin",
    "static": false,
    "longname": "src/plugins/css/index.js~ProjextRollupCSSPlugin#filter",
    "access": "public",
    "description": "The filter to decide which files will be processed and which won't.",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "RollupFilter"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 109,
    "kind": "member",
    "name": "_files",
    "memberof": "src/plugins/css/index.js~ProjextRollupCSSPlugin",
    "static": false,
    "longname": "src/plugins/css/index.js~ProjextRollupCSSPlugin#_files",
    "access": "protected",
    "description": "A list with all the files the plugin processed. This gets resetted every time the build\nprocess starts.",
    "lineNumber": 62,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 110,
    "kind": "member",
    "name": "_toBundle",
    "memberof": "src/plugins/css/index.js~ProjextRollupCSSPlugin",
    "static": false,
    "longname": "src/plugins/css/index.js~ProjextRollupCSSPlugin#_toBundle",
    "access": "protected",
    "description": "A list of dictionaries with the information of all the files that will end up on a bundle.",
    "lineNumber": 69,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "getOptions",
    "memberof": "src/plugins/css/index.js~ProjextRollupCSSPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/css/index.js~ProjextRollupCSSPlugin#getOptions",
    "access": "public",
    "description": "Gets the plugin options",
    "lineNumber": 87,
    "return": {
      "nullable": null,
      "types": [
        "ProjextRollupCSSPluginOptions"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "intro",
    "memberof": "src/plugins/css/index.js~ProjextRollupCSSPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/css/index.js~ProjextRollupCSSPlugin#intro",
    "access": "public",
    "description": "This gets called when Rollup starts the bundling process. If the `insert` option was set to\n`true`, this method will return the custom function the bundle will use to inject the\nstyles on the `<head />`.",
    "lineNumber": 96,
    "return": {
      "nullable": true,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "transform",
    "memberof": "src/plugins/css/index.js~ProjextRollupCSSPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/css/index.js~ProjextRollupCSSPlugin#transform",
    "access": "public",
    "description": "Processes a file in order to determine whether it should export an empty string (in case\nthe styles are being moved to a bundle), export the code and/or add extra named exports.",
    "lineNumber": 111,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "The contents of the file that it's being processed."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "The path of the file that it's being processed."
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "Promise<RollupFileDefinition,Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "ongenerate",
    "memberof": "src/plugins/css/index.js~ProjextRollupCSSPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/css/index.js~ProjextRollupCSSPlugin#ongenerate",
    "access": "public",
    "description": "This gets called by Rollup when the bundle is being generated. It takes care, if needed, to\ncreate the stylesheet bundle.",
    "lineNumber": 202,
    "params": [],
    "return": null
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "_process",
    "memberof": "src/plugins/css/index.js~ProjextRollupCSSPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/css/index.js~ProjextRollupCSSPlugin#_process",
    "access": "protected",
    "description": "If an custom processor was specified on the options, the method will return the call to the\nprocessor, otherwise, it will return a promise with the received code.\nThe idea of this method is that `transform` won't need to make an `if` and check whether\nthe process should start with a promise or be sync, as this method always returns a promise.",
    "lineNumber": 245,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "css",
        "description": "The code to process."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "The path of the file which code will be processed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<StringOrObject,Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "_transformResult",
    "memberof": "src/plugins/css/index.js~ProjextRollupCSSPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/css/index.js~ProjextRollupCSSPlugin#_transformResult",
    "access": "protected",
    "description": "Formats the results of `transform` so they can be accepted by Rollup.",
    "lineNumber": 259,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "css",
        "description": "The value of the file defult export."
      },
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "rest",
        "description": "A dictionary that will be used to create extra named exports if\n                             defined."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RollupFileDefinition"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 122,
    "kind": "function",
    "name": "css",
    "memberof": "src/plugins/css/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugins/css/index.js~css",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/plugins/css/index.js",
    "importStyle": "{css}",
    "description": "Shorthand method to create an instance of {@link ProjextRollupCSSPlugin}.",
    "lineNumber": 295,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProjextRollupCSSPluginOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to customize the plugin behaviour."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the plugin's instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ProjextRollupCSSPlugin"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 123,
    "kind": "file",
    "name": "src/plugins/css/insertFn.js",
    "content": "/* eslint-disable no-underscore-dangle */\n/* eslint-env browser */\n/**\n * Injects a style block on the document `<head />`.\n * @param {string} css The style block to inject.\n * @return {?string} If css is _\"thruty\"_, it will return the code, otherwise it will return\n *                   `Null`.\n * @ignore\n */\nfunction __insertStyleFunctionName__(css) {\n  // Define the variable to return.\n  let result = null;\n  // Validate that the code is _\"thruty\"_.\n  if (css) {\n    // Append the style tag.\n    const style = document.createElement('style');\n    style.setAttribute('type', 'text/css');\n    style.innerHTML = css;\n    document.head.appendChild(style);\n    // Set the code to be returned.\n    result = css;\n  }\n\n  return result;\n}\n\nmodule.exports = __insertStyleFunctionName__;\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/src/plugins/css/insertFn.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 124,
    "kind": "function",
    "name": "__insertStyleFunctionName__",
    "memberof": "src/plugins/css/insertFn.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugins/css/insertFn.js~__insertStyleFunctionName__",
    "access": "private",
    "export": true,
    "importPath": "projext-plugin-rollup/src/plugins/css/insertFn.js",
    "importStyle": "__insertStyleFunctionName__",
    "description": "Injects a style block on the document `<head />`.",
    "lineNumber": 10,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "css",
        "description": "The style block to inject."
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "If css is _\"thruty\"_, it will return the code, otherwise it will return\n                  `Null`."
    }
  },
  {
    "__docId__": 125,
    "kind": "file",
    "name": "src/plugins/devServer/index.js",
    "content": "const https = require('https');\nconst http = require('http');\nconst path = require('path');\nconst opener = require('opener');\nconst fs = require('fs-extra');\nconst extend = require('extend');\nconst mime = require('mime');\nconst statuses = require('statuses');\nconst ProjextRollupUtils = require('../utils');\n/**\n * @ignore\n */\nconst createHTTPSServer = https.createServer;\n/**\n * @ignore\n */\nconst createHTTPServer = http.createServer;\n/**\n * This a Rollup plugin that runs a dev server for a bundled application.\n */\nclass ProjextRollupDevServerPlugin {\n  /**\n   * @param {ProjextRollupDevServerPluginOptions} [options={}]\n   * The options to customize the plugin behaviour.\n   * @param {string} [name='projext-rollup-plugin-dev-server']\n   * The name of the plugin's instance.\n   */\n  constructor(options = {}, name = 'projext-rollup-plugin-dev-server') {\n    /**\n     * The plugin options.\n     * @type {ProjextRollupDevServerPluginOptions}\n     * @access protected\n     * @ignore\n     */\n    this._options = extend(\n      true,\n      {\n        host: 'localhost',\n        port: 8080,\n        contentBase: [],\n        historyApiFallback: false,\n        https: null,\n        open: true,\n        logger: null,\n        onStart: () => {},\n        onStop: () => {},\n      },\n      options\n    );\n    // Normalize the received `contentBase` option into an array.\n    this._options.contentBase = this._normalizeContentBase();\n    /**\n     * The name of the plugin's instance.\n     * @type {string}\n     */\n    this.name = name;\n    /**\n     * The server URL.\n     * @type {string}\n     */\n    this.url = this._createServerURL();\n    // Set the default mime type for the server respones.\n    mime.default_type = 'text/plain';\n    /**\n     * Validate the options and either create or assign a {@link Logger} instance for the plugin.\n     * @type {Logger}\n     * @access protected\n     * @ignore\n     */\n    this._logger = ProjextRollupUtils.createLogger(this.name, this._options.logger);\n    /**\n     * This is the property that will hold the server instance after it gets created.\n     * @type {?Object}\n     * @access protected\n     * @ignore\n     */\n    this._instance = null;\n    /**\n     * The list of events that the plugin will listen for in order to stop the server before\n     * exiting the process.\n     * @type {Array}\n     * @access protected\n     * @ignore\n     */\n    this._terminationEvents = ['SIGINT', 'SIGTERM'];\n    /**\n     * Whether or not the browser was already openend.\n     * @type {boolean}\n     * @access protected\n     * @ignore\n     */\n    this._alreadyOpen = false;\n    /**\n     * The message of the error thrown when a requested file can't be found. It's on a property\n     * because the plugin validates it more than once, and we don't want to have to write it\n     * more than once.\n     * @type {string}\n     * @access protected\n     * @ignore\n     */\n    this._NOT_FOUND_ERROR = 'ENOENT: no such file or directory';\n    /**\n     * The path for the plugin's favicon. The browsers usually try to fetch an app favicon by\n     * requesting `/favicon.ico`, so when the plugin detects that request but there's no file, it\n     * will respond with a default favicon with the Rollup logo.\n     * @type {string}\n     * @access protected\n     * @ignore\n     */\n    this._defaultFaviconPath = path.join(path.dirname(__filename), 'favicon.ico');\n    /**\n     * @ignore\n     */\n    this.onwrite = this.onwrite.bind(this);\n    /**\n     * @ignore\n     */\n    this._handler = this._handler.bind(this);\n    /**\n     * @ignore\n     */\n    this._terminate = this._terminate.bind(this);\n  }\n  /**\n   * Gets the plugin options\n   * @return {ProjextRollupDevServerPluginOptions}\n   */\n  getOptions() {\n    return this._options;\n  }\n  /**\n   * This is called after Rollup finishes writing the files on the file system. It checks if\n   * there's an instance of the server running and if there isn't, it creates a new one.\n   */\n  onwrite() {\n    // Validate that there's no instance already running.\n    if (!this._instance) {\n      // Get the server basic options.\n      const { https: httpsSettings, port } = this._options;\n      // Create the server instance.\n      this._instance = httpsSettings ?\n        createHTTPSServer(httpsSettings, this._handler) :\n        createHTTPServer(this._handler);\n\n      // Start listening for requests.\n      this._instance.listen(port);\n      // Log some information messages.\n      this._logger.success(`Your app is running on the port ${port}`);\n      this._logger.info(this.url);\n      // Start listening for process events that require the sever instance to be terminated.\n      this._startListeningForTermination();\n      // Open the browser.\n      this._open();\n      // Invoke the `onStart` callback.\n      this._options.onStart(this);\n    }\n  }\n  /**\n   * Creates the server full URL using the specified protocol, hostname and port.\n   * @return {string}\n   * @access protected\n   * @ignore\n   */\n  _createServerURL() {\n    const protocol = this._options.https ? 'https' : 'http';\n    return `${protocol}://${this._options.host}:${this._options.port}`;\n  }\n  /**\n   * Normalizes the `contentBase` option into an array.\n   * @return {Array}\n   * @access protected\n   * @ignore\n   */\n  _normalizeContentBase() {\n    // Define the Array that will be the option new value.\n    const newContentBase = [];\n    // Get the current option value.\n    const { contentBase } = this._options;\n    // If the option is already an Array...\n    if (Array.isArray(contentBase)) {\n      // If it has contents, which means the implementation overwrote the default value...\n      if (contentBase.length) {\n        // ...push the current items to the new Array.\n        newContentBase.push(...contentBase);\n      } else {\n        // ...otherwise, push the current directory.\n        newContentBase.push('./');\n      }\n    } else {\n      // ...but if the option is an string, push it as the only item of the new Array.\n      newContentBase.push(contentBase);\n    }\n\n    // Return the new option value.\n    return newContentBase;\n  }\n  /**\n   * This method gets called when one of the termination events the plugin listens for is emitted.\n   * If stops the server, deletes the instance and exits the process.\n   * @access protected\n   * @ignore\n   */\n  _terminate() {\n    if (this._instance) {\n      this._instance.close();\n      this._instance = null;\n      this._stopListeningForTermination();\n      this._options.onStop(this);\n    }\n\n    process.exit();\n  }\n  /**\n   * This is called when the the server instance is created. It starts listening for termination\n   * events that require the server to be stopped.\n   * @access protected\n   * @ignore\n   */\n  _startListeningForTermination() {\n    this._terminationEvents.forEach((eventName) => {\n      process.on(eventName, this._terminate);\n    });\n  }\n  /**\n   * This is called when the server is stopped. It removes the listeners for termination events.\n   * @access protected\n   * @ignore\n   */\n  _stopListeningForTermination() {\n    this._terminationEvents.forEach((eventName) => {\n      process.removeListener(eventName, this._terminate);\n    });\n  }\n  /**\n   * This is called when the server instance is created. It opens the browser after validating that\n   * the option to do it is `true` and the browser was not already opened.\n   * @access protected\n   * @ignore\n   */\n  _open() {\n    if (!this._alreadyOpen && this._options.open) {\n      this._alreadyOpen = true;\n      opener(this.url);\n    }\n  }\n  /**\n   * This method gets called every time the server needs to resolve a request. It validates the\n   * request and tries to serve a file from the file system.\n   * @param {HTTPRequest}  req The request information.\n   * @param {HTTPResponse} res The response information.\n   * @return {Promise<undefined,Error>}\n   * @access protected\n   * @ignore\n   */\n  _handler(req, res) {\n    // Remove any query string from the URL.\n    const urlPath = decodeURI(req.url.split('?').shift());\n    // Get the file contents.\n    return this._readFileFromContentBase(urlPath)\n    // Serve the file.\n    .then((contents) => this._serveFile(res, urlPath, contents))\n    // In case of failure...\n    .catch((error) => {\n      let result = null;\n      // If the file couldn't be found...\n      if (error.message && error.message === this._NOT_FOUND_ERROR) {\n        // If the request was for the favicon, serve the plugin's favicon.\n        if (req.url === '/favicon.ico') {\n          result = this._serveDefaultFavicon(res);\n        } else if (this._options.historyApiFallback) {\n          // If `historyApiFallback` is enabled, try to serve the `index.html`.\n          result = this._serveFallback(res, urlPath);\n        } else {\n          // Otherwise, respond with a Not Found.\n          result = this._notFound(res, urlPath);\n        }\n      } else {\n        // If the error is unknown, respond with an Internal Error.\n        result = this._internalError(res, error);\n      }\n\n      return result;\n    });\n  }\n  /**\n   * This method tries to find a file on the list of `contentBase` directories and return its\n   * contents so it can be served.\n   * If the method doesn't find a file on directory, it will call itself recursively with the next\n   * directory until it finds it or returns a Not Found error.\n   * @param {string} urlPath              The filepath received by the server.\n   * @param {number} [contentBaseIndex=0] The index of the dictionary it should try on the\n   *                                      `contentBase` list.\n   * @return {Promise<string,Error>}\n   * @access protected\n   * @ignore\n   */\n  _readFileFromContentBase(urlPath, contentBaseIndex = 0) {\n    let result;\n    // Get the directory to test from the list using the received index.\n    const contentBase = this._options.contentBase[contentBaseIndex];\n    // If there's a directory for the received index...\n    if (contentBase) {\n      // Build the path to the file.\n      let filepath = path.join(contentBase, urlPath);\n      // If the path ends with a `/`, automatically append an `index.html` to it.\n      if (filepath.endsWith('/')) {\n        filepath = `${filepath}index.html`;\n      }\n\n      // If the file exists...\n      if (fs.pathExistsSync(filepath)) {\n        // ...set to return the promise with the file contents.\n        result = fs.readFile(filepath);\n      } else {\n        // ...otherwise, continue to the next directory.\n        result = this._readFileFromContentBase(urlPath, contentBaseIndex + 1);\n      }\n    } else {\n      // If there are no more directories to test, set to return a Not Found error.\n      result = Promise.reject(new Error(this._NOT_FOUND_ERROR));\n    }\n\n    return result;\n  }\n  /**\n   * This is the method that actually serves a file.\n   * @param {HTTPResponse} res     The response information.\n   * @param {string}       urlPath The path to the requested file.\n   * @param {string}       file    The contents to serve.\n   * @access protected\n   * @ignore\n   */\n  _serveFile(res, urlPath, file) {\n    /**\n     * If the request ended with `/`, assume that `_readFileFromContentBase` appended an\n     * `index.html` and the file mime type is for HTML, otherwise, use `mime` to obtain the right\n     * type.\n     */\n    const mimeType = urlPath.endsWith('/') ?\n      'text/html' :\n      mime.getType(urlPath);\n    // Add the mime type to the response headers.\n    res.writeHead(statuses.ok, {\n      'Content-Type': mimeType,\n    });\n    // Send the file contents and end the response.\n    res.end(file, 'utf-8');\n  }\n  /**\n   * This method gets called when the server recived a request for `/favicon.ico` and the file\n   * doesn't exist. It tries to load the plugin's favicon and serve it.\n   * @param {HTTPResponse} res The response information.\n   * @return {Promise<undefined,Error>}\n   * @access protected\n   * @ignore\n   */\n  _serveDefaultFavicon(res) {\n    // Get the plugin's favicon file contents.\n    return fs.readFile(this._defaultFaviconPath)\n    // Serve it.\n    .then((favicon) => {\n      this._serveFile(res, '/favicon.ico', favicon);\n    })\n    // If something went wrong, respond with an Internal Error.\n    .catch((error) => {\n      this._internalError(res, error);\n    });\n  }\n  /**\n   * This method gets called when the server received a request for a path that doesn't exist and\n   * `historyApiFallback` is enabled. The method will try to serve the contents of `/index.html`.\n   * @param {HTTPResponse} res          The response information.\n   * @param {string}       originalPath The file path originally requested.\n   * @return {Promise<undefined,Error>}\n   * @access protected\n   * @ignore\n   */\n  _serveFallback(res, originalPath) {\n    const urlPath = 'index.html';\n    return this._readFileFromContentBase(urlPath)\n    // Serve the file.\n    .then((contents) => {\n      this._serveFile(res, urlPath, contents);\n    })\n    // In case of failure...\n    .catch((error) => {\n      let result = null;\n      // If the file couldn't be found...\n      if (error.message && error.message === this._NOT_FOUND_ERROR) {\n        result = this._notFound(res, originalPath);\n      } else {\n        // If the error is unknown, respond with an Internal Error.\n        result = this._internalError(res, error);\n      }\n\n      return result;\n    });\n  }\n  /**\n   * Sends a response with a Not Found error.\n   * @param {HTTPResponse} res The response information.\n   * @param {string}       urlPath The path to the requested file.\n   * @access protected\n   * @ignore\n   */\n  _notFound(res, urlPath) {\n    this._responsdWithError(res, statuses['not found'], urlPath);\n  }\n  /**\n   * Sends a response with an Internal Error.\n   * @param {HTTPResponse} res   The response information.\n   * @param {Error|*}      error The unexpected error.\n   * @access protected\n   * @ignore\n   */\n  _internalError(res, error) {\n    let message;\n    // If the received error is an actual Error...\n    if (error instanceof Error) {\n      // ...format the error stack information.\n      const stackList = error.stack.split('\\n');\n      stackList.shift();\n      const stackText = stackList.map((line) => `  -> ${line.trim()}`).join('\\n');\n      // Append the stack information to the error message.\n      message = `${error.message}\\n\\n${stackText}`;\n    } else {\n      // ...otherwise, just assume that the received error is the message.\n      message = error;\n    }\n    // Serve the error.\n    this._responsdWithError(res, statuses['internal server error'], message);\n  }\n  /**\n   * Sends an error response.\n   * @param {HTTPResponse} res     The response information.\n   * @param {number}       status  The HTTP status for the response.\n   * @param {string}       message The error message.\n   * @access protected\n   * @ignore\n   */\n  _responsdWithError(res, status, message) {\n    const title = statuses[status];\n    /**\n     * Define the response text by prefixing the received message with the response status and\n     * adding the plugin's name at the end.\n     */\n    const text = `${status} ${title}\\n\\n` +\n      `${message}\\n\\n` +\n      `${this.name}`;\n\n    // Set the response HTTP status.\n    res.writeHead(status);\n    // Send the error message and end the response.\n    res.end(text, 'utf-8');\n  }\n}\n/**\n * Shorthand method to create an instance of {@link ProjextRollupDevServerPlugin}.\n * @param {ProjextRollupDevServerPluginOptions} options\n * The options to customize the plugin behaviour.\n * @param {string} name\n * The name of the plugin's instance.\n * @return {ProjextRollupDevServerPlugin}\n */\nconst devServer = (options, name) => new ProjextRollupDevServerPlugin(options, name);\n\nmodule.exports = {\n  ProjextRollupDevServerPlugin,\n  devServer,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/src/plugins/devServer/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 126,
    "kind": "variable",
    "name": "createHTTPSServer",
    "memberof": "src/plugins/devServer/index.js",
    "static": true,
    "longname": "src/plugins/devServer/index.js~createHTTPSServer",
    "access": "public",
    "export": false,
    "importPath": "projext-plugin-rollup/src/plugins/devServer/index.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 13,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "variable",
    "name": "createHTTPServer",
    "memberof": "src/plugins/devServer/index.js",
    "static": true,
    "longname": "src/plugins/devServer/index.js~createHTTPServer",
    "access": "public",
    "export": false,
    "importPath": "projext-plugin-rollup/src/plugins/devServer/index.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 17,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "class",
    "name": "ProjextRollupDevServerPlugin",
    "memberof": "src/plugins/devServer/index.js",
    "static": true,
    "longname": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/plugins/devServer/index.js",
    "importStyle": "{ProjextRollupDevServerPlugin}",
    "description": "This a Rollup plugin that runs a dev server for a bundled application.",
    "lineNumber": 21,
    "interface": false
  },
  {
    "__docId__": 129,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProjextRollupDevServerPluginOptions"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "The options to customize the plugin behaviour."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'projext-rollup-plugin-dev-server'",
        "defaultRaw": "'projext-rollup-plugin-dev-server'",
        "name": "name",
        "description": "The name of the plugin's instance."
      }
    ]
  },
  {
    "__docId__": 130,
    "kind": "member",
    "name": "_options",
    "memberof": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin",
    "static": false,
    "longname": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin#_options",
    "access": "protected",
    "description": "The plugin options.",
    "lineNumber": 35,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "ProjextRollupDevServerPluginOptions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 131,
    "kind": "member",
    "name": "name",
    "memberof": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin",
    "static": false,
    "longname": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin#name",
    "access": "public",
    "description": "The name of the plugin's instance.",
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 132,
    "kind": "member",
    "name": "url",
    "memberof": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin",
    "static": false,
    "longname": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin#url",
    "access": "public",
    "description": "The server URL.",
    "lineNumber": 61,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 133,
    "kind": "member",
    "name": "_logger",
    "memberof": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin",
    "static": false,
    "longname": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin#_logger",
    "access": "protected",
    "description": "Validate the options and either create or assign a {@link Logger} instance for the plugin.",
    "lineNumber": 70,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Logger"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 134,
    "kind": "member",
    "name": "_instance",
    "memberof": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin",
    "static": false,
    "longname": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin#_instance",
    "access": "protected",
    "description": "This is the property that will hold the server instance after it gets created.",
    "lineNumber": 77,
    "ignore": true,
    "type": {
      "nullable": true,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 135,
    "kind": "member",
    "name": "_terminationEvents",
    "memberof": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin",
    "static": false,
    "longname": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin#_terminationEvents",
    "access": "protected",
    "description": "The list of events that the plugin will listen for in order to stop the server before\nexiting the process.",
    "lineNumber": 85,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 136,
    "kind": "member",
    "name": "_alreadyOpen",
    "memberof": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin",
    "static": false,
    "longname": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin#_alreadyOpen",
    "access": "protected",
    "description": "Whether or not the browser was already openend.",
    "lineNumber": 92,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 137,
    "kind": "member",
    "name": "_NOT_FOUND_ERROR",
    "memberof": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin",
    "static": false,
    "longname": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin#_NOT_FOUND_ERROR",
    "access": "protected",
    "description": "The message of the error thrown when a requested file can't be found. It's on a property\nbecause the plugin validates it more than once, and we don't want to have to write it\nmore than once.",
    "lineNumber": 101,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 138,
    "kind": "member",
    "name": "_defaultFaviconPath",
    "memberof": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin",
    "static": false,
    "longname": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin#_defaultFaviconPath",
    "access": "protected",
    "description": "The path for the plugin's favicon. The browsers usually try to fetch an app favicon by\nrequesting `/favicon.ico`, so when the plugin detects that request but there's no file, it\nwill respond with a default favicon with the Rollup logo.",
    "lineNumber": 110,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "getOptions",
    "memberof": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin#getOptions",
    "access": "public",
    "description": "Gets the plugin options",
    "lineNumber": 128,
    "return": {
      "nullable": null,
      "types": [
        "ProjextRollupDevServerPluginOptions"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "onwrite",
    "memberof": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin#onwrite",
    "access": "public",
    "description": "This is called after Rollup finishes writing the files on the file system. It checks if\nthere's an instance of the server running and if there isn't, it creates a new one.",
    "lineNumber": 135,
    "params": [],
    "return": null
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "_createServerURL",
    "memberof": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin#_createServerURL",
    "access": "protected",
    "description": "Creates the server full URL using the specified protocol, hostname and port.",
    "lineNumber": 164,
    "ignore": true,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "_normalizeContentBase",
    "memberof": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin#_normalizeContentBase",
    "access": "protected",
    "description": "Normalizes the `contentBase` option into an array.",
    "lineNumber": 174,
    "ignore": true,
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "_terminate",
    "memberof": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin#_terminate",
    "access": "protected",
    "description": "This method gets called when one of the termination events the plugin listens for is emitted.\nIf stops the server, deletes the instance and exits the process.",
    "lineNumber": 203,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "_startListeningForTermination",
    "memberof": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin#_startListeningForTermination",
    "access": "protected",
    "description": "This is called when the the server instance is created. It starts listening for termination\nevents that require the server to be stopped.",
    "lineNumber": 219,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "_stopListeningForTermination",
    "memberof": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin#_stopListeningForTermination",
    "access": "protected",
    "description": "This is called when the server is stopped. It removes the listeners for termination events.",
    "lineNumber": 229,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "_open",
    "memberof": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin#_open",
    "access": "protected",
    "description": "This is called when the server instance is created. It opens the browser after validating that\nthe option to do it is `true` and the browser was not already opened.",
    "lineNumber": 240,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "_handler",
    "memberof": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin#_handler",
    "access": "protected",
    "description": "This method gets called every time the server needs to resolve a request. It validates the\nrequest and tries to serve a file from the file system.",
    "lineNumber": 255,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTTPRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "req",
        "description": "The request information."
      },
      {
        "nullable": null,
        "types": [
          "HTTPResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The response information."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<undefined,Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "_readFileFromContentBase",
    "memberof": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin#_readFileFromContentBase",
    "access": "protected",
    "description": "This method tries to find a file on the list of `contentBase` directories and return its\ncontents so it can be served.\nIf the method doesn't find a file on directory, it will call itself recursively with the next\ndirectory until it finds it or returns a Not Found error.",
    "lineNumber": 297,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "urlPath",
        "description": "The filepath received by the server."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "contentBaseIndex",
        "description": "The index of the dictionary it should try on the\n                                     `contentBase` list."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string,Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "_serveFile",
    "memberof": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin#_serveFile",
    "access": "protected",
    "description": "This is the method that actually serves a file.",
    "lineNumber": 333,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTTPResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The response information."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "urlPath",
        "description": "The path to the requested file."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The contents to serve."
      }
    ],
    "return": null
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "_serveDefaultFavicon",
    "memberof": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin#_serveDefaultFavicon",
    "access": "protected",
    "description": "This method gets called when the server recived a request for `/favicon.ico` and the file\ndoesn't exist. It tries to load the plugin's favicon and serve it.",
    "lineNumber": 357,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTTPResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The response information."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<undefined,Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "_serveFallback",
    "memberof": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin#_serveFallback",
    "access": "protected",
    "description": "This method gets called when the server received a request for a path that doesn't exist and\n`historyApiFallback` is enabled. The method will try to serve the contents of `/index.html`.",
    "lineNumber": 378,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTTPResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The response information."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "originalPath",
        "description": "The file path originally requested."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<undefined,Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "_notFound",
    "memberof": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin#_notFound",
    "access": "protected",
    "description": "Sends a response with a Not Found error.",
    "lineNumber": 406,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTTPResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The response information."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "urlPath",
        "description": "The path to the requested file."
      }
    ],
    "return": null
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "_internalError",
    "memberof": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin#_internalError",
    "access": "protected",
    "description": "Sends a response with an Internal Error.",
    "lineNumber": 416,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTTPResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The response information."
      },
      {
        "nullable": null,
        "types": [
          "Error",
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "The unexpected error."
      }
    ],
    "return": null
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "_responsdWithError",
    "memberof": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/devServer/index.js~ProjextRollupDevServerPlugin#_responsdWithError",
    "access": "protected",
    "description": "Sends an error response.",
    "lineNumber": 441,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTTPResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The response information."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "status",
        "description": "The HTTP status for the response."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The error message."
      }
    ],
    "return": null
  },
  {
    "__docId__": 161,
    "kind": "function",
    "name": "devServer",
    "memberof": "src/plugins/devServer/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugins/devServer/index.js~devServer",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/plugins/devServer/index.js",
    "importStyle": "{devServer}",
    "description": "Shorthand method to create an instance of {@link ProjextRollupDevServerPlugin}.",
    "lineNumber": 465,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProjextRollupDevServerPluginOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to customize the plugin behaviour."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the plugin's instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ProjextRollupDevServerPlugin"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 162,
    "kind": "file",
    "name": "src/plugins/index.js",
    "content": "const { compression } = require('./compression');\nconst { css } = require('./css');\nconst { devServer } = require('./devServer');\nconst { nodeRunner } = require('./nodeRunner');\nconst { stats } = require('./stats');\nconst { stylesheetAssets } = require('./stylesheetAssets');\nconst { stylesheetModulesFixer } = require('./stylesheetModulesFixer');\nconst { template } = require('./template');\nconst { urls } = require('./urls');\nconst { windowAsGlobal } = require('./windowAsGlobal');\n\nmodule.exports = {\n  compression,\n  css,\n  devServer,\n  nodeRunner,\n  stats,\n  stylesheetAssets,\n  stylesheetModulesFixer,\n  template,\n  urls,\n  windowAsGlobal,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/src/plugins/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 163,
    "kind": "file",
    "name": "src/plugins/nodeRunner/index.js",
    "content": "const { fork } = require('child_process');\nconst fs = require('fs-extra');\nconst extend = require('extend');\nconst ProjextRollupUtils = require('../utils');\n/**\n * This a Rollup plugin that takes care of executing the bundled Noded app after the build is\n * generated.\n */\nclass ProjextRollupNodeRunnerPlugin {\n  /**\n   * @param {ProjextRollupNodeRunnerPluginOptions} [options={}]\n   * The options to customize the plugin behaviour.\n   * @param {string} [name='projext-rollup-plugin-node-runner']\n   * The name of the plugin's instance.\n   */\n  constructor(options, name = 'projext-rollup-plugin-node-runner') {\n    /**\n     * The plugin options.\n     * @type {ProjextRollupNodeRunnerPluginOptions}\n     * @access protected\n     * @ignore\n     */\n    this._options = extend(\n      true,\n      {\n        file: null,\n        logger: null,\n        onStart: () => {},\n        onStop: () => {},\n      },\n      options\n    );\n    /**\n     * The name of the plugin's instance.\n     * @type {string}\n     */\n    this.name = name;\n    // Validate the received options before doing anything else.\n    this._validateOptions();\n    /**\n     * Validate the options and either create or assign a {@link Logger} instance for the plugin.\n     * @type {Logger}\n     * @access protected\n     * @ignore\n     */\n    this._logger = ProjextRollupUtils.createLogger(this.name, this._options.logger);\n    /**\n     * This is the property that will eventually hold the execution instance.\n     * @type {?Object}\n     * @access protected\n     * @ignore\n     */\n    this._instance = null;\n    /**\n     * The list of events that the plugin will listen for in order to stop the execution before\n     * exiting the process.\n     * @type {Array}\n     * @access protected\n     * @ignore\n     */\n    this._terminationEvents = ['SIGINT', 'SIGTERM'];\n    /**\n     * @ignore\n     */\n    this.onwrite = this.onwrite.bind(this);\n    /**\n     * @ignore\n     */\n    this._terminate = this._terminate.bind(this);\n  }\n  /**\n   * Gets the plugin options\n   * @return {ProjextRollupNodeRunnerPluginOptions}\n   */\n  getOptions() {\n    return this._options;\n  }\n  /**\n   * This is called after Rollup finishes writing the files on the file system. It takes care of\n   * stopping the bundle execution, if it's already running, and starting it again.\n   */\n  onwrite() {\n    this._stopExecution();\n    this._startExecution();\n  }\n  /**\n   * Validate the plugin received options.\n   * @throws {Error} If a `file` wasn't defined.\n   * @access protected\n   * @ignore\n   */\n  _validateOptions() {\n    if (!this._options.file) {\n      throw new Error(`${this.name}: You need to specify the file to execute`);\n    }\n  }\n  /**\n   * Starts the execution of the bundle.\n   * @throws {Error} If the bundled file doesn't exist.\n   * @access protected\n   * @ignore\n   */\n  _startExecution() {\n    // Validate that the bundle exists.\n    if (!fs.pathExistsSync(this._options.file)) {\n      throw new Error(`${this.name}: The executable file doesn't exist`);\n    }\n    // Log an information message.\n    this._logger.success(`Starting bundle execution: ${this._options.file}`);\n    // Execute the bundle.\n    this._instance = fork(this._options.file);\n    // Start listening for termination events.\n    this._startListeningForTermination();\n    // Invoke the `onStart` callback.\n    this._options.onStart(this);\n  }\n  /**\n   * Stops the bundle execution.\n   * @param {boolean} [logMessage=true] Whether or not to log an information message, since this\n   *                                    is also called when the plugin receives a termination\n   *                                    message. The method should only log the message when the\n   *                                    instance is being restarted, not when the process is being\n   *                                    terminated.\n   * @access protected\n   * @ignore\n   */\n  _stopExecution(logMessage = true) {\n    // First make sure the instance is running.\n    if (this._instance) {\n      // Log the information message if needed.\n      if (logMessage) {\n        this._logger.info('Stopping bundle execution');\n      }\n      // Kill the instance.\n      this._instance.kill();\n      this._instance = null;\n      // Stop listening for termination events.\n      this._stopListeningForTermination();\n      // Invoke the `onStop` callback.\n      this._options.onStop(this);\n    }\n  }\n  /**\n   * This is called when the plugin receives a termination event. It stops the instance and exits\n   * the process.\n   * @access protected\n   * @ignore\n   */\n  _terminate() {\n    this._stopExecution(false);\n    process.exit();\n  }\n  /**\n   * This is called when the the bundle instance is created. It starts listening for termination\n   * events that require the instance to be stopped.\n   * @access protected\n   * @ignore\n   */\n  _startListeningForTermination() {\n    this._terminationEvents.forEach((eventName) => {\n      process.on(eventName, this._terminate);\n    });\n  }\n  /**\n   * This is called when the instance is stopped. It removes the listeners for termination events.\n   * @access protected\n   * @ignore\n   */\n  _stopListeningForTermination() {\n    this._terminationEvents.forEach((eventName) => {\n      process.removeListener(eventName, this._terminate);\n    });\n  }\n}\n/**\n * Shorthand method to create an instance of {@link ProjextRollupNodeRunnerPlugin}.\n * @param {ProjextRollupNodeRunnerPluginOptions} options\n * The options to customize the plugin behaviour.\n * @param {string} name\n * The name of the plugin's instance.\n * @return {ProjextRollupNodeRunnerPlugin}\n */\nconst nodeRunner = (options, name) => new ProjextRollupNodeRunnerPlugin(options, name);\n\nmodule.exports = {\n  ProjextRollupNodeRunnerPlugin,\n  nodeRunner,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/src/plugins/nodeRunner/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 164,
    "kind": "class",
    "name": "ProjextRollupNodeRunnerPlugin",
    "memberof": "src/plugins/nodeRunner/index.js",
    "static": true,
    "longname": "src/plugins/nodeRunner/index.js~ProjextRollupNodeRunnerPlugin",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/plugins/nodeRunner/index.js",
    "importStyle": "{ProjextRollupNodeRunnerPlugin}",
    "description": "This a Rollup plugin that takes care of executing the bundled Noded app after the build is\ngenerated.",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 165,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/plugins/nodeRunner/index.js~ProjextRollupNodeRunnerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/nodeRunner/index.js~ProjextRollupNodeRunnerPlugin#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProjextRollupNodeRunnerPluginOptions"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "The options to customize the plugin behaviour."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'projext-rollup-plugin-node-runner'",
        "defaultRaw": "'projext-rollup-plugin-node-runner'",
        "name": "name",
        "description": "The name of the plugin's instance."
      }
    ]
  },
  {
    "__docId__": 166,
    "kind": "member",
    "name": "_options",
    "memberof": "src/plugins/nodeRunner/index.js~ProjextRollupNodeRunnerPlugin",
    "static": false,
    "longname": "src/plugins/nodeRunner/index.js~ProjextRollupNodeRunnerPlugin#_options",
    "access": "protected",
    "description": "The plugin options.",
    "lineNumber": 23,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "ProjextRollupNodeRunnerPluginOptions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 167,
    "kind": "member",
    "name": "name",
    "memberof": "src/plugins/nodeRunner/index.js~ProjextRollupNodeRunnerPlugin",
    "static": false,
    "longname": "src/plugins/nodeRunner/index.js~ProjextRollupNodeRunnerPlugin#name",
    "access": "public",
    "description": "The name of the plugin's instance.",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "_logger",
    "memberof": "src/plugins/nodeRunner/index.js~ProjextRollupNodeRunnerPlugin",
    "static": false,
    "longname": "src/plugins/nodeRunner/index.js~ProjextRollupNodeRunnerPlugin#_logger",
    "access": "protected",
    "description": "Validate the options and either create or assign a {@link Logger} instance for the plugin.",
    "lineNumber": 46,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Logger"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "_instance",
    "memberof": "src/plugins/nodeRunner/index.js~ProjextRollupNodeRunnerPlugin",
    "static": false,
    "longname": "src/plugins/nodeRunner/index.js~ProjextRollupNodeRunnerPlugin#_instance",
    "access": "protected",
    "description": "This is the property that will eventually hold the execution instance.",
    "lineNumber": 53,
    "ignore": true,
    "type": {
      "nullable": true,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 170,
    "kind": "member",
    "name": "_terminationEvents",
    "memberof": "src/plugins/nodeRunner/index.js~ProjextRollupNodeRunnerPlugin",
    "static": false,
    "longname": "src/plugins/nodeRunner/index.js~ProjextRollupNodeRunnerPlugin#_terminationEvents",
    "access": "protected",
    "description": "The list of events that the plugin will listen for in order to stop the execution before\nexiting the process.",
    "lineNumber": 61,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "getOptions",
    "memberof": "src/plugins/nodeRunner/index.js~ProjextRollupNodeRunnerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/nodeRunner/index.js~ProjextRollupNodeRunnerPlugin#getOptions",
    "access": "public",
    "description": "Gets the plugin options",
    "lineNumber": 75,
    "return": {
      "nullable": null,
      "types": [
        "ProjextRollupNodeRunnerPluginOptions"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "onwrite",
    "memberof": "src/plugins/nodeRunner/index.js~ProjextRollupNodeRunnerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/nodeRunner/index.js~ProjextRollupNodeRunnerPlugin#onwrite",
    "access": "public",
    "description": "This is called after Rollup finishes writing the files on the file system. It takes care of\nstopping the bundle execution, if it's already running, and starting it again.",
    "lineNumber": 82,
    "params": [],
    "return": null
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "_validateOptions",
    "memberof": "src/plugins/nodeRunner/index.js~ProjextRollupNodeRunnerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/nodeRunner/index.js~ProjextRollupNodeRunnerPlugin#_validateOptions",
    "access": "protected",
    "description": "Validate the plugin received options.",
    "lineNumber": 92,
    "ignore": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If a `file` wasn't defined."
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "_startExecution",
    "memberof": "src/plugins/nodeRunner/index.js~ProjextRollupNodeRunnerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/nodeRunner/index.js~ProjextRollupNodeRunnerPlugin#_startExecution",
    "access": "protected",
    "description": "Starts the execution of the bundle.",
    "lineNumber": 103,
    "ignore": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If the bundled file doesn't exist."
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "_stopExecution",
    "memberof": "src/plugins/nodeRunner/index.js~ProjextRollupNodeRunnerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/nodeRunner/index.js~ProjextRollupNodeRunnerPlugin#_stopExecution",
    "access": "protected",
    "description": "Stops the bundle execution.",
    "lineNumber": 127,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "logMessage",
        "description": "Whether or not to log an information message, since this\n                                   is also called when the plugin receives a termination\n                                   message. The method should only log the message when the\n                                   instance is being restarted, not when the process is being\n                                   terminated."
      }
    ],
    "return": null
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "_terminate",
    "memberof": "src/plugins/nodeRunner/index.js~ProjextRollupNodeRunnerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/nodeRunner/index.js~ProjextRollupNodeRunnerPlugin#_terminate",
    "access": "protected",
    "description": "This is called when the plugin receives a termination event. It stops the instance and exits\nthe process.",
    "lineNumber": 149,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "_startListeningForTermination",
    "memberof": "src/plugins/nodeRunner/index.js~ProjextRollupNodeRunnerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/nodeRunner/index.js~ProjextRollupNodeRunnerPlugin#_startListeningForTermination",
    "access": "protected",
    "description": "This is called when the the bundle instance is created. It starts listening for termination\nevents that require the instance to be stopped.",
    "lineNumber": 159,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "_stopListeningForTermination",
    "memberof": "src/plugins/nodeRunner/index.js~ProjextRollupNodeRunnerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/nodeRunner/index.js~ProjextRollupNodeRunnerPlugin#_stopListeningForTermination",
    "access": "protected",
    "description": "This is called when the instance is stopped. It removes the listeners for termination events.",
    "lineNumber": 169,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 183,
    "kind": "function",
    "name": "nodeRunner",
    "memberof": "src/plugins/nodeRunner/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugins/nodeRunner/index.js~nodeRunner",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/plugins/nodeRunner/index.js",
    "importStyle": "{nodeRunner}",
    "description": "Shorthand method to create an instance of {@link ProjextRollupNodeRunnerPlugin}.",
    "lineNumber": 183,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProjextRollupNodeRunnerPluginOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to customize the plugin behaviour."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the plugin's instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ProjextRollupNodeRunnerPlugin"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 184,
    "kind": "file",
    "name": "src/plugins/stats/index.js",
    "content": "const extend = require('extend');\nconst fs = require('fs-extra');\nconst prettysize = require('prettysize');\nconst colors = require('colors/safe');\nconst { Logger } = require('wootils/node/logger');\n/**\n * This is a Rollup plugin that shows stats on the files generated and/or copied. The way this\n * plugin works is kind of different: Once instantiated, it has an `add` metho for registering\n * stats entries and that can be sent to other plugins; and at the same time, it has a `log` method\n * that you would add as a plugin and it would show the entries.\n *\n * @example\n * const stats = new ProjextRollupStatsPlugin();\n * stats.add(...);\n * stats.add(...);\n * ...\n * module.exports = {\n *   plugins: [\n *     commonjs(),\n *     resolve(),\n *     ...,\n *     stats.log(),\n *   ],\n * };\n */\nclass ProjextRollupStatsPlugin {\n  /**\n   * @param {ProjextRollupStatsPluginOptions} [options={}]\n   * The options to customize the plugin behaviour.\n   * @param {string} [name='projext-rollup-plugin-node-stats']\n   * The name of the plugin's instance.\n   */\n  constructor(options = {}, name = 'projext-rollup-plugin-stats') {\n    /**\n     * The plugin options.\n     * @type {ProjextRollupStatsPluginOptions}\n     * @access protected\n     * @ignore\n     */\n    this._options = extend(\n      true,\n      {\n        path: '',\n      },\n      options\n    );\n    /**\n     * The name of the plugin's instance.\n     * @type {string}\n     */\n    this.name = name;\n    /**\n     * The list of entries added to the plugin's instance.\n     * @type {Array}\n     * @access protected\n     * @ignore\n     */\n    this._entries = [];\n    /**\n     * The dictionary with the headers of the report table the plugin will show when it logs\n     * the entries.\n     * @type {Object}\n     * @access protected\n     * @ignore\n     */\n    this._reportHeaders = {\n      file: 'Asset',\n      size: 'Size',\n      plugin: 'Plugin',\n    };\n    /**\n     * A custom {@link Logger} to log the report table. It can be set on the options of the `log`\n     * method.\n     * @type {?Logger}\n     * @access protected\n     * @ignore\n     */\n    this._logger = null;\n    /**\n     * @ignore\n     */\n    this.add = this.add.bind(this);\n  }\n  /**\n   * Gets the plugin options\n   * @return {ProjextRollupStatsPluginOptions}\n   */\n  getOptions() {\n    return this._options;\n  }\n  /**\n   * Generates a _\"sub plugin\"_ to add to the plugins queue and that will reset the entries list.\n   * The reason this exists is because when Rollup is on _\"watch mode\"_, the plugins can run more\n   * than once, and if the queue is not reseted, the report table will show the entries for ALL\n   * the times the plugin ran.\n   * @return {ProjextRollupStatsPluginReset}\n   */\n  reset() {\n    return {\n      intro: () => {\n        this._entries = [];\n      },\n    };\n  }\n  /**\n   * Generates a _\"sub plugin\"_ to add to the plugins queue and that will take care of logging\n   * all the added entries on a report table.\n   * @param {ProjextRollupStatsPluginLogOptions} [options={}] Custom options for the _\"sub plugin\"_.\n   * @return {ProjextRollupStatsPluginLog}\n   */\n  log(options = {}) {\n    // Merge the default and custom options.\n    const newOptions = extend(\n      true,\n      {\n        extraEntries: [],\n        logger: null,\n      },\n      options\n    );\n    // Validate the logger.\n    const logger = this._validateLogger(newOptions.logger);\n    // If there was a valid logger, assign it to the local property and remove it form the options.\n    if (logger) {\n      this._logger = logger;\n      delete newOptions.logger;\n    }\n    // Return the _\"sub plugin\"_.\n    return {\n      onwrite: () => {\n        /**\n         * Add any extra entry specified on the options. The reason they're being added here\n         * instead of the parent scope it's because the `reset` _\"sub plugin\"_ may remove them\n         * if they are added out of the plugins cycle.\n         */\n        newOptions.extraEntries.forEach((entry) => {\n          this.add(entry.plugin, entry.filepath);\n        });\n        // Log the report table.\n        return this._logStats();\n      },\n    };\n  }\n  /**\n   * Adds a new stats entry.\n   * @param {string|Promise} plugin       This can be either the name of the plugin generating the\n   *                                      entry, or, if the spot should be saved but the actual\n   *                                      entry is involved on an async task, a promise the plugin\n   *                                      will wait for. The promise should be resolved with an\n   *                                      object with the keys `plugin` and `filepath`.\n   * @param {?string}        [filepath]   The path for the file that was generatedcopied. This is\n   *                                      not required if `plugin` is a promise.\n   * @param {?number}        [index=null] If this value is specified, instead of adding the entry\n   *                                      to the list, it will be set at the given index. This is\n   *                                      used internally by the plugin after resolving promise\n   *                                      based entries, instead of adding the resolved value, the\n   *                                      plugin replaces the entry that had the promise with the\n   *                                      resolved information.\n   */\n  add(plugin, filepath, index = null) {\n    // Build the entry object after validating if `plugin` is a promise.\n    const entry = this._isPromise(plugin) ? plugin : {\n      plugin,\n      filepath,\n    };\n    // If index was defined...\n    if (typeof index === 'number') {\n      // Replace the entry at the given index.\n      this._entries[index] = entry;\n    } else {\n      // Push the entry at the end of the list.\n      this._entries.push(entry);\n    }\n  }\n  /**\n   * Validates if an object can be used as a logger. The object is only allowed if it's an instance\n   * of {@link Logger} or it has a `log` method.\n   * @param {Logger|Object} logger The logger to validate.\n   * @return {Logger|Object}\n   * @throws {Error} If the object is not an instance of {@link Logger} and it doesn't have a `log`\n   *                 method.\n   * @access protected\n   * @ignore\n   */\n  _validateLogger(logger) {\n    let result = null;\n    /**\n     * If `logger` is _\"truthy\"_ and it's either an instance of {@link Logger} or has a `log`\n     * method...\n     */\n    if (\n      logger &&\n      (\n        logger instanceof Logger ||\n        typeof logger.log === 'function'\n      )\n    ) {\n      // ...set it to be returned as a valid logger.\n      result = logger;\n    } else if (logger) {\n      // ...but if there's a `logger` but it doesn't have a valid interface, throw an error.\n      throw new Error(`${this.name}: The logger must be an instance of wootils' Logger class`);\n    }\n\n    return result;\n  }\n  /**\n   * This is the method in charge of logging the report table.\n   * @return {Promise<undefined,Error>}\n   * @access protected\n   * @ignore\n   */\n  _logStats() {\n    // Resolve any pending entry.\n    return this._resolveEntries()\n    .then(() => {\n      // Sort the entries list.\n      let newEntries = this._sortEntries(this._entries);\n      // Normalize the entries paths and obtain the files size.\n      newEntries = this._formatEntries(newEntries);\n      // Generate the report table.\n      const stats = this._generateStats(newEntries);\n      // If a valid `logger` was sent, use it to log the table, otherwise use the `console`.\n      if (this._logger) {\n        this._logger.log(stats);\n      } else {\n        // eslint-disable-next-line no-console\n        console.log(stats);\n      }\n    });\n  }\n  /**\n   * Resolves any pending entries that were added as promises.\n   * @return {Promise<undefined,Error>}\n   * @access protected\n   * @ignore\n   */\n  _resolveEntries() {\n    const promises = [];\n    // Loop all the entries and pick the promises and their indexes.\n    this._entries.forEach((entry, index) => {\n      if (this._isPromise(entry)) {\n        promises.push({\n          entry,\n          index,\n        });\n      }\n    });\n    // Define the variable to return.\n    let result;\n    // If there are promises to solve...\n    if (promises.length) {\n      // ...set to return a `Promise.all` of all of them.\n      result = Promise.all(promises.map((entryInfo) => this._resolveEntry(entryInfo)));\n    } else {\n      // ...otherwise, return an already resolved promise.\n      result = Promise.resolve();\n    }\n\n    return result;\n  }\n  /**\n   * Resolves a single promise based entry.\n   * @param {Object}                entryInfo       The information of the entry to be resolved.\n   * @param {Promise<Object,Error>} entryInfo.entry The promise to resolve.\n   * @return {Promise<undefined,Error>}\n   * @access protected\n   * @ignore\n   */\n  _resolveEntry(entryInfo) {\n    // Wait for the promise to be resolved.\n    return entryInfo\n    .entry\n    .then((newEntry) => {\n      // Replace the entry with the obtained information.\n      this.add(newEntry.plugin, newEntry.filepath, entryInfo.index);\n    });\n  }\n  /**\n   * Checks whether an object is a promise or not. It should be of type `Object` and have a `then`\n   * method.\n   * @param {*} obj The object to validate.\n   * @return {boolean}\n   * @access protected\n   * @ignore\n   */\n  _isPromise(obj) {\n    return typeof obj === 'object' && obj.then && typeof obj.then === 'function';\n  }\n  /**\n   * Sorts an entries list.\n   * @param {Array} entries The entries list.\n   * @return {Array}\n   * @access protected\n   * @ignore\n   */\n  _sortEntries(entries) {\n    const entriesByFile = {};\n    /**\n     * Loop all the entries, put them on a dictionary using the file path as key, and build a\n     * list of file paths.\n     */\n    return entries.map((entry) => {\n      entriesByFile[entry.filepath] = entry;\n      return entry.filepath;\n    })\n    // Sort the list of file paths.\n    .sort()\n    /**\n     * Build a new array by looping the sorted entries and retrieving the information from\n     * the dictionary.\n     */\n    .map((filepath) => entriesByFile[filepath]);\n  }\n  /**\n   * Formats a list of entries by normalizing their paths, obtaining their size and making it\n   * human readable.\n   * @param {Array} entries The list of entries.\n   * @return {Array}\n   * @access protected\n   * @ignore\n   */\n  _formatEntries(entries) {\n    // Loop all the entries.\n    return entries\n    // Filter all entries which files don't exist.\n    .filter((entry) => fs.pathExistsSync(entry.filepath))\n    // Loop all the filtered entries.\n    .map((entry) => {\n      const { plugin, filepath } = entry;\n      // Normalize the file path.\n      const file = this._resolveFilepath(filepath);\n      // Normalize the file size.\n      const size = this._getPrettyFilesize(filepath);\n      // Return an object with the new information.\n      return {\n        plugin,\n        file,\n        size,\n      };\n    });\n  }\n  /**\n   * Removes the plugin's `path` option from a filepath that starts with it.\n   * @param {string} filepath The file path to _\"normalize\"_.\n   * @return {string}\n   * @access protected\n   * @ignore\n   */\n  _resolveFilepath(filepath) {\n    return filepath.startsWith(this._options.path) ?\n      filepath.substr(this._options.path.length) :\n      filepath;\n  }\n  /**\n   * Gets and formats a file size.\n   * @param {string} filepath The path to the file.\n   * @return {string}\n   * @access protected\n   * @ignore\n   */\n  _getPrettyFilesize(filepath) {\n    return prettysize(fs.lstatSync(filepath).size)\n    .replace(/ Bytes$/g, ' B');\n  }\n  /**\n   * Generates the report table to log the entries.\n   * @param {Array} entries The list of entries.\n   * @return {string}\n   * @access protected\n   * @ignore\n   */\n  _generateStats(entries) {\n    // Get the widths for each cell.\n    const cellsWidth = this._getCellsWidth(entries);\n    // Define the spacing between columns.\n    const howMuchSpaceBetweenColumns = 2;\n    // Generate the string for the spacing between columns.\n    const spacer = this._addSpaces(howMuchSpaceBetweenColumns);\n\n    // Define the _\"Headers line\"_.\n    const header = [\n      '',\n      colors.white(this._addSpaces(cellsWidth.file, this._reportHeaders.file, false)),\n      colors.white(this._addSpaces(cellsWidth.size, this._reportHeaders.size)),\n      colors.white(this._addSpaces(cellsWidth.plugin, this._reportHeaders.plugin)),\n    ]\n    .join(spacer);\n    /**\n     * Define the variable that will hold the file that was generated by Rollup itself. The reason\n     * it's saved on a string it's because if while looping all the entries, a file that starts\n     * with the same string as this file is found, it will also be highlighted, as it may be\n     * a variation of the main file (`gz` or `map`).\n     */\n    let rollupFile = ' ';\n    // Build the lines for each entry.\n    const entryLines = entries.map((entry) => {\n      // Define the cell for the file path.\n      let file = this._addSpaces(cellsWidth.file, entry.file, false);\n      // Define the cell for the file size.\n      let size = this._addSpaces(cellsWidth.size, entry.size);\n      // Define the cell for the plugin's name.\n      let plugin = this._addSpaces(cellsWidth.plugin, entry.plugin);\n\n      // Validate if the entry was generated by Rollup itself.\n      const isRollupFile = entry.plugin === 'rollup';\n      // If the entry was generated by Rollup, save the filepath.\n      if (isRollupFile) {\n        rollupFile = entry.file;\n      }\n      /**\n       * If the file was generated by Rollup or it's a variation of it (starts with the\n       * same path)...\n       */\n      if (isRollupFile || entry.file.startsWith(rollupFile)) {\n        // ...highlight the cells.\n        file = colors.cyan(file);\n        size = colors.cyan(size);\n        plugin = colors.cyan(plugin);\n      } else {\n        // ...otherwise, add some regular colors to the cells.\n        file = colors.green(file);\n        size = colors.white(size);\n        plugin = colors.gray(plugin);\n      }\n      // Return the line.\n      return `${spacer}${file}${spacer}${size}${spacer}${plugin}`;\n    });\n    // Define all the report lines.\n    const lines = [\n      '',\n      header,\n      ...entryLines,\n      '',\n    ];\n    // Return the lines joined on a single string.\n    return lines.join('\\n');\n  }\n  /**\n   * Calculates the width of the report table cells by finding each property longest value.\n   * @param {Array} entries The entries list.\n   * @return {ProjextRollupStatsPluginCellsWidth}\n   * @access protected\n   * @ignore\n   */\n  _getCellsWidth(entries) {\n    // Define the initial values.\n    let longestPlugin = 0;\n    let longestFile = 0;\n    let longestSize = 0;\n\n    // Loop all the entries and the headers.\n    [\n      ...entries,\n      this._reportHeaders,\n    ]\n    .forEach((entry) => {\n      // Validate the longest plugin name.\n      if (entry.plugin.length > longestPlugin) {\n        longestPlugin = entry.plugin.length;\n      }\n\n      // Validate the longest file path.\n      if (entry.file.length > longestFile) {\n        longestFile = entry.file.length;\n      }\n\n      // Validate the longest file size.\n      if (entry.size.length > longestSize) {\n        longestSize = entry.size.length;\n      }\n    });\n    // Return the width for each cell type.\n    return {\n      plugin: longestPlugin,\n      file: longestFile,\n      size: longestSize,\n    };\n  }\n  /**\n   * Prefix or sufix an string with a number of spaces.\n   * @param {number}  length       How many spaces should be added.\n   * @param {string}  [str='']     The string to prefix or sufix.\n   * @param {boolean} [after=true] Whether the spaces should be after or before the string.\n   * @return {string}\n   * @access protected\n   * @ignore\n   */\n  _addSpaces(length, str = '', after = true) {\n    const spaces = (new Array(length - str.length)).fill(' ').join('');\n    return after ? `${str}${spaces}` : `${spaces}${str}`;\n  }\n}\n/**\n * Shorthand method to create an instance of {@link ProjextRollupStatsPlugin}.\n * @param {ProjextRollupStatsPluginOptions} options\n * The options to customize the plugin behaviour.\n * @param {string} name\n * The name of the plugin's instance.\n * @return {ProjextRollupStatsPlugin}\n */\nconst stats = (options, name) => new ProjextRollupStatsPlugin(options, name);\n\nmodule.exports = {\n  ProjextRollupStatsPlugin,\n  stats,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/src/plugins/stats/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 185,
    "kind": "class",
    "name": "ProjextRollupStatsPlugin",
    "memberof": "src/plugins/stats/index.js",
    "static": true,
    "longname": "src/plugins/stats/index.js~ProjextRollupStatsPlugin",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/plugins/stats/index.js",
    "importStyle": "{ProjextRollupStatsPlugin}",
    "description": "This is a Rollup plugin that shows stats on the files generated and/or copied. The way this\nplugin works is kind of different: Once instantiated, it has an `add` metho for registering\nstats entries and that can be sent to other plugins; and at the same time, it has a `log` method\nthat you would add as a plugin and it would show the entries.",
    "examples": [
      "const stats = new ProjextRollupStatsPlugin();\nstats.add(...);\nstats.add(...);\n...\nexport { *   plugins: [\n    commonjs(),\n    resolve(),\n    ...,\n    stats.log(),\n  ],\n};"
    ],
    "lineNumber": 25,
    "interface": false
  },
  {
    "__docId__": 186,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/plugins/stats/index.js~ProjextRollupStatsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stats/index.js~ProjextRollupStatsPlugin#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProjextRollupStatsPluginOptions"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "The options to customize the plugin behaviour."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'projext-rollup-plugin-node-stats'",
        "defaultRaw": "'projext-rollup-plugin-node-stats'",
        "name": "name",
        "description": "The name of the plugin's instance."
      }
    ]
  },
  {
    "__docId__": 187,
    "kind": "member",
    "name": "_options",
    "memberof": "src/plugins/stats/index.js~ProjextRollupStatsPlugin",
    "static": false,
    "longname": "src/plugins/stats/index.js~ProjextRollupStatsPlugin#_options",
    "access": "protected",
    "description": "The plugin options.",
    "lineNumber": 39,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "ProjextRollupStatsPluginOptions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 188,
    "kind": "member",
    "name": "name",
    "memberof": "src/plugins/stats/index.js~ProjextRollupStatsPlugin",
    "static": false,
    "longname": "src/plugins/stats/index.js~ProjextRollupStatsPlugin#name",
    "access": "public",
    "description": "The name of the plugin's instance.",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 189,
    "kind": "member",
    "name": "_entries",
    "memberof": "src/plugins/stats/index.js~ProjextRollupStatsPlugin",
    "static": false,
    "longname": "src/plugins/stats/index.js~ProjextRollupStatsPlugin#_entries",
    "access": "protected",
    "description": "The list of entries added to the plugin's instance.",
    "lineNumber": 57,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 190,
    "kind": "member",
    "name": "_reportHeaders",
    "memberof": "src/plugins/stats/index.js~ProjextRollupStatsPlugin",
    "static": false,
    "longname": "src/plugins/stats/index.js~ProjextRollupStatsPlugin#_reportHeaders",
    "access": "protected",
    "description": "The dictionary with the headers of the report table the plugin will show when it logs\nthe entries.",
    "lineNumber": 65,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 191,
    "kind": "member",
    "name": "_logger",
    "memberof": "src/plugins/stats/index.js~ProjextRollupStatsPlugin",
    "static": false,
    "longname": "src/plugins/stats/index.js~ProjextRollupStatsPlugin#_logger",
    "access": "protected",
    "description": "A custom {@link Logger} to log the report table. It can be set on the options of the `log`\nmethod.",
    "lineNumber": 77,
    "ignore": true,
    "type": {
      "nullable": true,
      "types": [
        "Logger"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "getOptions",
    "memberof": "src/plugins/stats/index.js~ProjextRollupStatsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stats/index.js~ProjextRollupStatsPlugin#getOptions",
    "access": "public",
    "description": "Gets the plugin options",
    "lineNumber": 87,
    "return": {
      "nullable": null,
      "types": [
        "ProjextRollupStatsPluginOptions"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "reset",
    "memberof": "src/plugins/stats/index.js~ProjextRollupStatsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stats/index.js~ProjextRollupStatsPlugin#reset",
    "access": "public",
    "description": "Generates a _\"sub plugin\"_ to add to the plugins queue and that will reset the entries list.\nThe reason this exists is because when Rollup is on _\"watch mode\"_, the plugins can run more\nthan once, and if the queue is not reseted, the report table will show the entries for ALL\nthe times the plugin ran.",
    "lineNumber": 97,
    "return": {
      "nullable": null,
      "types": [
        "ProjextRollupStatsPluginReset"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "log",
    "memberof": "src/plugins/stats/index.js~ProjextRollupStatsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stats/index.js~ProjextRollupStatsPlugin#log",
    "access": "public",
    "description": "Generates a _\"sub plugin\"_ to add to the plugins queue and that will take care of logging\nall the added entries on a report table.",
    "lineNumber": 110,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProjextRollupStatsPluginLogOptions"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "Custom options for the _\"sub plugin\"_."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ProjextRollupStatsPluginLog"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "add",
    "memberof": "src/plugins/stats/index.js~ProjextRollupStatsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stats/index.js~ProjextRollupStatsPlugin#add",
    "access": "public",
    "description": "Adds a new stats entry.",
    "lineNumber": 159,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Promise"
        ],
        "spread": false,
        "optional": false,
        "name": "plugin",
        "description": "This can be either the name of the plugin generating the\n                                     entry, or, if the spot should be saved but the actual\n                                     entry is involved on an async task, a promise the plugin\n                                     will wait for. The promise should be resolved with an\n                                     object with the keys `plugin` and `filepath`."
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "filepath",
        "description": "The path for the file that was generatedcopied. This is\n                                     not required if `plugin` is a promise."
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "index",
        "description": "If this value is specified, instead of adding the entry\n                                     to the list, it will be set at the given index. This is\n                                     used internally by the plugin after resolving promise\n                                     based entries, instead of adding the resolved value, the\n                                     plugin replaces the entry that had the promise with the\n                                     resolved information."
      }
    ],
    "return": null
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "_validateLogger",
    "memberof": "src/plugins/stats/index.js~ProjextRollupStatsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stats/index.js~ProjextRollupStatsPlugin#_validateLogger",
    "access": "protected",
    "description": "Validates if an object can be used as a logger. The object is only allowed if it's an instance\nof {@link Logger} or it has a `log` method.",
    "lineNumber": 184,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Logger",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "logger",
        "description": "The logger to validate."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Logger",
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If the object is not an instance of {@link Logger} and it doesn't have a `log`\n                method."
      }
    ]
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "_logStats",
    "memberof": "src/plugins/stats/index.js~ProjextRollupStatsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stats/index.js~ProjextRollupStatsPlugin#_logStats",
    "access": "protected",
    "description": "This is the method in charge of logging the report table.",
    "lineNumber": 212,
    "ignore": true,
    "return": {
      "nullable": null,
      "types": [
        "Promise<undefined,Error>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "_resolveEntries",
    "memberof": "src/plugins/stats/index.js~ProjextRollupStatsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stats/index.js~ProjextRollupStatsPlugin#_resolveEntries",
    "access": "protected",
    "description": "Resolves any pending entries that were added as promises.",
    "lineNumber": 237,
    "ignore": true,
    "return": {
      "nullable": null,
      "types": [
        "Promise<undefined,Error>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "_resolveEntry",
    "memberof": "src/plugins/stats/index.js~ProjextRollupStatsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stats/index.js~ProjextRollupStatsPlugin#_resolveEntry",
    "access": "protected",
    "description": "Resolves a single promise based entry.",
    "lineNumber": 269,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "entryInfo",
        "description": "The information of the entry to be resolved."
      },
      {
        "nullable": null,
        "types": [
          "Promise<Object,Error>"
        ],
        "spread": false,
        "optional": false,
        "name": "entryInfo.entry",
        "description": "The promise to resolve."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<undefined,Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "_isPromise",
    "memberof": "src/plugins/stats/index.js~ProjextRollupStatsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stats/index.js~ProjextRollupStatsPlugin#_isPromise",
    "access": "protected",
    "description": "Checks whether an object is a promise or not. It should be of type `Object` and have a `then`\nmethod.",
    "lineNumber": 286,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The object to validate."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "_sortEntries",
    "memberof": "src/plugins/stats/index.js~ProjextRollupStatsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stats/index.js~ProjextRollupStatsPlugin#_sortEntries",
    "access": "protected",
    "description": "Sorts an entries list.",
    "lineNumber": 296,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "entries",
        "description": "The entries list."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "_formatEntries",
    "memberof": "src/plugins/stats/index.js~ProjextRollupStatsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stats/index.js~ProjextRollupStatsPlugin#_formatEntries",
    "access": "protected",
    "description": "Formats a list of entries by normalizing their paths, obtaining their size and making it\nhuman readable.",
    "lineNumber": 322,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "entries",
        "description": "The list of entries."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "_resolveFilepath",
    "memberof": "src/plugins/stats/index.js~ProjextRollupStatsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stats/index.js~ProjextRollupStatsPlugin#_resolveFilepath",
    "access": "protected",
    "description": "Removes the plugin's `path` option from a filepath that starts with it.",
    "lineNumber": 349,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "The file path to _\"normalize\"_."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "_getPrettyFilesize",
    "memberof": "src/plugins/stats/index.js~ProjextRollupStatsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stats/index.js~ProjextRollupStatsPlugin#_getPrettyFilesize",
    "access": "protected",
    "description": "Gets and formats a file size.",
    "lineNumber": 361,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "The path to the file."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "_generateStats",
    "memberof": "src/plugins/stats/index.js~ProjextRollupStatsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stats/index.js~ProjextRollupStatsPlugin#_generateStats",
    "access": "protected",
    "description": "Generates the report table to log the entries.",
    "lineNumber": 372,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "entries",
        "description": "The list of entries."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "_getCellsWidth",
    "memberof": "src/plugins/stats/index.js~ProjextRollupStatsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stats/index.js~ProjextRollupStatsPlugin#_getCellsWidth",
    "access": "protected",
    "description": "Calculates the width of the report table cells by finding each property longest value.",
    "lineNumber": 445,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "entries",
        "description": "The entries list."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ProjextRollupStatsPluginCellsWidth"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "_addSpaces",
    "memberof": "src/plugins/stats/index.js~ProjextRollupStatsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stats/index.js~ProjextRollupStatsPlugin#_addSpaces",
    "access": "protected",
    "description": "Prefix or sufix an string with a number of spaces.",
    "lineNumber": 488,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": "How many spaces should be added."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "str",
        "description": "The string to prefix or sufix."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "after",
        "description": "Whether the spaces should be after or before the string."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 211,
    "kind": "function",
    "name": "stats",
    "memberof": "src/plugins/stats/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugins/stats/index.js~stats",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/plugins/stats/index.js",
    "importStyle": "{stats}",
    "description": "Shorthand method to create an instance of {@link ProjextRollupStatsPlugin}.",
    "lineNumber": 501,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProjextRollupStatsPluginOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to customize the plugin behaviour."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the plugin's instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ProjextRollupStatsPlugin"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 212,
    "kind": "file",
    "name": "src/plugins/stylesheetAssets/helper.js",
    "content": "const rollupUtils = require('rollup-pluginutils');\nconst extend = require('extend');\nconst helperFn = require('./helperFn');\n/**\n * This is Rollup helper plugin for {@link ProjextRollupStylesheetAssetsPlugin} that wraps CSS\n * code being exported by ES modules so it can be found and fixed.\n */\nclass ProjextRollupStylesheetAssetsHelperPlugin {\n  /**\n   * @param {ProjextRollupStylesheetAssetsHelperPluginOptions} [options={}]\n   * The options to customize the plugin behaviour.\n   * @param {string} [name='projext-rollup-plugin-stylesheet-assets-helper']\n   * The name of the plugin's instance.\n   */\n  constructor(options = {}, name = 'projext-rollup-plugin-stylesheet-assets-helper') {\n    /**\n     * The plugin options.\n     * @type {ProjextRollupStylesheetAssetsHelperPluginOptions}\n     * @access protected\n     * @ignore\n     */\n    this._options = extend(\n      true,\n      {\n        include: options.include || [/\\.(s?css|sass)$/i],\n        exclude: [],\n        fnName: '___$styleHelper',\n      },\n      options\n    );\n    /**\n     * The name of the plugin's instance.\n     * @type {string}\n     */\n    this.name = name;\n    /**\n     * The filter to decide which files will be processed and which won't.\n     * @type {RollupFilter}\n     */\n    this.filter = rollupUtils.createFilter(\n      this._options.include,\n      this._options.exclude\n    );\n    /**\n     * A dictionary of common expressions the plugin uses while parsing files.\n     * @type {Object}\n     * @property {RegExp} code Finds export statements.\n     * @access protected\n     * @ignore\n     */\n    this._expressions = {\n      code: /^(?:export\\s*default|module\\.exports\\s*=\\s*)(.*?);$/ig,\n    };\n    /**\n     * @ignore\n     */\n    this.intro = this.intro.bind(this);\n    /**\n     * @ignore\n     */\n    this.transform = this.transform.bind(this);\n  }\n  /**\n   * Gets the plugin options\n   * @return {ProjextRollupStylesheetAssetsHelperPluginOptions}\n   */\n  getOptions() {\n    return this._options;\n  }\n  /**\n   * This gets called when Rollup starts the bundling process. It returns the code for the\n   * function that will wrap the CSS styles.\n   * @return {string}\n   */\n  intro() {\n    return helperFn.toString().replace(helperFn.name, this._options.fnName);\n  }\n  /**\n   * This is called by Rollup when is parsing a file.\n   * @param {string} code     The file contents.\n   * @param {string} filepath The file path.\n   * @return {?RollupFileDefinition} If the file matches the plugin filter, it will parse it and\n   *                                 return a new definition, otherwise it will just return `null`.\n   */\n  transform(code, filepath) {\n    // Define the variable to return.\n    let result = null;\n    // Make sure the file matches the filter and that it has an export statement.\n    if (this.filter(filepath) && code.match(this._expressions.code)) {\n      // Get the export statements.\n      const styles = [];\n      let match = this._expressions.code.exec(code);\n      while (match) {\n        const [, style] = match;\n        styles.push(style.trim());\n        match = this._expressions.code.exec(code);\n      }\n      // Get the first export statement (usually there's only one).\n      const [style] = styles;\n      // Update the file definition.\n      result = {\n        code: `export default ${this._options.fnName}(${style});`,\n        map: {\n          mappings: '',\n        },\n      };\n    }\n\n    return result;\n  }\n}\n/**\n * Shorthand method to create an instance of {@link ProjextRollupStylesheetAssetsHelperPlugin}.\n * @param {ProjextRollupStylesheetAssetsHelperPluginOptions} options\n * The options to customize the plugin behaviour.\n * @param {string} name\n * The name of the plugin's instance.\n * @return {ProjextRollupStylesheetAssetsHelperPlugin}\n */\nconst stylesheetAssetsHelper = (\n  options,\n  name\n) => new ProjextRollupStylesheetAssetsHelperPlugin(options, name);\n\nmodule.exports = {\n  ProjextRollupStylesheetAssetsHelperPlugin,\n  stylesheetAssetsHelper,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/src/plugins/stylesheetAssets/helper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 213,
    "kind": "class",
    "name": "ProjextRollupStylesheetAssetsHelperPlugin",
    "memberof": "src/plugins/stylesheetAssets/helper.js",
    "static": true,
    "longname": "src/plugins/stylesheetAssets/helper.js~ProjextRollupStylesheetAssetsHelperPlugin",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/plugins/stylesheetAssets/helper.js",
    "importStyle": "{ProjextRollupStylesheetAssetsHelperPlugin}",
    "description": "This is Rollup helper plugin for {@link ProjextRollupStylesheetAssetsPlugin} that wraps CSS\ncode being exported by ES modules so it can be found and fixed.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 214,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/plugins/stylesheetAssets/helper.js~ProjextRollupStylesheetAssetsHelperPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stylesheetAssets/helper.js~ProjextRollupStylesheetAssetsHelperPlugin#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProjextRollupStylesheetAssetsHelperPluginOptions"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "The options to customize the plugin behaviour."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'projext-rollup-plugin-stylesheet-assets-helper'",
        "defaultRaw": "'projext-rollup-plugin-stylesheet-assets-helper'",
        "name": "name",
        "description": "The name of the plugin's instance."
      }
    ]
  },
  {
    "__docId__": 215,
    "kind": "member",
    "name": "_options",
    "memberof": "src/plugins/stylesheetAssets/helper.js~ProjextRollupStylesheetAssetsHelperPlugin",
    "static": false,
    "longname": "src/plugins/stylesheetAssets/helper.js~ProjextRollupStylesheetAssetsHelperPlugin#_options",
    "access": "protected",
    "description": "The plugin options.",
    "lineNumber": 22,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "ProjextRollupStylesheetAssetsHelperPluginOptions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 216,
    "kind": "member",
    "name": "name",
    "memberof": "src/plugins/stylesheetAssets/helper.js~ProjextRollupStylesheetAssetsHelperPlugin",
    "static": false,
    "longname": "src/plugins/stylesheetAssets/helper.js~ProjextRollupStylesheetAssetsHelperPlugin#name",
    "access": "public",
    "description": "The name of the plugin's instance.",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 217,
    "kind": "member",
    "name": "filter",
    "memberof": "src/plugins/stylesheetAssets/helper.js~ProjextRollupStylesheetAssetsHelperPlugin",
    "static": false,
    "longname": "src/plugins/stylesheetAssets/helper.js~ProjextRollupStylesheetAssetsHelperPlugin#filter",
    "access": "public",
    "description": "The filter to decide which files will be processed and which won't.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "RollupFilter"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 218,
    "kind": "member",
    "name": "_expressions",
    "memberof": "src/plugins/stylesheetAssets/helper.js~ProjextRollupStylesheetAssetsHelperPlugin",
    "static": false,
    "longname": "src/plugins/stylesheetAssets/helper.js~ProjextRollupStylesheetAssetsHelperPlugin#_expressions",
    "access": "protected",
    "description": "A dictionary of common expressions the plugin uses while parsing files.",
    "lineNumber": 51,
    "ignore": true,
    "properties": [
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "Finds export statements."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "getOptions",
    "memberof": "src/plugins/stylesheetAssets/helper.js~ProjextRollupStylesheetAssetsHelperPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stylesheetAssets/helper.js~ProjextRollupStylesheetAssetsHelperPlugin#getOptions",
    "access": "public",
    "description": "Gets the plugin options",
    "lineNumber": 67,
    "return": {
      "nullable": null,
      "types": [
        "ProjextRollupStylesheetAssetsHelperPluginOptions"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "intro",
    "memberof": "src/plugins/stylesheetAssets/helper.js~ProjextRollupStylesheetAssetsHelperPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stylesheetAssets/helper.js~ProjextRollupStylesheetAssetsHelperPlugin#intro",
    "access": "public",
    "description": "This gets called when Rollup starts the bundling process. It returns the code for the\nfunction that will wrap the CSS styles.",
    "lineNumber": 75,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "transform",
    "memberof": "src/plugins/stylesheetAssets/helper.js~ProjextRollupStylesheetAssetsHelperPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stylesheetAssets/helper.js~ProjextRollupStylesheetAssetsHelperPlugin#transform",
    "access": "public",
    "description": "This is called by Rollup when is parsing a file.",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "The file contents."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "The file path."
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "RollupFileDefinition"
      ],
      "spread": false,
      "description": "If the file matches the plugin filter, it will parse it and\n                                return a new definition, otherwise it will just return `null`."
    }
  },
  {
    "__docId__": 224,
    "kind": "function",
    "name": "stylesheetAssetsHelper",
    "memberof": "src/plugins/stylesheetAssets/helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugins/stylesheetAssets/helper.js~stylesheetAssetsHelper",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/plugins/stylesheetAssets/helper.js",
    "importStyle": "{stylesheetAssetsHelper}",
    "description": "Shorthand method to create an instance of {@link ProjextRollupStylesheetAssetsHelperPlugin}.",
    "lineNumber": 120,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProjextRollupStylesheetAssetsHelperPluginOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to customize the plugin behaviour."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the plugin's instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ProjextRollupStylesheetAssetsHelperPlugin"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 225,
    "kind": "file",
    "name": "src/plugins/stylesheetAssets/helperFn.js",
    "content": "/* eslint-disable no-underscore-dangle */\n/* eslint-env browser */\n/**\n * This is a dummy function {@link ProjextRollupStylesheetAssetsHelperPlugin} uses in order to\n * wrap code so {@link ProjextRollupStylesheetAssetsPlugin} can find it and process it.\n * @param {string} code A block of CSS code.\n * @return {string}\n * @ignore\n */\nfunction __helperStyleFunctionName__(code) {\n  return code;\n}\n\nmodule.exports = __helperStyleFunctionName__;\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/src/plugins/stylesheetAssets/helperFn.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 226,
    "kind": "function",
    "name": "__helperStyleFunctionName__",
    "memberof": "src/plugins/stylesheetAssets/helperFn.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugins/stylesheetAssets/helperFn.js~__helperStyleFunctionName__",
    "access": "private",
    "export": true,
    "importPath": "projext-plugin-rollup/src/plugins/stylesheetAssets/helperFn.js",
    "importStyle": "__helperStyleFunctionName__",
    "description": "This is a dummy function {@link ProjextRollupStylesheetAssetsHelperPlugin} uses in order to\nwrap code so {@link ProjextRollupStylesheetAssetsPlugin} can find it and process it.",
    "lineNumber": 10,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "A block of CSS code."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 227,
    "kind": "file",
    "name": "src/plugins/stylesheetAssets/index.js",
    "content": "const url = require('url');\nconst path = require('path');\nconst rollupUtils = require('rollup-pluginutils');\nconst extend = require('extend');\nconst fs = require('fs-extra');\nconst ProjextRollupUtils = require('../utils');\nconst { stylesheetAssetsHelper } = require('./helper');\n/**\n * This is a Rollup plugin that reads stylesheets and CSS blocks on JS files in order to find\n * paths for files relative to the styles original definition file, then it copies them to the\n * a given directory and fixes the URL on the stylesheet/CSS block.\n */\nclass ProjextRollupStylesheetAssetsPlugin {\n  /**\n   * Returns the helper plugin, which allows to wrap CSS styles being exported by ES modules on\n   * an specific function so this plugin can find them and fix their paths.\n   * @type {Function}\n   * @static\n   */\n  static get helper() {\n    return stylesheetAssetsHelper;\n  }\n  /**\n   * @param {ProjextRollupStylesheetAssetsPluginOptions} [options={}]\n   * The options to customize the plugin behaviour.\n   * @param {string} [name='projext-rollup-plugin-stylesheet-assets']\n   * The name of the plugin's instance.\n   */\n  constructor(options, name = 'projext-rollup-plugin-stylesheet-assets') {\n    /**\n     * The plugin options.\n     * @type {ProjextRollupStylesheetAssetsPluginOptions}\n     * @access protected\n     * @ignore\n     */\n    this._options = extend(\n      true,\n      {\n        stylesheet: '',\n        insertFnNames: options.insertFnNames || [\n          '___$insertCSSBlocks',\n          '___$insertStyle',\n          '___$styleHelper',\n        ],\n        urls: [],\n        stats: () => {},\n      },\n      options\n    );\n    /**\n     * The name of the plugin's instance.\n     * @type {string}\n     */\n    this.name = name;\n    // Validate the received options before doing anything else.\n    this._validateOptions();\n    /**\n     * Loop all `urls` options and create a filter function with their `include` and `exclude`\n     * properties.\n     */\n    this._options.urls = this._options.urls.map((urlSettings) => Object.assign(\n      urlSettings,\n      {\n        filter: rollupUtils.createFilter(\n          urlSettings.include,\n          urlSettings.exclude\n        ),\n      }\n    ));\n    /**\n     * A dictionary of common expressions the plugin uses while parsing files.\n     * @type {Object}\n     * @property {RegExp} url     Find URLs definitions (`url(...)`) on a style block.\n     * @property {RegExp} js      Validates if a file path is for a JS file.\n     * @property {RegExp} fullMap Validates a source map.\n     * @access protected\n     * @ignore\n     */\n    this._expressions = {\n      url: /url\\s*\\(\\s*(?:['|\"])?(\\.\\.?\\/.*?)(?:['|\"])?\\)/ig,\n      js: /\\.jsx?$/i,\n      fullMap: /(\\/\\*# sourceMappingURL=[\\w:/]+;base64,((?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?) \\*\\/)/ig,\n    };\n    /**\n     * A dictionary with information of the fragments of a source map. This is used to parse and to\n     * re generate source maps.\n     * @type {Object}\n     * @property {string} prefix How a source map starts.\n     * @property {string} header The source map type information.\n     * @property {string} sufix  How a source map ends.\n     * @access protected\n     * @ignore\n     */\n    this._mapFragments = {\n      prefix: '/*# sourceMappingURL=',\n      header: 'data:application/json;base64,',\n      sufix: '*/',\n    };\n    /**\n     * A _\"cache dictionary\"_ for files the plugin read while parsing source maps.\n     * @type {Object}\n     * @access protected\n     * @ignore\n     */\n    this._sourcesCache = {};\n    /**\n     * A list of the directories the plugin created while copying files. This list exists in order\n     * to prevent the plugin from trying to create the same directory more than once.\n     * @type {Array}\n     * @access protected\n     * @ignore\n     */\n    this._createdDirectoriesCache = [];\n    /**\n     * @ignore\n     */\n    this.onwrite = this.onwrite.bind(this);\n  }\n  /**\n   * Gets the plugin options\n   * @return {ProjextRollupStatsPluginOptions}\n   */\n  getOptions() {\n    return this._options;\n  }\n  /**\n   * This is called after Rollup finishes writing the files on the file system. This is where\n   * the plugin opens the file and process the stylesheet/CSS blocks.\n   */\n  onwrite() {\n    const { stylesheet } = this._options;\n    // Validate that the target file exists.\n    if (fs.pathExistsSync(stylesheet)) {\n      // Reset the _\"caches\"_.\n      this._sourcesCache = {};\n      this._createdDirectoriesCache = [];\n      // Get the file contents.\n      const code = fs.readFileSync(stylesheet, 'utf-8');\n      // Based on the file type, process it with the right method.\n      const processed = stylesheet.match(this._expressions.js) ?\n        this._processJS(code) :\n        this._processCSS(code);\n      // Write the processed result back on the file.\n      fs.writeFileSync(stylesheet, processed);\n    }\n  }\n  /**\n   * Valiates the plugin options.\n   * @throws {Error} If no `stylesheet` was defined.\n   * @throws {Error} If no `url`s were defined.\n   * @access protected\n   * @ignore\n   */\n  _validateOptions() {\n    if (!this._options.stylesheet) {\n      throw new Error(`${this.name}: You need to define the stylesheet path`);\n    } else if (!this._options.urls.length) {\n      throw new Error(`${this.name}: You need to define the URLs`);\n    }\n  }\n  /**\n   * Parses a file as a JS file with CSS blocks.\n   * @param {string} code The contents of the file.\n   * @return {string} The processed code.\n   * @access protected\n   * @ignore\n   */\n  _processJS(code) {\n    // Define a new reference for the code.\n    let newCode = code;\n    // Extract all the blocks with CSS on the file.\n    const blocks = this._extractJSBlocks(code);\n    // Loop all the blocks.\n    blocks.forEach((block) => {\n      /**\n       * Update all the CSS defintions on the block. For JS blocks there's only one, but this\n       * plugin handles CSS defintions as Array on all the methods.\n       */\n      const css = block.css\n      .map((cssBlock) => this._updateCSSBlock(cssBlock).css)\n      .join('\\n');\n      // Define the new block code for the file.\n      const escaped = JSON.stringify(css);\n      const newBlock = `${block.fn}(${escaped});`;\n      // Replace the old block.\n      newCode = newCode.replace(block.match, newBlock);\n    });\n    // Return the updated code.\n    return newCode;\n  }\n  /**\n   * Parses a file as a stylesheet.\n   * @param {string} code The contents of the file.\n   * @return {string} The processed code.\n   * @access protected\n   * @ignore\n   */\n  _processCSS(code) {\n    const blocks = this._extractCSSBlocks(code);\n    const updated = blocks.map((cssBlock) => this._updateCSSBlock(cssBlock).css);\n    return updated.join('\\n\\n');\n  }\n  /**\n   * Extracts all the blocks that inject CSS from a JS file.\n   * @param {string} code The contents of the JS file.\n   * @return {Array} The list of extracted blocks.\n   * @access protected\n   * @ignore\n   */\n  _extractJSBlocks(code) {\n    // Define the list to be returned.\n    const result = [];\n    /**\n     * Generates part of a RegExp that would match the names of an inject function:\n     * `fn1|fn2|fn3`.\n     */\n    const fns = this._options.insertFnNames\n    .map((name) => ProjextRollupUtils.escapeRegex(name))\n    .join('|');\n    // Get the current timestamp to be used on unique strings during the process.\n    const time = Date.now();\n    // Define strings that will separate the parts of CSS block.\n    const separators = {\n      block: `___STYLE-BLOCK-SEPARATOR-${time}__`,\n      map: `__STYLE-MAP-SEPARATOR-${time}__`,\n    };\n    // Define the RegExp that will find where a CSS blocks starts in order to insert a separator.\n    const fnsRegexStr = `(${fns}\\\\s*\\\\(\\\\s*['|\"])`;\n    const fnsRegex = new RegExp(fnsRegexStr, 'ig');\n    // Define the RegExp that will find an entire CSS block using the separator.\n    const blockRegexStr = `^(${fns})\\\\s*\\\\(\\\\s*['|\"](.*?)${separators.map}(?:\\\\\\\\n)?\\\\s*['|\"]\\\\s*(?:,\\\\s*(\\\\{.*?\\\\}|['|\"].*?['|\"]|null))?\\\\s*\\\\);`;\n    const blockRegex = new RegExp(blockRegexStr, 'ig');\n\n    /**\n     * Quick note: Yes, all this _\"separators magic\"_ could be done with a few more RegExp, the\n     * thing is that using expressions on a big file KILLS the memory, no matter how basic the\n     * expression is.\n     */\n\n    // Let's start the parsing!\n    code\n    // Add the separators before each CSS block.\n    .replace(fnsRegex, `${separators.block}$1`)\n    // Split the code using the seprators.\n    .split(separators.block)\n    // Loop each part...\n    .forEach((part) => {\n      // ...get the block map and replace it with a separator.\n      let map;\n      const partCode = part.replace(this._expressions.fullMap, (match) => {\n        map = match;\n        return separators.map;\n      });\n      // If a map was found, which means that the block can be parsed...\n      if (map) {\n        // Extract the block parts.\n        let match = blockRegex.exec(partCode);\n        while (match) {\n          const [fullMatch, fn, css] = match;\n          // This removes escaped quotes.\n          const parsed = JSON.parse(`{\"css\": \"${css}\"}`).css;\n          // Push the block to the final list.\n          result.push({\n            // Return the full match back to how it was so it can later be found and replaced.\n            match: fullMatch.replace(separators.map, map),\n            // Format the CSS block as an array in order to match all the other methods.\n            css: [{\n              // Include the CSS code.\n              css: parsed.trim(),\n              // Include the source map\n              map,\n            }],\n            // The name of the inject function.\n            fn,\n          });\n          // Execute the expression again to keep the loop.\n          match = blockRegex.exec(partCode);\n        }\n      }\n    });\n\n    return result;\n  }\n  /**\n   * Extracts the blocks from a CSS stylesheet. A block starts with CSS code and ends with a\n   * source map.\n   * @param {string} code The contents of the JS file.\n   * @return {Array} The list of extracted blocks.\n   * @access protected\n   * @ignore\n   */\n  _extractCSSBlocks(code) {\n    // Define the list to be returned.\n    const result = [];\n    // Get the source map fragments information.\n    const { prefix, header, sufix } = this._mapFragments;\n    code\n    // Split the code using the source map prefix.\n    .split(prefix)\n    // Loop each block.\n    .forEach((block, index) => {\n      // If the block starts with the map header, it means that a CSS block was previously added.\n      if (block.startsWith(header)) {\n        // Find where the map ends and get the entire map.\n        const mapEnd = block.indexOf(sufix);\n        const mapEndLength = mapEnd + sufix.length;\n        const map = block.substr(0, mapEndLength);\n        const previousIndex = index - 1;\n        // Put the map together and assign it to the previous block.\n        result[previousIndex].map = `${prefix}${map}`;\n        // Assume everything after the map ended is another CSS block.\n        const css = block.substr(mapEndLength).trim();\n        // If there was a CSS block, push it to the list with an empty map.\n        if (css) {\n          result.push({\n            css,\n            map: '',\n          });\n        }\n      } else {\n        /**\n         * If it doesn't start with map header, it means this is the first CSS block, so push\n         * it to the list with an empty map.\n         */\n        result.push({\n          css: block.trim(),\n          map: '',\n        });\n      }\n    });\n    // Return the list of blocks.\n    return result;\n  }\n  /**\n   * Updates a CSS block code. The method will search for files linked inside the block,\n   * copy them to a designated location and replace it URL.\n   * @param {Object} block     The CSS block information.\n   * @param {string} block.css The block CSS code.\n   * @return {Object} The updated block.\n   * @access protected\n   * @ignore\n   */\n  _updateCSSBlock(block) {\n    // Get all the linked files on the block.\n    const paths = this._getPathsForCSSBlock(block);\n    let { css } = block;\n    // Loop all the files.\n    paths\n    // Filter those which absolute path couldn't be found.\n    .filter((pathChange) => !!pathChange.absPath)\n    // Loop the filtered list.\n    .forEach((pathChange) => {\n      const {\n        absPath,\n        line,\n        query,\n        info,\n      } = pathChange;\n      // Try to find a URL setting which filter matches a file absolute path.\n      const settings = this._options.urls.find((setting) => setting.filter(absPath));\n      // If a URL setting was found...\n      if (settings) {\n        // Generate the output path where the file will be copied.\n        const output = ProjextRollupUtils.formatPlaceholder(settings.output, info);\n        // Get the directory where the file will be copied.\n        const outputDir = path.dirname(output);\n        // Generate the new URL for the file.\n        const urlBase = ProjextRollupUtils.formatPlaceholder(settings.url, info);\n        // Append any existing query the file originally had.\n        const newURL = `${urlBase}${query}`;\n        // Generate the new statement for the CSS.\n        const newLine = `url('${newURL}')`;\n        // Generate a RegExp that matches the old statement.\n        const lineRegex = new RegExp(ProjextRollupUtils.escapeRegex(line.trim()), 'ig');\n        // if the directory wasn't already created, create it.\n        if (!this._createdDirectoriesCache.includes(outputDir)) {\n          fs.ensureDirSync(outputDir);\n          this._createdDirectoriesCache.push(outputDir);\n        }\n        // Copy the file.\n        fs.copySync(absPath, output);\n        // Add an stats entry that the file was copied.\n        this._options.stats(this.name, output);\n        // Replace the old statement with the new one.\n        css = css.replace(lineRegex, newLine);\n      }\n    });\n    // Return the updated block with the new CSS code.\n    return Object.assign({}, block, { css });\n  }\n  /**\n   * Gets a list of dictionaries with the information of all the files linked on a CSS block.\n   * @param {Object} block The CSS block information.\n   * @param {string} block.map The CSS block source map.\n   * @param {string} block.css The actual CSS code.\n   * @return {Array}\n   * @access protected\n   * @ignore\n   */\n  _getPathsForCSSBlock(block) {\n    // Get the list of sources on the block source map.\n    const { sources } = this._parseMap(block.map);\n    // Load the source contents.\n    const files = this._loadSources(sources);\n    // Get all the `url(...)` statements on the CSS block.\n    return this._extractPaths(block.css)\n    // Loop all the statements.\n    .map((pathInfo) => {\n      let absPath;\n      // Loop all the source.\n      files.find((file) => {\n        /**\n         * Validate that the file exists relative to the source and that the statement is also\n         * present on the source.\n         */\n        const pathFromFile = path.join(file.info.dir, pathInfo.file);\n        const found = pathInfo.lines.some((line) => file.code.includes(line)) &&\n          fs.pathExistsSync(pathFromFile);\n\n        // If the file exists, define its absolute path.\n        if (found) {\n          absPath = path.resolve(pathFromFile.replace(/\\/\\.\\//ig, '/'));\n        }\n\n        return found;\n      });\n      // Return the statement information plus the absolute path for it.\n      return Object.assign({}, pathInfo, { absPath });\n    });\n  }\n  /**\n   * Parse a source map.\n   * @param {string} map The map comment.\n   * @return {Object}\n   * @access protected\n   * @ignore\n   */\n  _parseMap(map) {\n    const { prefix, header, sufix } = this._mapFragments;\n    const fullPrefix = `${prefix}${header}`;\n    const codeRange = (map.length - fullPrefix.length - sufix.length);\n    const code = map.substr(fullPrefix.length, codeRange).trim();\n    const decoded = Buffer.from(code, 'base64').toString('ascii');\n    return JSON.parse(decoded.trim());\n  }\n  /**\n   * Loads a list of source files. They are used while parsing blocks in order to find if certain\n   * files exists relative to them and if they include the same statements being parsed.\n   * @param {Array} sources The list of files.\n   * @return {Array} A list of dictionaries with the sources `file`, `code` and `info`rmation about\n   *                 their paths.\n   * @access protected\n   * @ignore\n   */\n  _loadSources(sources) {\n    // Loop all the sources.\n    return sources.map((source) => {\n      // Make sure the file wasn't already loaded.\n      if (!this._sourcesCache[source]) {\n        // Get the file contents.\n        const code = fs.readFileSync(source, 'utf-8');\n        // Add it to the cache.\n        this._sourcesCache[source] = {\n          file: source,\n          code,\n          info: path.parse(source),\n        };\n      }\n      // Return the file information from the cache.\n      return this._sourcesCache[source];\n    });\n  }\n  /**\n   * Extracts all the `url(...)` statements from a CSS block code.\n   * @param {string} code The CSS block code.\n   * @return {Array}\n   * @access protected\n   * @ignore\n   */\n  _extractPaths(code) {\n    // Define the list to be removed.\n    const result = [];\n    // Define a list to prevent the method from parsing the same statement more than once.\n    const saved = [];\n    // Loop all the statements.\n    let match = this._expressions.url.exec(code);\n    while (match) {\n      // Get the full line and the actual URL.\n      const [line, urlPath] = match;\n      // Make sure it wasn't already processed.\n      if (!saved.includes(line)) {\n        // Push the line to the list of processed lines.\n        saved.push(line);\n        // Get the URL information.\n        const urlInfo = this._parseURL(urlPath);\n        // Push all the information to the return list.\n        result.push(Object.assign(\n          // The base information about the URL.\n          urlInfo,\n          {\n            // The line found on the code.\n            line,\n            // Variations of the same line as the bundle process may have changed quote types.\n            lines: [\n              line,\n              line.replace(/\"/g, '\\''),\n            ],\n            // The information of the URL path.\n            info: path.parse(urlInfo.file),\n          }\n        ));\n      }\n      // Execute the expression again to keep the loop.\n      match = this._expressions.url.exec(code);\n    }\n\n    return result;\n  }\n  /**\n   * Parse a URL in order to separate a file from a query.\n   * @param {string} urlPath The URL to parse.\n   * @return {Object} A dictionary with the keys `file` and `query`.\n   * @access protected\n   * @ignore\n   */\n  _parseURL(urlPath) {\n    const parsed = url.parse(urlPath);\n    const urlQuery = parsed.search || '';\n    const urlHash = parsed.hash || '';\n    const query = `${urlQuery}${urlHash}`;\n\n    return {\n      file: parsed.pathname,\n      query,\n    };\n  }\n}\n/**\n * Shorthand method to create an instance of {@link ProjextRollupStylesheetAssetsPlugin}.\n * @param {ProjextRollupStylesheetAssetsPluginOptions} options\n * The options to customize the plugin behaviour.\n * @param {string} name\n * The name of the plugin's instance.\n * @return {ProjextRollupStylesheetAssetsPlugin}\n */\nconst stylesheetAssets = (\n  options,\n  name\n) => new ProjextRollupStylesheetAssetsPlugin(options, name);\nstylesheetAssets.helper = ProjextRollupStylesheetAssetsPlugin.helper;\n\nmodule.exports = {\n  ProjextRollupStylesheetAssetsPlugin,\n  stylesheetAssets,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/src/plugins/stylesheetAssets/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 228,
    "kind": "class",
    "name": "ProjextRollupStylesheetAssetsPlugin",
    "memberof": "src/plugins/stylesheetAssets/index.js",
    "static": true,
    "longname": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/plugins/stylesheetAssets/index.js",
    "importStyle": "{ProjextRollupStylesheetAssetsPlugin}",
    "description": "This is a Rollup plugin that reads stylesheets and CSS blocks on JS files in order to find\npaths for files relative to the styles original definition file, then it copies them to the\na given directory and fixes the URL on the stylesheet/CSS block.",
    "lineNumber": 13,
    "interface": false
  },
  {
    "__docId__": 229,
    "kind": "get",
    "name": "helper",
    "memberof": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin.helper",
    "access": "public",
    "description": "Returns the helper plugin, which allows to wrap CSS styles being exported by ES modules on\nan specific function so this plugin can find them and fix their paths.",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 230,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProjextRollupStylesheetAssetsPluginOptions"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "The options to customize the plugin behaviour."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'projext-rollup-plugin-stylesheet-assets'",
        "defaultRaw": "'projext-rollup-plugin-stylesheet-assets'",
        "name": "name",
        "description": "The name of the plugin's instance."
      }
    ]
  },
  {
    "__docId__": 231,
    "kind": "member",
    "name": "_options",
    "memberof": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin",
    "static": false,
    "longname": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin#_options",
    "access": "protected",
    "description": "The plugin options.",
    "lineNumber": 36,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "ProjextRollupStylesheetAssetsPluginOptions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 232,
    "kind": "member",
    "name": "name",
    "memberof": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin",
    "static": false,
    "longname": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin#name",
    "access": "public",
    "description": "The name of the plugin's instance.",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 233,
    "kind": "member",
    "name": "_expressions",
    "memberof": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin",
    "static": false,
    "longname": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin#_expressions",
    "access": "protected",
    "description": "A dictionary of common expressions the plugin uses while parsing files.",
    "lineNumber": 79,
    "ignore": true,
    "properties": [
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "Find URLs definitions (`url(...)`) on a style block."
      },
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "js",
        "description": "Validates if a file path is for a JS file."
      },
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "fullMap",
        "description": "Validates a source map."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 234,
    "kind": "member",
    "name": "_mapFragments",
    "memberof": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin",
    "static": false,
    "longname": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin#_mapFragments",
    "access": "protected",
    "description": "A dictionary with information of the fragments of a source map. This is used to parse and to\nre generate source maps.",
    "lineNumber": 94,
    "ignore": true,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prefix",
        "description": "How a source map starts."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "header",
        "description": "The source map type information."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "sufix",
        "description": "How a source map ends."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 235,
    "kind": "member",
    "name": "_sourcesCache",
    "memberof": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin",
    "static": false,
    "longname": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin#_sourcesCache",
    "access": "protected",
    "description": "A _\"cache dictionary\"_ for files the plugin read while parsing source maps.",
    "lineNumber": 105,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 236,
    "kind": "member",
    "name": "_createdDirectoriesCache",
    "memberof": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin",
    "static": false,
    "longname": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin#_createdDirectoriesCache",
    "access": "protected",
    "description": "A list of the directories the plugin created while copying files. This list exists in order\nto prevent the plugin from trying to create the same directory more than once.",
    "lineNumber": 113,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "getOptions",
    "memberof": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin#getOptions",
    "access": "public",
    "description": "Gets the plugin options",
    "lineNumber": 123,
    "return": {
      "nullable": null,
      "types": [
        "ProjextRollupStatsPluginOptions"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "onwrite",
    "memberof": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin#onwrite",
    "access": "public",
    "description": "This is called after Rollup finishes writing the files on the file system. This is where\nthe plugin opens the file and process the stylesheet/CSS blocks.",
    "lineNumber": 130,
    "params": [],
    "return": null
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "_validateOptions",
    "memberof": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin#_validateOptions",
    "access": "protected",
    "description": "Valiates the plugin options.",
    "lineNumber": 154,
    "ignore": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If no `stylesheet` was defined."
      },
      {
        "types": [
          "Error"
        ],
        "description": "If no `url`s were defined."
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "_processJS",
    "memberof": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin#_processJS",
    "access": "protected",
    "description": "Parses a file as a JS file with CSS blocks.",
    "lineNumber": 168,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "The contents of the file."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The processed code."
    }
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "_processCSS",
    "memberof": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin#_processCSS",
    "access": "protected",
    "description": "Parses a file as a stylesheet.",
    "lineNumber": 198,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "The contents of the file."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The processed code."
    }
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "_extractJSBlocks",
    "memberof": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin#_extractJSBlocks",
    "access": "protected",
    "description": "Extracts all the blocks that inject CSS from a JS file.",
    "lineNumber": 210,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "The contents of the JS file."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "The list of extracted blocks."
    }
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "_extractCSSBlocks",
    "memberof": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin#_extractCSSBlocks",
    "access": "protected",
    "description": "Extracts the blocks from a CSS stylesheet. A block starts with CSS code and ends with a\nsource map.",
    "lineNumber": 292,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "The contents of the JS file."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "The list of extracted blocks."
    }
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "_updateCSSBlock",
    "memberof": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin#_updateCSSBlock",
    "access": "protected",
    "description": "Updates a CSS block code. The method will search for files linked inside the block,\ncopy them to a designated location and replace it URL.",
    "lineNumber": 343,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "block",
        "description": "The CSS block information."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "block.css",
        "description": "The block CSS code."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The updated block."
    }
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "_getPathsForCSSBlock",
    "memberof": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin#_getPathsForCSSBlock",
    "access": "protected",
    "description": "Gets a list of dictionaries with the information of all the files linked on a CSS block.",
    "lineNumber": 400,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "block",
        "description": "The CSS block information."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "block.map",
        "description": "The CSS block source map."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "block.css",
        "description": "The actual CSS code."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "_parseMap",
    "memberof": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin#_parseMap",
    "access": "protected",
    "description": "Parse a source map.",
    "lineNumber": 438,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "map",
        "description": "The map comment."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 250,
    "kind": "method",
    "name": "_loadSources",
    "memberof": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin#_loadSources",
    "access": "protected",
    "description": "Loads a list of source files. They are used while parsing blocks in order to find if certain\nfiles exists relative to them and if they include the same statements being parsed.",
    "lineNumber": 455,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "sources",
        "description": "The list of files."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A list of dictionaries with the sources `file`, `code` and `info`rmation about\n                their paths."
    }
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "_extractPaths",
    "memberof": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin#_extractPaths",
    "access": "protected",
    "description": "Extracts all the `url(...)` statements from a CSS block code.",
    "lineNumber": 480,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "The CSS block code."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "_parseURL",
    "memberof": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stylesheetAssets/index.js~ProjextRollupStylesheetAssetsPlugin#_parseURL",
    "access": "protected",
    "description": "Parse a URL in order to separate a file from a query.",
    "lineNumber": 526,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "urlPath",
        "description": "The URL to parse."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A dictionary with the keys `file` and `query`."
    }
  },
  {
    "__docId__": 253,
    "kind": "function",
    "name": "stylesheetAssets",
    "memberof": "src/plugins/stylesheetAssets/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugins/stylesheetAssets/index.js~stylesheetAssets",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/plugins/stylesheetAssets/index.js",
    "importStyle": "{stylesheetAssets}",
    "description": "Shorthand method to create an instance of {@link ProjextRollupStylesheetAssetsPlugin}.",
    "lineNumber": 546,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProjextRollupStylesheetAssetsPluginOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to customize the plugin behaviour."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the plugin's instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ProjextRollupStylesheetAssetsPlugin"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 254,
    "kind": "file",
    "name": "src/plugins/stylesheetModulesFixer/index.js",
    "content": "const rollupUtils = require('rollup-pluginutils');\nconst extend = require('extend');\n/**\n * This is a Rollup plugin that replaces the default export statements of stylesheet modules with\n * the CSS modules local names.\n * This is for web apps that either inject CSS using functions or bundle all on separated files,\n * because it searches for functions (inject) or empty strings (bundle) on exports.\n */\nclass ProjextRollupStylesheetModulesFixerPlugin {\n  /**\n   * @param {ProjextRollupStylesheetModulesFixerPluginOptions} [options={}]\n   * The options to customize the plugin behaviour.\n   * @param {string} [name='projext-rollup-plugin-stylesheet-modules-fixer']\n   * The name of the plugin's instance.\n   */\n  constructor(options = {}, name = 'projext-rollup-plugin-stylesheet-modules-fixer') {\n    /**\n     * The plugin options.\n     * @type {ProjextRollupStylesheetModulesFixerPluginOptions}\n     * @access protected\n     * @ignore\n     */\n    this._options = extend(\n      true,\n      {\n        include: [],\n        exclude: [],\n        modulesExportName: 'locals',\n      },\n      options\n    );\n    /**\n     * The name of the plugin's instance.\n     * @type {string}\n     */\n    this.name = name;\n    /**\n     * The filter to decide which files will be processed and which won't.\n     * @type {RollupFilter}\n     */\n    this.filter = rollupUtils.createFilter(\n      this._options.include,\n      this._options.exclude\n    );\n    /**\n     * A dictionary of common expressions the plugin uses while parsing files.\n     * @type {Object}\n     * @property {RegExp} firstExport Finds the first export statement.\n     * @property {RexExp} line        Matches an export statement line.\n     * @property {RegExp} definition  Gets the parts of a named export.\n     * @property {RegExp} empty       Matches an empty export.\n     * @access protected\n     * @ignore\n     */\n    this._expressions = {\n      firstExport: /^(export\\s*)/mi,\n      line: /^((?:\\w+(?: \\w+)?)\\s*=|default)\\s*([\\s\\S]*?);$/ig,\n      definition: /^(\\w+)\\s*([\\S\\s]*?)\\s*=/,\n      empty: /['|\"]{2}/,\n    };\n    /**\n     * @ignore\n     */\n    this.transform = this.transform.bind(this);\n  }\n  /**\n   * Gets the plugin options\n   * @return {ProjextRollupStylesheetModulesFixerPluginOptions}\n   */\n  getOptions() {\n    return this._options;\n  }\n  /**\n   * This is called by Rollup when is parsing a file.\n   * @param {string} code     The file contents.\n   * @param {string} filepath The file path.\n   * @return {?RollupFileDefinition} If the file matches the plugin filter, it will parse it and\n   *                                 return a new definition, otherwise it will just return `null`.\n   */\n  transform(code, filepath) {\n    // Define the variable to return.\n    let result = null;\n    // Make sure the file matches the filter and that it has an export statement.\n    if (this.filter(filepath)) {\n      // Separate the file into _\"contents and exports\"_.\n      const parts = this._getFileParts(code);\n      // Parse the export statements.\n      const fileExports = this._getFileExports(parts.exports);\n      // Update the export statements.\n      const updatedFileExports = this._updateFileExports(fileExports);\n      // Generate the export lines.\n      const statements = this._generateFileExports(updatedFileExports);\n      // Update the file definition.\n      result = {\n        code: `${parts.contents}\\n${statements}`,\n        map: {\n          mappings: '',\n        },\n      };\n    }\n\n    return result;\n  }\n  /**\n   * Seprates the file into two parts: `content`, everything before the first export, and export\n   * statements.\n   * @param {string} code The file code.\n   * @return {Object}\n   * @access protected\n   * @ignore\n   */\n  _getFileParts(code) {\n    // Generate a unique separator.\n    const time = Date.now();\n    const separator = `__EXPORTS-BLOCK-SEPARATOR-${time}__`;\n    const [contents, exports] = code\n    // Add the separator before the first export.\n    .replace(this._expressions.firstExport, `${separator}$1`)\n    // Split the code using the separator.\n    .split(separator);\n    // Return the file parts.\n    return {\n      contents,\n      exports,\n    };\n  }\n  /**\n   * Parses the exports statements of a file.\n   * @param {string} code The part of the file contents with the export statements.\n   * @return {Object} A dictionary with the keys `default`, for the default export, `modules`, for\n   *                  the CSS modules locals export, and `all`, with all the statements found.\n   * @access protected\n   * @ignore\n   */\n  _getFileExports(code) {\n    // Define the variables that will hold the indexes for the default and locals exports.\n    let defaultExportIndex = -1;\n    let modulesExportIndex = -1;\n    const fileExports = code\n    // Split the code using the statements.\n    .split('export')\n    /**\n     * Remove extra spaces from all the statements (because with the `split`, `export` was also\n     * removed, leaving a leading space on each line).\n     */\n    .map((line) => line.trim())\n    // Filter empty lines and lines that don't match an export statement.\n    .filter((line) => !!line && line.match(this._expressions.line))\n    // Loop all the filtered lines.\n    .map((line, index) => {\n      // Define a dictionary with the export information.\n      const info = {\n        isDefault: false,\n        name: '',\n        value: '',\n        type: null,\n      };\n      // Get the name of the export and its value.\n      let [, name, value] = this._expressions.line.exec(line);\n      this._expressions.line.lastIndex = 0;\n\n      // Remove any trailing semicolon, as the final method will add them.\n      let endsWithSemi = value.endsWith(';');\n      while (endsWithSemi) {\n        value = value.substr(0, value.length - 1);\n        endsWithSemi = value.endsWith(';');\n      }\n      // Define a variable to hold the export type.\n      let type;\n      // If the statement is the default export.\n      if (name === 'default') {\n        // Save its index.\n        defaultExportIndex = index;\n        // Set the flag to true on its properties.\n        info.isDefault = true;\n      } else {\n        // If is not the default export, parse the type and name.\n        [, type, name] = this._expressions.definition.exec(line);\n        this._expressions.definition.lastIndex = 0;\n      }\n      // If the name of the export matches the one for CSS modules, save its index.\n      if (name === this._options.modulesExportName) {\n        modulesExportIndex = index;\n      }\n      // Assign the found properties.\n      info.name = name;\n      info.value = value;\n      info.type = type;\n      // Return the object information.\n      return info;\n    });\n    // Return the dictionary with all the findings.\n    return {\n      // The default export, or `null`.\n      default: defaultExportIndex > -1 ? fileExports[defaultExportIndex] : null,\n      // The export for the CSS modules locals, or `null`.\n      modules: modulesExportIndex > -1 ? fileExports[modulesExportIndex] : null,\n      // All the exports.\n      all: fileExports,\n    };\n  }\n  /**\n   * Gets the updated export statements for a file.\n   * @param {Object} fileExports The result of `_getFileExports`, with all the export statements\n   *                             information.\n   * @return {Array} A list of the final export statements.\n   * @access protected\n   * @ignore\n   */\n  _updateFileExports(fileExports) {\n    // Define the variable to return.\n    let result;\n    // Get the export for CSS modules locals.\n    const modulesExport = fileExports.modules;\n    // If there's an export for the CSS modules locals...\n    if (modulesExport) {\n      // ...then get the default export information.\n      const defaultExport = fileExports.default;\n      /**\n       * If the default export matches an empty string, it means that its code was sent to a\n       * different bundle, so the method can just switch the default export value with the one from\n       * the CSS Modules locals.\n       * But if is not an empty string, then there's a function to inject the CSS code, so the\n       * method will wrap it with another function that calls it and then returns the CSS\n       * Modules locals.\n       */\n      if (defaultExport.value.match(this._expressions.empty)) {\n        defaultExport.value = modulesExport.value;\n      } else {\n        defaultExport.value = [\n          '(() => {',\n          `  ${defaultExport.value};`,\n          `  return ${modulesExport.value};`,\n          '})()',\n        ]\n        .join('\\n');\n      }\n      /**\n       * Finally, as the CSS Modules export is already the new default export, set to return a\n       * list of all the export statements, except for that one.\n       */\n      result = fileExports.all.filter((info) => info.name !== modulesExport.name);\n    } else {\n      // If no CSS Module export was found, set to return all the exports.\n      result = fileExports.all;\n    }\n\n    return result;\n  }\n  /**\n   * Generates the code for a list of export statements.\n   * @param {Array} fileExports The list of export statements information generated by\n   *                            `_updateFileExports`.\n   * @return {string}\n   * @access protected\n   * @ignore\n   */\n  _generateFileExports(fileExports) {\n    return fileExports\n    .map((info) => {\n      const name = info.isDefault ? 'default' : `${info.type} ${info.name} =`;\n      return `export ${name} ${info.value};`;\n    })\n    .join('\\n');\n  }\n}\n/**\n * Shorthand method to create an instance of {@link ProjextRollupStylesheetModulesFixerPlugin}.\n * @param {ProjextRollupStylesheetModulesFixerPluginOptions} options\n * The options to customize the plugin behaviour.\n * @param {string} name\n * The name of the plugin's instance.\n * @return {ProjextRollupStylesheetModulesFixerPlugin}\n */\nconst stylesheetModulesFixer = (\n  options,\n  name\n) => new ProjextRollupStylesheetModulesFixerPlugin(options, name);\n\nmodule.exports = {\n  ProjextRollupStylesheetModulesFixerPlugin,\n  stylesheetModulesFixer,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/src/plugins/stylesheetModulesFixer/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 255,
    "kind": "class",
    "name": "ProjextRollupStylesheetModulesFixerPlugin",
    "memberof": "src/plugins/stylesheetModulesFixer/index.js",
    "static": true,
    "longname": "src/plugins/stylesheetModulesFixer/index.js~ProjextRollupStylesheetModulesFixerPlugin",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/plugins/stylesheetModulesFixer/index.js",
    "importStyle": "{ProjextRollupStylesheetModulesFixerPlugin}",
    "description": "This is a Rollup plugin that replaces the default export statements of stylesheet modules with\nthe CSS modules local names.\nThis is for web apps that either inject CSS using functions or bundle all on separated files,\nbecause it searches for functions (inject) or empty strings (bundle) on exports.",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 256,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/plugins/stylesheetModulesFixer/index.js~ProjextRollupStylesheetModulesFixerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stylesheetModulesFixer/index.js~ProjextRollupStylesheetModulesFixerPlugin#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProjextRollupStylesheetModulesFixerPluginOptions"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "The options to customize the plugin behaviour."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'projext-rollup-plugin-stylesheet-modules-fixer'",
        "defaultRaw": "'projext-rollup-plugin-stylesheet-modules-fixer'",
        "name": "name",
        "description": "The name of the plugin's instance."
      }
    ]
  },
  {
    "__docId__": 257,
    "kind": "member",
    "name": "_options",
    "memberof": "src/plugins/stylesheetModulesFixer/index.js~ProjextRollupStylesheetModulesFixerPlugin",
    "static": false,
    "longname": "src/plugins/stylesheetModulesFixer/index.js~ProjextRollupStylesheetModulesFixerPlugin#_options",
    "access": "protected",
    "description": "The plugin options.",
    "lineNumber": 23,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "ProjextRollupStylesheetModulesFixerPluginOptions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 258,
    "kind": "member",
    "name": "name",
    "memberof": "src/plugins/stylesheetModulesFixer/index.js~ProjextRollupStylesheetModulesFixerPlugin",
    "static": false,
    "longname": "src/plugins/stylesheetModulesFixer/index.js~ProjextRollupStylesheetModulesFixerPlugin#name",
    "access": "public",
    "description": "The name of the plugin's instance.",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 259,
    "kind": "member",
    "name": "filter",
    "memberof": "src/plugins/stylesheetModulesFixer/index.js~ProjextRollupStylesheetModulesFixerPlugin",
    "static": false,
    "longname": "src/plugins/stylesheetModulesFixer/index.js~ProjextRollupStylesheetModulesFixerPlugin#filter",
    "access": "public",
    "description": "The filter to decide which files will be processed and which won't.",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "RollupFilter"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 260,
    "kind": "member",
    "name": "_expressions",
    "memberof": "src/plugins/stylesheetModulesFixer/index.js~ProjextRollupStylesheetModulesFixerPlugin",
    "static": false,
    "longname": "src/plugins/stylesheetModulesFixer/index.js~ProjextRollupStylesheetModulesFixerPlugin#_expressions",
    "access": "protected",
    "description": "A dictionary of common expressions the plugin uses while parsing files.",
    "lineNumber": 55,
    "ignore": true,
    "properties": [
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "firstExport",
        "description": "Finds the first export statement."
      },
      {
        "nullable": null,
        "types": [
          "RexExp"
        ],
        "spread": false,
        "optional": false,
        "name": "line",
        "description": "Matches an export statement line."
      },
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "definition",
        "description": "Gets the parts of a named export."
      },
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "empty",
        "description": "Matches an empty export."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "getOptions",
    "memberof": "src/plugins/stylesheetModulesFixer/index.js~ProjextRollupStylesheetModulesFixerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stylesheetModulesFixer/index.js~ProjextRollupStylesheetModulesFixerPlugin#getOptions",
    "access": "public",
    "description": "Gets the plugin options",
    "lineNumber": 70,
    "return": {
      "nullable": null,
      "types": [
        "ProjextRollupStylesheetModulesFixerPluginOptions"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 263,
    "kind": "method",
    "name": "transform",
    "memberof": "src/plugins/stylesheetModulesFixer/index.js~ProjextRollupStylesheetModulesFixerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stylesheetModulesFixer/index.js~ProjextRollupStylesheetModulesFixerPlugin#transform",
    "access": "public",
    "description": "This is called by Rollup when is parsing a file.",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "The file contents."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "The file path."
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "RollupFileDefinition"
      ],
      "spread": false,
      "description": "If the file matches the plugin filter, it will parse it and\n                                return a new definition, otherwise it will just return `null`."
    }
  },
  {
    "__docId__": 264,
    "kind": "method",
    "name": "_getFileParts",
    "memberof": "src/plugins/stylesheetModulesFixer/index.js~ProjextRollupStylesheetModulesFixerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stylesheetModulesFixer/index.js~ProjextRollupStylesheetModulesFixerPlugin#_getFileParts",
    "access": "protected",
    "description": "Seprates the file into two parts: `content`, everything before the first export, and export\nstatements.",
    "lineNumber": 112,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "The file code."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "_getFileExports",
    "memberof": "src/plugins/stylesheetModulesFixer/index.js~ProjextRollupStylesheetModulesFixerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stylesheetModulesFixer/index.js~ProjextRollupStylesheetModulesFixerPlugin#_getFileExports",
    "access": "protected",
    "description": "Parses the exports statements of a file.",
    "lineNumber": 135,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "The part of the file contents with the export statements."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A dictionary with the keys `default`, for the default export, `modules`, for\n                 the CSS modules locals export, and `all`, with all the statements found."
    }
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "_updateFileExports",
    "memberof": "src/plugins/stylesheetModulesFixer/index.js~ProjextRollupStylesheetModulesFixerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stylesheetModulesFixer/index.js~ProjextRollupStylesheetModulesFixerPlugin#_updateFileExports",
    "access": "protected",
    "description": "Gets the updated export statements for a file.",
    "lineNumber": 210,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "fileExports",
        "description": "The result of `_getFileExports`, with all the export statements\n                            information."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A list of the final export statements."
    }
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "_generateFileExports",
    "memberof": "src/plugins/stylesheetModulesFixer/index.js~ProjextRollupStylesheetModulesFixerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/stylesheetModulesFixer/index.js~ProjextRollupStylesheetModulesFixerPlugin#_generateFileExports",
    "access": "protected",
    "description": "Generates the code for a list of export statements.",
    "lineNumber": 257,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "fileExports",
        "description": "The list of export statements information generated by\n                           `_updateFileExports`."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 268,
    "kind": "function",
    "name": "stylesheetModulesFixer",
    "memberof": "src/plugins/stylesheetModulesFixer/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugins/stylesheetModulesFixer/index.js~stylesheetModulesFixer",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/plugins/stylesheetModulesFixer/index.js",
    "importStyle": "{stylesheetModulesFixer}",
    "description": "Shorthand method to create an instance of {@link ProjextRollupStylesheetModulesFixerPlugin}.",
    "lineNumber": 274,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProjextRollupStylesheetModulesFixerPluginOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to customize the plugin behaviour."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the plugin's instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ProjextRollupStylesheetModulesFixerPlugin"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 269,
    "kind": "file",
    "name": "src/plugins/template/index.js",
    "content": "const path = require('path');\nconst rollupUtils = require('rollup-pluginutils');\nconst extend = require('extend');\nconst fs = require('fs-extra');\nconst ProjextRollupUtils = require('../utils');\n/**\n * This is a Rollup plugin that generates an HTML file and injects a given list of scripts and\n * stylesheets.\n */\nclass ProjextRollupTemplatePlugin {\n  /**\n   * @param {ProjextRollupTemplatePluginOptions} [options={}]\n   * The options to customize the plugin behaviour.\n   * @param {string} [name='projext-rollup-plugin-template']\n   * The name of the plugin's instance.\n   */\n  constructor(options = {}, name = 'projext-rollup-plugin-template') {\n    /**\n     * The plugin options.\n     * @type {ProjextRollupTemplatePluginOptions}\n     * @access protected\n     * @ignore\n     */\n    this._options = extend(\n      true,\n      {\n        template: '',\n        output: '',\n        scripts: [],\n        scriptsAsync: true,\n        scriptsOnBody: true,\n        stylesheets: [],\n        urls: [],\n        stats: () => {},\n      },\n      options\n    );\n    /**\n     * The name of the plugin's instance.\n     * @type {string}\n     */\n    this.name = name;\n    // Validate the received options before doing anything else.\n    this._validateOptions();\n    /**\n     * Loop all `urls` options and create a filter function with their `include` and `exclude`\n     * properties.\n     */\n    this._options.urls = this._options.urls.map((urlSettings) => Object.assign(\n      urlSettings,\n      {\n        filter: rollupUtils.createFilter(\n          urlSettings.include,\n          urlSettings.exclude\n        ),\n      }\n    ));\n    /**\n     * The base directory where the template file is located.\n     * @type {string}\n     * @access protected\n     * @ignore\n     */\n    this._base = path.dirname(this._options.template);\n    /**\n     * The base directory where the final file is going to be created.\n     * @type {string}\n     * @access protected\n     * @ignore\n     */\n    this._path = path.dirname(this._options.output);\n    /**\n     * A dictionary of common expressions the plugin uses while parsing files.\n     * @type {Object}\n     * @property {RegExp} url  Matches `require` statements.\n     * @property {RexExp} head Matches the end of the template `<head />` tag.\n     * @property {RegExp} body Matches the end of the template `<body />` tag.\n     * @access protected\n     * @ignore\n     */\n    this._expressions = {\n      url: /<%=\\s*require\\s*\\(\\s*['|\"](.*?)['|\"]\\s*\\).*?%>/ig,\n      head: /([\\t ]*)(<\\/head>)/i,\n      body: /([\\t ]*)(<\\/body>)/i,\n    };\n    /**\n     * A list of the directories the plugin created while copying files. This list exists in order\n     * to prevent the plugin from trying to create the same directory more than once.\n     * @type {Array}\n     * @access protected\n     * @ignore\n     */\n    this._createdDirectoriesCache = [];\n    /**\n     * @ignore\n     */\n    this.onwrite = this.onwrite.bind(this);\n  }\n  /**\n   * Gets the plugin options\n   * @return {ProjextRollupTemplatePluginOptions}\n   */\n  getOptions() {\n    return this._options;\n  }\n  /**\n   * This is called by Rollup after writing the files on the file system. This is where the plugin\n   * parses the template and generates the HTML file.\n   */\n  onwrite() {\n    // Reset the directories cache.\n    this._createdDirectoriesCache = [];\n    // Define the async attribute.\n    const async = this._options.scriptsAsync ? ' async=\"async\"' : '';\n    // Create all the script tags.\n    const scripts = this._options.scripts\n    .map((url) => `<script type=\"text/javascript\" src=\"${url}\"${async}></script>`);\n    // Create all the stylesheet links.\n    const stylesheets = this._options.stylesheets\n    .map((url) => `<link href=\"${url}\" rel=\"stylesheet\" />`);\n    // Define the list for tags that are going to go on the `<head />`.\n    const head = [];\n    // Push the links by default.\n    head.push(...stylesheets);\n    // Define the list for tags that are going to go on the `<body />`.\n    const body = [];\n    /**\n     * If the scripts should go on the `<body />`, push them on its list, otherwise push them to\n     * the list for the `<head />`\n     */\n    if (this._options.scriptsOnBody) {\n      body.push(...scripts);\n    } else {\n      head.push(...scripts);\n    }\n    // Read the contents of the template.\n    let template = fs.readFileSync(this._options.template, 'utf-8');\n    // Parse the template `require` expressions.\n    template = this._parseTemplateExpressions(template);\n    // If there are scripts for the `<head />`, add them to the template.\n    if (head.length) {\n      const headStr = head.join('\\n');\n      template = template.replace(this._expressions.head, `$1${headStr}\\n$1$2`);\n    }\n    // If there are scripts for the `<body />`, add them to the template.\n    if (body.length) {\n      const bodyStr = body.join('\\n');\n      template = template.replace(this._expressions.body, `$1${bodyStr}\\n$1$2`);\n    }\n    // Make sure the output directory exists.\n    fs.ensureDirSync(this._path);\n    // Write the HTML file.\n    fs.writeFileSync(this._options.output, template.trim());\n    // Send the information to the stats callback.\n    this._options.stats(this.name, this._options.output);\n  }\n  /**\n   * Validate the plugin options.\n   * @throws {Error} If no template path was defined.\n   * @throws {Error} If no output path was defined.\n   * @access protected\n   * @ignore\n   */\n  _validateOptions() {\n    if (!this._options.template) {\n      throw new Error(`${this.name}: You need to define the template file`);\n    } else if (!this._options.output) {\n      throw new Error(`${this.name}: You need to define an output file`);\n    }\n  }\n  /**\n   * Parses `require` statements on the template, copy the files and replaces the URLs.\n   * @param {string} template The template code.\n   * @return {string} The updated template.\n   * @access protected\n   * @ignore\n   */\n  _parseTemplateExpressions(template) {\n    // Define the new template.\n    let newTemplate = template;\n    // Get all the `require` expressions information.\n    this._extractPaths(template)\n    // Loop them...\n    .forEach((pathChange) => {\n      const {\n        file,\n        line,\n        info,\n      } = pathChange;\n      // Try to find a URL setting which filter matches a file absolute path.\n      const settings = this._options.urls.find((setting) => setting.filter(file));\n      // If a URL setting was found...\n      if (settings) {\n        // Generate the output path where the file will be copied.\n        const output = ProjextRollupUtils.formatPlaceholder(settings.output, info);\n        // Get the directory where the file will be copied.\n        const outputDir = path.dirname(output);\n        // Generate the new URL for the file.\n        const url = ProjextRollupUtils.formatPlaceholder(settings.url, info);\n        // Generate a RegExp that matches the old statement.\n        const lineRegex = new RegExp(ProjextRollupUtils.escapeRegex(line), 'ig');\n        // if the directory wasn't already created, create it.\n        if (!this._createdDirectoriesCache.includes(outputDir)) {\n          fs.ensureDirSync(outputDir);\n          this._createdDirectoriesCache.push(outputDir);\n        }\n        // Copy the file.\n        fs.copySync(file, output);\n        // Add an stats entry that the file was copied.\n        this._options.stats(this.name, output);\n        // Replace the old statement with the new URL.\n        newTemplate = newTemplate.replace(lineRegex, url);\n      }\n    });\n    // Return the new template\n    return newTemplate;\n  }\n  /**\n   * Extracts `require` statements from a given code.\n   * @param {string} code The code to parse.\n   * @return {Array} A list of dictionaries with information about the `require` statements.\n   * @access protected\n   * @ignore\n   */\n  _extractPaths(code) {\n    // Define the list to return.\n    const result = [];\n    /**\n     * Define a list to save already processed lines, to avoid parsing the same line more than\n     * once.\n     */\n    const saved = [];\n    // Loop all the statements.\n    let match = this._expressions.url.exec(code);\n    while (match) {\n      // Get the line and the URL of the `require`.\n      const [line, url] = match;\n      // If the line wasn't parsed already.\n      if (!saved.includes(line)) {\n        // Flag the line.\n        saved.push(line);\n        // Build the full path for the file.\n        const file = path.join(this._base, url);\n        // If the file exists, push it to the return list.\n        if (fs.pathExistsSync(file)) {\n          result.push({\n            line,\n            file,\n            info: path.parse(file),\n          });\n        }\n      }\n      // Execute the expression again to keep the loop.\n      match = this._expressions.url.exec(code);\n    }\n    // Return the final list.\n    return result;\n  }\n}\n/**\n * Shorthand method to create an instance of {@link ProjextRollupTemplatePlugin}.\n * @param {ProjextRollupTemplatePluginOptions} options\n * The options to customize the plugin behaviour.\n * @param {string} name\n * The name of the plugin's instance.\n * @return {ProjextRollupTemplatePlugin}\n */\nconst template = (options, name) => new ProjextRollupTemplatePlugin(options, name);\n\nmodule.exports = {\n  ProjextRollupTemplatePlugin,\n  template,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/src/plugins/template/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 270,
    "kind": "class",
    "name": "ProjextRollupTemplatePlugin",
    "memberof": "src/plugins/template/index.js",
    "static": true,
    "longname": "src/plugins/template/index.js~ProjextRollupTemplatePlugin",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/plugins/template/index.js",
    "importStyle": "{ProjextRollupTemplatePlugin}",
    "description": "This is a Rollup plugin that generates an HTML file and injects a given list of scripts and\nstylesheets.",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 271,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/plugins/template/index.js~ProjextRollupTemplatePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/template/index.js~ProjextRollupTemplatePlugin#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProjextRollupTemplatePluginOptions"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "The options to customize the plugin behaviour."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'projext-rollup-plugin-template'",
        "defaultRaw": "'projext-rollup-plugin-template'",
        "name": "name",
        "description": "The name of the plugin's instance."
      }
    ]
  },
  {
    "__docId__": 272,
    "kind": "member",
    "name": "_options",
    "memberof": "src/plugins/template/index.js~ProjextRollupTemplatePlugin",
    "static": false,
    "longname": "src/plugins/template/index.js~ProjextRollupTemplatePlugin#_options",
    "access": "protected",
    "description": "The plugin options.",
    "lineNumber": 24,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "ProjextRollupTemplatePluginOptions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 273,
    "kind": "member",
    "name": "name",
    "memberof": "src/plugins/template/index.js~ProjextRollupTemplatePlugin",
    "static": false,
    "longname": "src/plugins/template/index.js~ProjextRollupTemplatePlugin#name",
    "access": "public",
    "description": "The name of the plugin's instance.",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 274,
    "kind": "member",
    "name": "_base",
    "memberof": "src/plugins/template/index.js~ProjextRollupTemplatePlugin",
    "static": false,
    "longname": "src/plugins/template/index.js~ProjextRollupTemplatePlugin#_base",
    "access": "protected",
    "description": "The base directory where the template file is located.",
    "lineNumber": 64,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 275,
    "kind": "member",
    "name": "_path",
    "memberof": "src/plugins/template/index.js~ProjextRollupTemplatePlugin",
    "static": false,
    "longname": "src/plugins/template/index.js~ProjextRollupTemplatePlugin#_path",
    "access": "protected",
    "description": "The base directory where the final file is going to be created.",
    "lineNumber": 71,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 276,
    "kind": "member",
    "name": "_expressions",
    "memberof": "src/plugins/template/index.js~ProjextRollupTemplatePlugin",
    "static": false,
    "longname": "src/plugins/template/index.js~ProjextRollupTemplatePlugin#_expressions",
    "access": "protected",
    "description": "A dictionary of common expressions the plugin uses while parsing files.",
    "lineNumber": 81,
    "ignore": true,
    "properties": [
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "Matches `require` statements."
      },
      {
        "nullable": null,
        "types": [
          "RexExp"
        ],
        "spread": false,
        "optional": false,
        "name": "head",
        "description": "Matches the end of the template `<head />` tag."
      },
      {
        "nullable": null,
        "types": [
          "RegExp"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "Matches the end of the template `<body />` tag."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 277,
    "kind": "member",
    "name": "_createdDirectoriesCache",
    "memberof": "src/plugins/template/index.js~ProjextRollupTemplatePlugin",
    "static": false,
    "longname": "src/plugins/template/index.js~ProjextRollupTemplatePlugin#_createdDirectoriesCache",
    "access": "protected",
    "description": "A list of the directories the plugin created while copying files. This list exists in order\nto prevent the plugin from trying to create the same directory more than once.",
    "lineNumber": 93,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 279,
    "kind": "method",
    "name": "getOptions",
    "memberof": "src/plugins/template/index.js~ProjextRollupTemplatePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/template/index.js~ProjextRollupTemplatePlugin#getOptions",
    "access": "public",
    "description": "Gets the plugin options",
    "lineNumber": 103,
    "return": {
      "nullable": null,
      "types": [
        "ProjextRollupTemplatePluginOptions"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "onwrite",
    "memberof": "src/plugins/template/index.js~ProjextRollupTemplatePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/template/index.js~ProjextRollupTemplatePlugin#onwrite",
    "access": "public",
    "description": "This is called by Rollup after writing the files on the file system. This is where the plugin\nparses the template and generates the HTML file.",
    "lineNumber": 110,
    "params": [],
    "return": null
  },
  {
    "__docId__": 282,
    "kind": "method",
    "name": "_validateOptions",
    "memberof": "src/plugins/template/index.js~ProjextRollupTemplatePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/template/index.js~ProjextRollupTemplatePlugin#_validateOptions",
    "access": "protected",
    "description": "Validate the plugin options.",
    "lineNumber": 164,
    "ignore": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If no template path was defined."
      },
      {
        "types": [
          "Error"
        ],
        "description": "If no output path was defined."
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "_parseTemplateExpressions",
    "memberof": "src/plugins/template/index.js~ProjextRollupTemplatePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/template/index.js~ProjextRollupTemplatePlugin#_parseTemplateExpressions",
    "access": "protected",
    "description": "Parses `require` statements on the template, copy the files and replaces the URLs.",
    "lineNumber": 178,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "template",
        "description": "The template code."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The updated template."
    }
  },
  {
    "__docId__": 284,
    "kind": "method",
    "name": "_extractPaths",
    "memberof": "src/plugins/template/index.js~ProjextRollupTemplatePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/template/index.js~ProjextRollupTemplatePlugin#_extractPaths",
    "access": "protected",
    "description": "Extracts `require` statements from a given code.",
    "lineNumber": 225,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "The code to parse."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A list of dictionaries with information about the `require` statements."
    }
  },
  {
    "__docId__": 285,
    "kind": "function",
    "name": "template",
    "memberof": "src/plugins/template/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugins/template/index.js~template",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/plugins/template/index.js",
    "importStyle": "{template}",
    "description": "Shorthand method to create an instance of {@link ProjextRollupTemplatePlugin}.",
    "lineNumber": 268,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProjextRollupTemplatePluginOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to customize the plugin behaviour."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the plugin's instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ProjextRollupTemplatePlugin"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 286,
    "kind": "file",
    "name": "src/plugins/urls/index.js",
    "content": "const path = require('path');\nconst rollupUtils = require('rollup-pluginutils');\nconst extend = require('extend');\nconst fs = require('fs-extra');\nconst ProjextRollupUtils = require('../utils');\n/**\n * This is a Rollup plugin that find files matching a filter, copy them and replace their code\n * on the bundle with an export with a URL for the file.\n */\nclass ProjextRollupURLsPlugin {\n  /**\n   * @param {ProjextRollupURLsPluginOptions} [options={}]\n   * The options to customize the plugin behaviour.\n   * @param {string} [name='projext-rollup-plugin-urls']\n   * The name of the plugin's instance.\n   */\n  constructor(options, name = 'projext-rollup-plugin-urls') {\n    /**\n     * The plugin options.\n     * @type {ProjextRollupURLsPluginOptions}\n     * @access protected\n     * @ignore\n     */\n    this._options = extend(\n      true,\n      {\n        urls: [],\n        stats: () => {},\n      },\n      options\n    );\n    /**\n     * The name of the plugin's instance.\n     * @type {string}\n     */\n    this.name = name;\n    // Validate the received options before doing anything else.\n    this._validateOptions();\n    /**\n     * Loop all `urls` options and create a filter function with their `include` and `exclude`\n     * properties.\n     */\n    this._options.urls = this._options.urls.map((urlSettings) => Object.assign(\n      urlSettings,\n      {\n        filter: rollupUtils.createFilter(\n          urlSettings.include,\n          urlSettings.exclude\n        ),\n      }\n    ));\n    /**\n     * A list of the files the plugin will copy after Rollup finishes writing the files.\n     * @type {Array}\n     * @access protected\n     * @ignore\n     */\n    this._toCopy = [];\n    /**\n     * @ignore\n     */\n    this.load = this.load.bind(this);\n    /**\n     * @ignore\n     */\n    this.onwrite = this.onwrite.bind(this);\n  }\n  /**\n   * Gets the plugin options\n   * @return {ProjextRollupURLsPluginOptions}\n   */\n  getOptions() {\n    return this._options;\n  }\n  /**\n   * This is called by Rollup when a file is about to be loaded. The method will check if there's\n   * a URL setting for it, replace its content with a default export of the file URL and add the\n   * file to the queue of files that will be copied after Rollup finishes the bundling process.\n   * @param {string} filepath The path to the file to load.\n   * @return {?string} If the file path matches a filter, it will return a new export statement,\n   *                   otherwise, it will return just `null`,\n   */\n  load(filepath) {\n    // Define the variable to return.\n    let result = null;\n    // Try to find a URL setting which filter matches a file path.\n    const settings = this._options.urls.find((setting) => setting.filter(filepath));\n    // If a URL setting was found...\n    if (settings) {\n      // Get the file path info.\n      const info = path.parse(filepath);\n      // Push it to the queue of files that will be copied.\n      this._toCopy.push({\n        // The original file path.\n        from: filepath,\n        // The path to where it will be copied.\n        to: ProjextRollupUtils.formatPlaceholder(settings.output, info),\n      });\n      // Get the URL for the file.\n      const fileURL = ProjextRollupUtils.formatPlaceholder(settings.url, info);\n      // Set to return a export statement with the new file URL.\n      result = `export default '${fileURL}';`;\n    }\n\n    return result;\n  }\n  /**\n   * This is called by Rollup after it finishes writing the files on the file system. The method\n   * will loop the queue and copy all the files that matched a filter during the `load` process.\n   */\n  onwrite() {\n    // Loop all the files.\n    this._toCopy.forEach((toCopy) => {\n      // Make sure the output directory exists.\n      fs.ensureDirSync(path.dirname(toCopy.to));\n      // Copy the file.\n      fs.copySync(toCopy.from, toCopy.to);\n      // Add a stats entry informing the file was copied.\n      this._options.stats(this.name, toCopy.to);\n    });\n    // Reset the queue.\n    this._toCopy = [];\n  }\n  /**\n   * Validates the plugin options.\n   * @throws {Error} If no URLs were defined.\n   * @access protected\n   * @ignore\n   */\n  _validateOptions() {\n    if (!this._options.urls.length) {\n      throw new Error(`${this.name}: You need to define the URLs`);\n    }\n  }\n}\n/**\n * Shorthand method to create an instance of {@link ProjextRollupURLsPlugin}.\n * @param {ProjextRollupURLsPluginOptions} options\n * The options to customize the plugin behaviour.\n * @param {string} name\n * The name of the plugin's instance.\n * @return {ProjextRollupURLsPlugin}\n */\nconst urls = (options, name) => new ProjextRollupURLsPlugin(options, name);\n\nmodule.exports = {\n  ProjextRollupURLsPlugin,\n  urls,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/src/plugins/urls/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 287,
    "kind": "class",
    "name": "ProjextRollupURLsPlugin",
    "memberof": "src/plugins/urls/index.js",
    "static": true,
    "longname": "src/plugins/urls/index.js~ProjextRollupURLsPlugin",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/plugins/urls/index.js",
    "importStyle": "{ProjextRollupURLsPlugin}",
    "description": "This is a Rollup plugin that find files matching a filter, copy them and replace their code\non the bundle with an export with a URL for the file.",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 288,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/plugins/urls/index.js~ProjextRollupURLsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/urls/index.js~ProjextRollupURLsPlugin#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProjextRollupURLsPluginOptions"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "The options to customize the plugin behaviour."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'projext-rollup-plugin-urls'",
        "defaultRaw": "'projext-rollup-plugin-urls'",
        "name": "name",
        "description": "The name of the plugin's instance."
      }
    ]
  },
  {
    "__docId__": 289,
    "kind": "member",
    "name": "_options",
    "memberof": "src/plugins/urls/index.js~ProjextRollupURLsPlugin",
    "static": false,
    "longname": "src/plugins/urls/index.js~ProjextRollupURLsPlugin#_options",
    "access": "protected",
    "description": "The plugin options.",
    "lineNumber": 24,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "ProjextRollupURLsPluginOptions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 290,
    "kind": "member",
    "name": "name",
    "memberof": "src/plugins/urls/index.js~ProjextRollupURLsPlugin",
    "static": false,
    "longname": "src/plugins/urls/index.js~ProjextRollupURLsPlugin#name",
    "access": "public",
    "description": "The name of the plugin's instance.",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 291,
    "kind": "member",
    "name": "_toCopy",
    "memberof": "src/plugins/urls/index.js~ProjextRollupURLsPlugin",
    "static": false,
    "longname": "src/plugins/urls/index.js~ProjextRollupURLsPlugin#_toCopy",
    "access": "protected",
    "description": "A list of the files the plugin will copy after Rollup finishes writing the files.",
    "lineNumber": 58,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "getOptions",
    "memberof": "src/plugins/urls/index.js~ProjextRollupURLsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/urls/index.js~ProjextRollupURLsPlugin#getOptions",
    "access": "public",
    "description": "Gets the plugin options",
    "lineNumber": 72,
    "return": {
      "nullable": null,
      "types": [
        "ProjextRollupURLsPluginOptions"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "load",
    "memberof": "src/plugins/urls/index.js~ProjextRollupURLsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/urls/index.js~ProjextRollupURLsPlugin#load",
    "access": "public",
    "description": "This is called by Rollup when a file is about to be loaded. The method will check if there's\na URL setting for it, replace its content with a default export of the file URL and add the\nfile to the queue of files that will be copied after Rollup finishes the bundling process.",
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "The path to the file to load."
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "If the file path matches a filter, it will return a new export statement,\n                  otherwise, it will return just `null`,"
    }
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "onwrite",
    "memberof": "src/plugins/urls/index.js~ProjextRollupURLsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/urls/index.js~ProjextRollupURLsPlugin#onwrite",
    "access": "public",
    "description": "This is called by Rollup after it finishes writing the files on the file system. The method\nwill loop the queue and copy all the files that matched a filter during the `load` process.",
    "lineNumber": 111,
    "params": [],
    "return": null
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "_validateOptions",
    "memberof": "src/plugins/urls/index.js~ProjextRollupURLsPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/urls/index.js~ProjextRollupURLsPlugin#_validateOptions",
    "access": "protected",
    "description": "Validates the plugin options.",
    "lineNumber": 130,
    "ignore": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If no URLs were defined."
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 299,
    "kind": "function",
    "name": "urls",
    "memberof": "src/plugins/urls/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugins/urls/index.js~urls",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/plugins/urls/index.js",
    "importStyle": "{urls}",
    "description": "Shorthand method to create an instance of {@link ProjextRollupURLsPlugin}.",
    "lineNumber": 144,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProjextRollupURLsPluginOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options to customize the plugin behaviour."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the plugin's instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ProjextRollupURLsPlugin"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 300,
    "kind": "file",
    "name": "src/plugins/utils.js",
    "content": "const { Logger } = require('wootils/node/logger');\n/**\n * This is a set of utility methods the Projext Rollup plugins use.\n */\nclass ProjextRollupUtils {\n  /**\n   * Formats a string path by replacing the `[name]` and `[ext]` placeholders. It uses the\n   * information `path.parse` would return.\n   * @param {string} placeholder The string to format.\n   * @param {Object} info        The result of `path.parse` on a file name.\n   * @param {string} info.name   The name of the file.\n   * @param {string} info.ext    The file extension.\n   * @return {string}\n   * @static\n   */\n  static formatPlaceholder(placeholder, info) {\n    return placeholder\n    .replace(/\\[name\\]/g, info.name)\n    .replace(/\\[ext\\]/g, info.ext.substr(1));\n  }\n  /**\n   * Escape special characters from a string in order to be used on a {@link RegExp}.\n   * @param {string} expression The string to escape.\n   * @return {string}\n   * @static\n   */\n  static escapeRegex(expression) {\n    return expression.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n  }\n  /**\n   * Validate and create a {@link Logger} instance for a plugin.\n   * If the logger the plugin received on its options is an instance of {@link Logger} or has the\n   * same interface, it will _\"accept it\"_ and return it; If the plugin didn't receive a logger,\n   * it will create a new instance of {@link Logger} and return it, but if the received logger\n   * is an invalid object, it will throw an error.\n   * @param {string}  plugin The plugin's instance name.\n   * @param {?Logger} logger The logger the plugin received on its options.\n   * @return {Logger}\n   * @throws {Error} If the logger the plugin received is not an instance of {@link Logger} and it\n   *                 doesn't have the same methods.\n   * @static\n   */\n  static createLogger(plugin, logger) {\n    let result;\n    // If no logger was sent, create a new instance and set it as the return value.\n    if (!logger) {\n      result = new Logger();\n    } else if (logger instanceof Logger) {\n      // If the received logger is an instance of `Logger`, set it as the return value.\n      result = logger;\n    } else {\n      // Validate if there's a `Logger` method the received logger doesn't support.\n      const unsupportedMethod = ['success', 'info', 'warning', 'error']\n      .find((method) => typeof logger[method] !== 'function');\n      /**\n       * If there's a method that doesn't support, throw and error, otherwise, set it to be\n       * returned.\n       */\n      if (unsupportedMethod) {\n        throw new Error(`${plugin}: The logger must be an instance of the wootils's Logger class`);\n      } else {\n        result = logger;\n      }\n    }\n    // Return the logger for the plugin.\n    return result;\n  }\n}\n\nmodule.exports = ProjextRollupUtils;\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/src/plugins/utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 301,
    "kind": "class",
    "name": "ProjextRollupUtils",
    "memberof": "src/plugins/utils.js",
    "static": true,
    "longname": "src/plugins/utils.js~ProjextRollupUtils",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/plugins/utils.js",
    "importStyle": "ProjextRollupUtils",
    "description": "This is a set of utility methods the Projext Rollup plugins use.",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 302,
    "kind": "method",
    "name": "formatPlaceholder",
    "memberof": "src/plugins/utils.js~ProjextRollupUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugins/utils.js~ProjextRollupUtils.formatPlaceholder",
    "access": "public",
    "description": "Formats a string path by replacing the `[name]` and `[ext]` placeholders. It uses the\ninformation `path.parse` would return.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "placeholder",
        "description": "The string to format."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "info",
        "description": "The result of `path.parse` on a file name."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "info.name",
        "description": "The name of the file."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "info.ext",
        "description": "The file extension."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 303,
    "kind": "method",
    "name": "escapeRegex",
    "memberof": "src/plugins/utils.js~ProjextRollupUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugins/utils.js~ProjextRollupUtils.escapeRegex",
    "access": "public",
    "description": "Escape special characters from a string in order to be used on a {@link RegExp}.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "expression",
        "description": "The string to escape."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 304,
    "kind": "method",
    "name": "createLogger",
    "memberof": "src/plugins/utils.js~ProjextRollupUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugins/utils.js~ProjextRollupUtils.createLogger",
    "access": "public",
    "description": "Validate and create a {@link Logger} instance for a plugin.\nIf the logger the plugin received on its options is an instance of {@link Logger} or has the\nsame interface, it will _\"accept it\"_ and return it; If the plugin didn't receive a logger,\nit will create a new instance of {@link Logger} and return it, but if the received logger\nis an invalid object, it will throw an error.",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "plugin",
        "description": "The plugin's instance name."
      },
      {
        "nullable": true,
        "types": [
          "Logger"
        ],
        "spread": false,
        "optional": false,
        "name": "logger",
        "description": "The logger the plugin received on its options."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Logger"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If the logger the plugin received is not an instance of {@link Logger} and it\n                doesn't have the same methods."
      }
    ]
  },
  {
    "__docId__": 305,
    "kind": "file",
    "name": "src/plugins/windowAsGlobal/index.js",
    "content": "/**\n * This is a Rollup plugin that inserts a single line of code on the bundle in order to make\n * `global` an alias for `window`.\n */\nclass ProjextRollupWindowAsGlobalPlugin {\n  /**\n   * This gets called when Rollup starts the bundling process. It returns the code that will make\n   * `global` available as an alias for `window`.\n   * @return {string}\n   */\n  intro() {\n    return 'var global = typeof window !== \\'undefined\\' ? window : {};';\n  }\n}\n/**\n * Shorthand method to create an instance of {@link ProjextRollupWindowAsGlobalPlugin}.\n * @return {ProjextRollupWindowAsGlobalPlugin}\n */\nconst windowAsGlobal = () => new ProjextRollupWindowAsGlobalPlugin();\n\nmodule.exports = {\n  ProjextRollupWindowAsGlobalPlugin,\n  windowAsGlobal,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/src/plugins/windowAsGlobal/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 306,
    "kind": "class",
    "name": "ProjextRollupWindowAsGlobalPlugin",
    "memberof": "src/plugins/windowAsGlobal/index.js",
    "static": true,
    "longname": "src/plugins/windowAsGlobal/index.js~ProjextRollupWindowAsGlobalPlugin",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/plugins/windowAsGlobal/index.js",
    "importStyle": "{ProjextRollupWindowAsGlobalPlugin}",
    "description": "This is a Rollup plugin that inserts a single line of code on the bundle in order to make\n`global` an alias for `window`.",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 307,
    "kind": "method",
    "name": "intro",
    "memberof": "src/plugins/windowAsGlobal/index.js~ProjextRollupWindowAsGlobalPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugins/windowAsGlobal/index.js~ProjextRollupWindowAsGlobalPlugin#intro",
    "access": "public",
    "description": "This gets called when Rollup starts the bundling process. It returns the code that will make\n`global` available as an alias for `window`.",
    "lineNumber": 11,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 308,
    "kind": "function",
    "name": "windowAsGlobal",
    "memberof": "src/plugins/windowAsGlobal/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugins/windowAsGlobal/index.js~windowAsGlobal",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/plugins/windowAsGlobal/index.js",
    "importStyle": "{windowAsGlobal}",
    "description": "Shorthand method to create an instance of {@link ProjextRollupWindowAsGlobalPlugin}.",
    "lineNumber": 19,
    "return": {
      "nullable": null,
      "types": [
        "ProjextRollupWindowAsGlobalPlugin"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 309,
    "kind": "file",
    "name": "src/services/building/configuration.js",
    "content": "const path = require('path');\nconst { provider } = require('jimple');\n/**\n * This service reads the targets information and generates what would be the contents of a\n * Rollup configuration file for them.\n */\nclass RollupConfiguration {\n  /**\n   * Class constructor.\n   * @param {BuildVersion}               buildVersion          To load the project version.\n   * @param {Targets}                    targets               To get the target information.\n   * @param {TargetsFileRules}           targetsFileRules      To get the file rules of the target.\n   * @param {TargetConfigurationCreator} targetConfiguration   To create an overwrite\n   *                                                           configuration for the target.\n   * @param {RollupConfigurations}       rollupConfigurations  A dictionary of configurations\n   *                                                           for target type and build type.\n   */\n  constructor(\n    buildVersion,\n    targets,\n    targetsFileRules,\n    targetConfiguration,\n    rollupConfigurations\n  ) {\n    /**\n     * A local reference for the `buildVersion` service.\n     * @type {BuildVersion}\n     */\n    this.buildVersion = buildVersion;\n    /**\n     * A local reference for the `targets` service.\n     * @type {Targets}\n     */\n    this.targets = targets;\n    /**\n     * A local reference for the `targetsFileRules` service.\n     * @type {TargetsFileRules}\n     */\n    this.targetsFileRules = targetsFileRules;\n    /**\n     * A local reference for the `targetConfiguration` function service.\n     * @type {TargetConfigurationCreator}\n     */\n    this.targetConfiguration = targetConfiguration;\n    /**\n     * A dictionary with the configurations for target type and build type.\n     * @type {RollupConfigurations}\n     */\n    this.rollupConfigurations = rollupConfigurations;\n  }\n  /**\n   * This method generates a complete Rollup configuration for a target.\n   * @param {Target} target    The target information.\n   * @param {string} buildType The intended build type: `production` or `development`.\n   * @return {Object}\n   * @throws {Error} If there's no base configuration for the target type.\n   * @throws {Error} If there's no base configuration for the target type and build type.\n   */\n  getConfig(target, buildType) {\n    const targetType = target.type;\n    if (!this.rollupConfigurations[targetType]) {\n      throw new Error(`There's no configuration for the selected target type: ${targetType}`);\n    } else if (!this.rollupConfigurations[targetType][buildType]) {\n      throw new Error(`There's no configuration for the selected build type: ${buildType}`);\n    }\n\n    const paths = target.output[buildType];\n\n    const input = path.join(target.paths.source, target.entry[buildType]);\n\n    const defaultFormat = target.is.node ? 'cjs' : 'iife';\n    const format = target.library ?\n      this._getLibraryFormat(target.libraryOptions) :\n      defaultFormat;\n\n    const output = {\n      file: `./${target.folders.build}/${paths.js}`,\n      format,\n      sourcemap: !!(target.sourceMap && target.sourceMap[buildType]),\n      name: target.name.replace(/-(\\w)/ig, (match, letter) => letter.toUpperCase()),\n    };\n\n    if (target.library) {\n      output.exports = 'named';\n    }\n\n    const params = {\n      input,\n      output,\n      target,\n      targetRules: this.targetsFileRules.getRulesForTarget(target),\n      definitions: this._getDefinitions(target, buildType),\n      buildType,\n      paths,\n    };\n\n    let config = this.targetConfiguration(\n      `rollup/${target.name}.config.js`,\n      this.rollupConfigurations[targetType][buildType]\n    );\n    config = this.targetConfiguration(\n      `rollup/${target.name}.${buildType}.config.js`,\n      config\n    ).getConfig(params);\n\n    return config;\n  }\n  /**\n   * Get a dictionary of definitions that will be replaced on the generated bundle. This is done\n   * using the `replace` plugin.\n   * @param {Target} target The target information.\n   * @param {string} env    The `NODE_ENV` to define.\n   * @return {Object}\n   * @access protected\n   * @ignore\n   */\n  _getDefinitions(target, env) {\n    const definitions = {\n      'process.env.NODE_ENV': `'${env}'`,\n      [this.buildVersion.getDefinitionVariable()]: JSON.stringify(this.buildVersion.getVersion()),\n    };\n\n    if (\n      target.is.browser &&\n      target.configuration &&\n      target.configuration.enabled\n    ) {\n      definitions[target.configuration.defineOn] = JSON.stringify(\n        this.targets.getBrowserTargetConfiguration(target)\n      );\n    }\n\n    return definitions;\n  }\n  /**\n   * Validate and format a target library format in order to make it work with Rollup supported\n   * types.\n   * @param {ProjectConfigurationNodeTargetTemplateLibraryOptions} options The target library\n   *                                                                       options.\n   * @return {string}\n   * @access protected\n   * @ignore\n   */\n  _getLibraryFormat(options) {\n    const format = options.libraryTarget.toLowerCase();\n    let result;\n    switch (format) {\n    case 'commonjs2':\n      result = 'cjs';\n      break;\n    case 'window':\n    case 'umd':\n    default:\n      result = 'umd';\n    }\n\n    return result;\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `RollupConfiguration` as the `rollupConfiguration` service.\n * @example\n * // Register it on the container\n * container.register(rollupConfiguration);\n * // Getting access to the service instance\n * const rollupConfiguration = container.get('rollupConfiguration');\n * @type {Provider}\n */\nconst rollupConfiguration = provider((app) => {\n  app.set('rollupConfiguration', () => {\n    const rollupConfigurations = {\n      node: {\n        development: app.get('rollupNodeDevelopmentConfiguration'),\n        production: app.get('rollupNodeProductionConfiguration'),\n      },\n      browser: {\n        development: app.get('rollupBrowserDevelopmentConfiguration'),\n        production: app.get('rollupBrowserProductionConfiguration'),\n      },\n    };\n\n    return new RollupConfiguration(\n      app.get('buildVersion'),\n      app.get('targets'),\n      app.get('targetsFileRules'),\n      app.get('targetConfiguration'),\n      rollupConfigurations\n    );\n  });\n});\n\nmodule.exports = {\n  RollupConfiguration,\n  rollupConfiguration,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/src/services/building/configuration.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 310,
    "kind": "class",
    "name": "RollupConfiguration",
    "memberof": "src/services/building/configuration.js",
    "static": true,
    "longname": "src/services/building/configuration.js~RollupConfiguration",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/services/building/configuration.js",
    "importStyle": "{RollupConfiguration}",
    "description": "This service reads the targets information and generates what would be the contents of a\nRollup configuration file for them.",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 311,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/building/configuration.js~RollupConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/configuration.js~RollupConfiguration#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "BuildVersion"
        ],
        "spread": false,
        "optional": false,
        "name": "buildVersion",
        "description": "To load the project version."
      },
      {
        "nullable": null,
        "types": [
          "Targets"
        ],
        "spread": false,
        "optional": false,
        "name": "targets",
        "description": "To get the target information."
      },
      {
        "nullable": null,
        "types": [
          "TargetsFileRules"
        ],
        "spread": false,
        "optional": false,
        "name": "targetsFileRules",
        "description": "To get the file rules of the target."
      },
      {
        "nullable": null,
        "types": [
          "TargetConfigurationCreator"
        ],
        "spread": false,
        "optional": false,
        "name": "targetConfiguration",
        "description": "To create an overwrite\n                                                          configuration for the target."
      },
      {
        "nullable": null,
        "types": [
          "RollupConfigurations"
        ],
        "spread": false,
        "optional": false,
        "name": "rollupConfigurations",
        "description": "A dictionary of configurations\n                                                          for target type and build type."
      }
    ]
  },
  {
    "__docId__": 312,
    "kind": "member",
    "name": "buildVersion",
    "memberof": "src/services/building/configuration.js~RollupConfiguration",
    "static": false,
    "longname": "src/services/building/configuration.js~RollupConfiguration#buildVersion",
    "access": "public",
    "description": "A local reference for the `buildVersion` service.",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "BuildVersion"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 313,
    "kind": "member",
    "name": "targets",
    "memberof": "src/services/building/configuration.js~RollupConfiguration",
    "static": false,
    "longname": "src/services/building/configuration.js~RollupConfiguration#targets",
    "access": "public",
    "description": "A local reference for the `targets` service.",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "Targets"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 314,
    "kind": "member",
    "name": "targetsFileRules",
    "memberof": "src/services/building/configuration.js~RollupConfiguration",
    "static": false,
    "longname": "src/services/building/configuration.js~RollupConfiguration#targetsFileRules",
    "access": "public",
    "description": "A local reference for the `targetsFileRules` service.",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "TargetsFileRules"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 315,
    "kind": "member",
    "name": "targetConfiguration",
    "memberof": "src/services/building/configuration.js~RollupConfiguration",
    "static": false,
    "longname": "src/services/building/configuration.js~RollupConfiguration#targetConfiguration",
    "access": "public",
    "description": "A local reference for the `targetConfiguration` function service.",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "TargetConfigurationCreator"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 316,
    "kind": "member",
    "name": "rollupConfigurations",
    "memberof": "src/services/building/configuration.js~RollupConfiguration",
    "static": false,
    "longname": "src/services/building/configuration.js~RollupConfiguration#rollupConfigurations",
    "access": "public",
    "description": "A dictionary with the configurations for target type and build type.",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "RollupConfigurations"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 317,
    "kind": "method",
    "name": "getConfig",
    "memberof": "src/services/building/configuration.js~RollupConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/configuration.js~RollupConfiguration#getConfig",
    "access": "public",
    "description": "This method generates a complete Rollup configuration for a target.",
    "lineNumber": 59,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "buildType",
        "description": "The intended build type: `production` or `development`."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If there's no base configuration for the target type."
      },
      {
        "types": [
          "Error"
        ],
        "description": "If there's no base configuration for the target type and build type."
      }
    ]
  },
  {
    "__docId__": 318,
    "kind": "method",
    "name": "_getDefinitions",
    "memberof": "src/services/building/configuration.js~RollupConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/configuration.js~RollupConfiguration#_getDefinitions",
    "access": "protected",
    "description": "Get a dictionary of definitions that will be replaced on the generated bundle. This is done\nusing the `replace` plugin.",
    "lineNumber": 117,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "env",
        "description": "The `NODE_ENV` to define."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 319,
    "kind": "method",
    "name": "_getLibraryFormat",
    "memberof": "src/services/building/configuration.js~RollupConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/configuration.js~RollupConfiguration#_getLibraryFormat",
    "access": "protected",
    "description": "Validate and format a target library format in order to make it work with Rollup supported\ntypes.",
    "lineNumber": 144,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProjectConfigurationNodeTargetTemplateLibraryOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The target library\n                                                                      options."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 320,
    "kind": "variable",
    "name": "rollupConfiguration",
    "memberof": "src/services/building/configuration.js",
    "static": true,
    "longname": "src/services/building/configuration.js~rollupConfiguration",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/services/building/configuration.js",
    "importStyle": "{rollupConfiguration}",
    "description": "The service provider that once registered on the app container will set an instance of\n`RollupConfiguration` as the `rollupConfiguration` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(rollupConfiguration);\n// Getting access to the service instance\nconst rollupConfiguration = container.get('rollupConfiguration');"
    ],
    "lineNumber": 170,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 321,
    "kind": "file",
    "name": "src/services/building/engine.js",
    "content": "const path = require('path');\nconst { provider } = require('jimple');\n/**\n * This build engine is in charge of generating the CLI commands and the configuration to bundle\n * a target using Rollup.\n */\nclass RollupBuildEngine {\n  /**\n   * @param {EnvironmentUtils}    environmentUtils    To load environment variables sent by the\n   *                                                  CLI command to the configuration builder\n   *                                                  method.\n   * @param {Targets}             targets             To get a target information.\n   * @param {RollupConfiguration} rollupConfiguration To generate a configuration for a target.\n   * @param {RollupPluginInfo}    rollupPluginInfo    To get the path to the configuration file.\n   */\n  constructor(\n    environmentUtils,\n    targets,\n    rollupConfiguration,\n    rollupPluginInfo\n  ) {\n    /**\n     * A local reference for the `environmentUtils` service.\n     * @type {EnvironmentUtils}\n     */\n    this.environmentUtils = environmentUtils;\n    /**\n     * A local reference for the `targets` service.\n     * @type {Targets}\n     */\n    this.targets = targets;\n    /**\n     * A local reference for the `rollupConfiguration` service.\n     * @type {RollupConfiguration}\n     */\n    this.rollupConfiguration = rollupConfiguration;\n    /**\n     * A local reference for the plugin information.\n     * @type {RollupPluginInfo}\n     */\n    this.rollupPluginInfo = rollupPluginInfo;\n    /**\n     * A dictionary of environment variables the service will include on the CLI command and\n     * that will be retrieved when generating the configuration.\n     * The keys are the purpose and the values the actual names of the variables.\n     * @type {Object}\n     * @property {string} target The name of the target being builded.\n     * @property {string} type   The intended build type: `development` or `production`.\n     * @property {string} run    Whether or not to execute the target. This will be like a fake\n     *                           boolean as the CLI doesn't support boolean variables, so its value\n     *                           will be either `'true'` or `'false'`.\n     * @access protected\n     * @ignore\n     */\n    this._envVars = {\n      target: 'PROJEXT_ROLLUP_TARGET',\n      type: 'PROJEXT_ROLLUP_BUILD_TYPE',\n      run: 'PROJEXT_ROLLUP_RUN',\n    };\n  }\n  /**\n   * Get the CLI build command to bundle a target.\n   * @param  {Target}  target           The target information.\n   * @param  {string}  buildType        The intended build type: `development` or `production`.\n   * @param  {boolean} [forceRun=false] Force the target to run even if the `runOnDevelopment`\n   *                                    setting is `false`.\n   * @return {string}\n   */\n  getBuildCommand(target, buildType, forceRun = false) {\n    const vars = this._getEnvVarsAsString({\n      target: target.name,\n      type: buildType,\n      run: forceRun,\n    });\n\n    const config = path.join(\n      'node_modules',\n      this.rollupPluginInfo.name,\n      this.rollupPluginInfo.configuration\n    );\n\n    const optionsList = [];\n\n    if ((buildType === 'development' && target.runOnDevelopment) || forceRun) {\n      optionsList.push('--watch');\n    }\n\n    const options = optionsList.join(' ');\n\n    return `${vars} rollup --config ${config} ${options}`;\n  }\n  /**\n   * Get a Rollup configuration for a target.\n   * @param {Target} target    The target configuration.\n   * @param {string} buildType The intended build type: `development` or `production`.\n   * @return {object}\n   */\n  getConfiguration(target, buildType) {\n    return this.rollupConfiguration.getConfig(target, buildType);\n  }\n  /**\n   * Get a Rollup configuration by reading the environment variables sent by the CLI command\n   * `getBuildCommand` generates.\n   * @return {object}\n   * @throws {Error} If the environment variables are not present.\n   */\n  getRollupConfig() {\n    const vars = this._getEnvVarsValues();\n    if (!vars.target || !vars.type) {\n      throw new Error('This file can only be run by using the `build` command');\n    }\n\n    const { type, run } = vars;\n    const target = Object.assign({}, this.targets.getTarget(vars.target));\n    if (run === 'true') {\n      target.runOnDevelopment = true;\n    }\n\n    return this.getConfiguration(target, type);\n  }\n  /**\n   * Given a dictionary with the environment variables purpose and values, this method generates\n   * a string with the variables real names and values.\n   * @example\n   * console.log(_getEnvVarsAsString{\n   *   target: 'my-target',\n   *   type: 'development',\n   * });\n   * // will output `PROJEXT_ROLLUP_TARGET=my-target PROJEXT_ROLLUP_BUILD_TYPE=development`\n   * @param {object} values A dictionary with the purpose(alias) of the variables as keys.\n   * @return {string}\n   * @access protected\n   * @ignore\n   */\n  _getEnvVarsAsString(values) {\n    return Object.keys(values)\n    .map((name) => `${this._envVars[name]}=${values[name]}`)\n    .join(' ');\n  }\n  /**\n   * Load the environment variables and returns them on a dictionary.\n   * @return {object} The dictionary will have the purpose(alias) of the variables as keys.\n   * @access protected\n   * @ignore\n   */\n  _getEnvVarsValues() {\n    const vars = {};\n    Object.keys(this._envVars).forEach((name) => {\n      vars[name] = this.environmentUtils.get(this._envVars[name]);\n    });\n\n    return vars;\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `RollupBuildEngine` as the `rollupBuildEngine` service.\n * @example\n * // Register it on the container\n * container.register(rollupBuildEngine);\n * // Getting access to the service instance\n * const rollupBuildEngine = container.get('rollupBuildEngine');\n * @type {Provider}\n */\nconst rollupBuildEngine = provider((app) => {\n  app.set('rollupBuildEngine', () => new RollupBuildEngine(\n    app.get('environmentUtils'),\n    app.get('targets'),\n    app.get('rollupConfiguration'),\n    app.get('rollupPluginInfo')\n  ));\n});\n\nmodule.exports = {\n  RollupBuildEngine,\n  rollupBuildEngine,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/src/services/building/engine.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 322,
    "kind": "class",
    "name": "RollupBuildEngine",
    "memberof": "src/services/building/engine.js",
    "static": true,
    "longname": "src/services/building/engine.js~RollupBuildEngine",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/services/building/engine.js",
    "importStyle": "{RollupBuildEngine}",
    "description": "This build engine is in charge of generating the CLI commands and the configuration to bundle\na target using Rollup.",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 323,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/building/engine.js~RollupBuildEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/engine.js~RollupBuildEngine#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "EnvironmentUtils"
        ],
        "spread": false,
        "optional": false,
        "name": "environmentUtils",
        "description": "To load environment variables sent by the\n                                                 CLI command to the configuration builder\n                                                 method."
      },
      {
        "nullable": null,
        "types": [
          "Targets"
        ],
        "spread": false,
        "optional": false,
        "name": "targets",
        "description": "To get a target information."
      },
      {
        "nullable": null,
        "types": [
          "RollupConfiguration"
        ],
        "spread": false,
        "optional": false,
        "name": "rollupConfiguration",
        "description": "To generate a configuration for a target."
      },
      {
        "nullable": null,
        "types": [
          "RollupPluginInfo"
        ],
        "spread": false,
        "optional": false,
        "name": "rollupPluginInfo",
        "description": "To get the path to the configuration file."
      }
    ]
  },
  {
    "__docId__": 324,
    "kind": "member",
    "name": "environmentUtils",
    "memberof": "src/services/building/engine.js~RollupBuildEngine",
    "static": false,
    "longname": "src/services/building/engine.js~RollupBuildEngine#environmentUtils",
    "access": "public",
    "description": "A local reference for the `environmentUtils` service.",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "EnvironmentUtils"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 325,
    "kind": "member",
    "name": "targets",
    "memberof": "src/services/building/engine.js~RollupBuildEngine",
    "static": false,
    "longname": "src/services/building/engine.js~RollupBuildEngine#targets",
    "access": "public",
    "description": "A local reference for the `targets` service.",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "Targets"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 326,
    "kind": "member",
    "name": "rollupConfiguration",
    "memberof": "src/services/building/engine.js~RollupBuildEngine",
    "static": false,
    "longname": "src/services/building/engine.js~RollupBuildEngine#rollupConfiguration",
    "access": "public",
    "description": "A local reference for the `rollupConfiguration` service.",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "RollupConfiguration"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 327,
    "kind": "member",
    "name": "rollupPluginInfo",
    "memberof": "src/services/building/engine.js~RollupBuildEngine",
    "static": false,
    "longname": "src/services/building/engine.js~RollupBuildEngine#rollupPluginInfo",
    "access": "public",
    "description": "A local reference for the plugin information.",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "RollupPluginInfo"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 328,
    "kind": "member",
    "name": "_envVars",
    "memberof": "src/services/building/engine.js~RollupBuildEngine",
    "static": false,
    "longname": "src/services/building/engine.js~RollupBuildEngine#_envVars",
    "access": "protected",
    "description": "A dictionary of environment variables the service will include on the CLI command and\nthat will be retrieved when generating the configuration.\nThe keys are the purpose and the values the actual names of the variables.",
    "lineNumber": 55,
    "ignore": true,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The name of the target being builded."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The intended build type: `development` or `production`."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "run",
        "description": "Whether or not to execute the target. This will be like a fake\n                          boolean as the CLI doesn't support boolean variables, so its value\n                          will be either `'true'` or `'false'`."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 329,
    "kind": "method",
    "name": "getBuildCommand",
    "memberof": "src/services/building/engine.js~RollupBuildEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/engine.js~RollupBuildEngine#getBuildCommand",
    "access": "public",
    "description": "Get the CLI build command to bundle a target.",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "buildType",
        "description": "The intended build type: `development` or `production`."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "forceRun",
        "description": "Force the target to run even if the `runOnDevelopment`\n                                   setting is `false`."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 330,
    "kind": "method",
    "name": "getConfiguration",
    "memberof": "src/services/building/engine.js~RollupBuildEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/engine.js~RollupBuildEngine#getConfiguration",
    "access": "public",
    "description": "Get a Rollup configuration for a target.",
    "lineNumber": 98,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target configuration."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "buildType",
        "description": "The intended build type: `development` or `production`."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 331,
    "kind": "method",
    "name": "getRollupConfig",
    "memberof": "src/services/building/engine.js~RollupBuildEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/engine.js~RollupBuildEngine#getRollupConfig",
    "access": "public",
    "description": "Get a Rollup configuration by reading the environment variables sent by the CLI command\n`getBuildCommand` generates.",
    "lineNumber": 107,
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If the environment variables are not present."
      }
    ],
    "params": []
  },
  {
    "__docId__": 332,
    "kind": "method",
    "name": "_getEnvVarsAsString",
    "memberof": "src/services/building/engine.js~RollupBuildEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/engine.js~RollupBuildEngine#_getEnvVarsAsString",
    "access": "protected",
    "description": "Given a dictionary with the environment variables purpose and values, this method generates\na string with the variables real names and values.",
    "examples": [
      "console.log(_getEnvVarsAsString{\n  target: 'my-target',\n  type: 'development',\n});\n// will output `PROJEXT_ROLLUP_TARGET=my-target PROJEXT_ROLLUP_BUILD_TYPE=development`"
    ],
    "lineNumber": 135,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "A dictionary with the purpose(alias) of the variables as keys."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 333,
    "kind": "method",
    "name": "_getEnvVarsValues",
    "memberof": "src/services/building/engine.js~RollupBuildEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/engine.js~RollupBuildEngine#_getEnvVarsValues",
    "access": "protected",
    "description": "Load the environment variables and returns them on a dictionary.",
    "lineNumber": 146,
    "ignore": true,
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The dictionary will have the purpose(alias) of the variables as keys."
    },
    "params": []
  },
  {
    "__docId__": 334,
    "kind": "variable",
    "name": "rollupBuildEngine",
    "memberof": "src/services/building/engine.js",
    "static": true,
    "longname": "src/services/building/engine.js~rollupBuildEngine",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/services/building/engine.js",
    "importStyle": "{rollupBuildEngine}",
    "description": "The service provider that once registered on the app container will set an instance of\n`RollupBuildEngine` as the `rollupBuildEngine` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(rollupBuildEngine);\n// Getting access to the service instance\nconst rollupBuildEngine = container.get('rollupBuildEngine');"
    ],
    "lineNumber": 165,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 335,
    "kind": "file",
    "name": "src/services/building/index.js",
    "content": "const { rollupConfiguration } = require('./configuration');\nconst { rollupBuildEngine } = require('./engine');\n\nmodule.exports = {\n  rollupConfiguration,\n  rollupBuildEngine,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/src/services/building/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 336,
    "kind": "file",
    "name": "src/services/configurations/browserDevelopmentConfiguration.js",
    "content": "const resolve = require('rollup-plugin-node-resolve');\nconst babel = require('rollup-plugin-babel');\nconst commonjs = require('rollup-plugin-commonjs');\nconst replace = require('rollup-plugin-replace');\nconst sass = require('rollup-plugin-sass');\nconst html = require('rollup-plugin-html');\nconst json = require('rollup-plugin-json');\n\nconst { provider } = require('jimple');\nconst ConfigurationFile = require('../../abstracts/configurationFile');\nconst {\n  css,\n  urls,\n  stylesheetAssets,\n  template,\n  devServer,\n  stats,\n  stylesheetModulesFixer,\n  windowAsGlobal,\n} = require('../../plugins');\n/**\n * Creates the specifics of a Rollup configuration for a browser target development build.\n * @extends {ConfigurationFile}\n */\nclass RollupBrowserDevelopmentConfiguration extends ConfigurationFile {\n  /**\n  * @param {Events} events\n  * To reduce the configuration.\n  * @param {PathUtils} pathUtils\n  * Required by `ConfigurationFile` in order to build the path to the overwrite file.\n  * @param {RollupPluginSettingsConfiguration} rollupPluginSettingsConfiguration\n  * To get the plugin settings.\n  */\n  constructor(\n    events,\n    pathUtils,\n    rollupPluginSettingsConfiguration\n  ) {\n    super(pathUtils, 'rollup/browser.development.config.js');\n    /**\n     * A local reference for the `events` service.\n     * @type {Events}\n     */\n    this.events = events;\n    /**\n     * A local reference for the `rollupPluginSettingsConfiguration` service.\n     * @type {RollupPluginSettingsConfiguration}\n     */\n    this.rollupPluginSettingsConfiguration = rollupPluginSettingsConfiguration;\n  }\n  /**\n   * Creates the complete configuration for a browser target development build.\n   * This method uses the reducer events `rollup-browser-development-configuration` and\n   * `rollup-browser-configuration`. It sends the configuration, the received `params` and\n   * expects a configuration on return.\n   * @param {RollupConfigurationParams} params A dictionary generated by the top service building\n   *                                           the configuration and that includes things like the\n   *                                           target information, its entry settings, output\n   *                                           paths, etc.\n   * @return {Object}\n   */\n  createConfig(params) {\n    const { input, output, target } = params;\n    // Create the `stats` plugin instance.\n    const statsPlugin = stats({\n      path: `${target.paths.build}/`,\n    });\n    // Get the plugins settings.\n    const pluginSettings = this.rollupPluginSettingsConfiguration.getConfig(\n      params,\n      statsPlugin.add\n    );\n    // Define the plugins list.\n    const plugins = [\n      statsPlugin.reset(),\n      resolve(pluginSettings.resolve),\n      commonjs(pluginSettings.commonjs),\n      babel(pluginSettings.babel),\n      windowAsGlobal(),\n      replace(pluginSettings.replace),\n      sass(pluginSettings.sass),\n      css(pluginSettings.css),\n      stylesheetAssets(pluginSettings.stylesheetAssets),\n      ...(\n        target.css.modules ?\n          [stylesheetModulesFixer(pluginSettings.stylesheetModulesFixer)] :\n          []\n      ),\n      html(pluginSettings.html),\n      json(pluginSettings.json),\n      urls(pluginSettings.urls),\n      template(pluginSettings.template),\n      statsPlugin.log(pluginSettings.statsLog),\n    ];\n    // Get the list of external dependencies.\n    const { external } = pluginSettings.external;\n    /**\n     * Merge the globals settings with any globals that may have been defined on the `output`\n     * object by the parent configuration.\n     */\n    const globals = output.globals ?\n      Object.assign({}, output.globals, pluginSettings.globals) :\n      pluginSettings.globals;\n    // Define the configuration object.\n    const config = {\n      input,\n      output: Object.assign({}, output, { globals }),\n      plugins,\n      external,\n    };\n    // If the target should run, add the watch settings and push the dev server plugin.\n    if (target.runOnDevelopment) {\n      config.watch = pluginSettings.watch;\n      config.plugins.push(devServer(pluginSettings.devServer));\n    }\n    // Return the reduced configuration.\n    return this.events.reduce(\n      [\n        'rollup-browser-development-configuration',\n        'rollup-browser-configuration',\n      ],\n      config,\n      params\n    );\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `RollupBrowserDevelopmentConfiguration` as the `rollupBrowserDevelopmentConfiguration` service.\n * @example\n * // Register it on the container\n * container.register(rollupBrowserDevelopmentConfiguration);\n * // Getting access to the service instance\n * const rollupBrowserDevConfig = container.get('rollupBrowserDevelopmentConfiguration');\n * @type {Provider}\n */\nconst rollupBrowserDevelopmentConfiguration = provider((app) => {\n  app.set('rollupBrowserDevelopmentConfiguration', () => new RollupBrowserDevelopmentConfiguration(\n    app.get('events'),\n    app.get('pathUtils'),\n    app.get('rollupPluginSettingsConfiguration')\n  ));\n});\n\nmodule.exports = {\n  RollupBrowserDevelopmentConfiguration,\n  rollupBrowserDevelopmentConfiguration,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/src/services/configurations/browserDevelopmentConfiguration.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 337,
    "kind": "class",
    "name": "RollupBrowserDevelopmentConfiguration",
    "memberof": "src/services/configurations/browserDevelopmentConfiguration.js",
    "static": true,
    "longname": "src/services/configurations/browserDevelopmentConfiguration.js~RollupBrowserDevelopmentConfiguration",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/services/configurations/browserDevelopmentConfiguration.js",
    "importStyle": "{RollupBrowserDevelopmentConfiguration}",
    "description": "Creates the specifics of a Rollup configuration for a browser target development build.",
    "lineNumber": 25,
    "interface": false,
    "extends": [
      "ConfigurationFile"
    ]
  },
  {
    "__docId__": 338,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/configurations/browserDevelopmentConfiguration.js~RollupBrowserDevelopmentConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/browserDevelopmentConfiguration.js~RollupBrowserDevelopmentConfiguration#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "Events"
        ],
        "spread": false,
        "optional": false,
        "name": "events",
        "description": "To reduce the configuration."
      },
      {
        "nullable": null,
        "types": [
          "PathUtils"
        ],
        "spread": false,
        "optional": false,
        "name": "pathUtils",
        "description": "Required by `ConfigurationFile` in order to build the path to the overwrite file."
      },
      {
        "nullable": null,
        "types": [
          "RollupPluginSettingsConfiguration"
        ],
        "spread": false,
        "optional": false,
        "name": "rollupPluginSettingsConfiguration",
        "description": "To get the plugin settings."
      }
    ]
  },
  {
    "__docId__": 339,
    "kind": "member",
    "name": "events",
    "memberof": "src/services/configurations/browserDevelopmentConfiguration.js~RollupBrowserDevelopmentConfiguration",
    "static": false,
    "longname": "src/services/configurations/browserDevelopmentConfiguration.js~RollupBrowserDevelopmentConfiguration#events",
    "access": "public",
    "description": "A local reference for the `events` service.",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "Events"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 340,
    "kind": "member",
    "name": "rollupPluginSettingsConfiguration",
    "memberof": "src/services/configurations/browserDevelopmentConfiguration.js~RollupBrowserDevelopmentConfiguration",
    "static": false,
    "longname": "src/services/configurations/browserDevelopmentConfiguration.js~RollupBrowserDevelopmentConfiguration#rollupPluginSettingsConfiguration",
    "access": "public",
    "description": "A local reference for the `rollupPluginSettingsConfiguration` service.",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "RollupPluginSettingsConfiguration"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 341,
    "kind": "method",
    "name": "createConfig",
    "memberof": "src/services/configurations/browserDevelopmentConfiguration.js~RollupBrowserDevelopmentConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/browserDevelopmentConfiguration.js~RollupBrowserDevelopmentConfiguration#createConfig",
    "access": "public",
    "description": "Creates the complete configuration for a browser target development build.\nThis method uses the reducer events `rollup-browser-development-configuration` and\n`rollup-browser-configuration`. It sends the configuration, the received `params` and\nexpects a configuration on return.",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "RollupConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                          the configuration and that includes things like the\n                                          target information, its entry settings, output\n                                          paths, etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 342,
    "kind": "variable",
    "name": "rollupBrowserDevelopmentConfiguration",
    "memberof": "src/services/configurations/browserDevelopmentConfiguration.js",
    "static": true,
    "longname": "src/services/configurations/browserDevelopmentConfiguration.js~rollupBrowserDevelopmentConfiguration",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/services/configurations/browserDevelopmentConfiguration.js",
    "importStyle": "{rollupBrowserDevelopmentConfiguration}",
    "description": "The service provider that once registered on the app container will set an instance of\n`RollupBrowserDevelopmentConfiguration` as the `rollupBrowserDevelopmentConfiguration` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(rollupBrowserDevelopmentConfiguration);\n// Getting access to the service instance\nconst rollupBrowserDevConfig = container.get('rollupBrowserDevelopmentConfiguration');"
    ],
    "lineNumber": 137,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 343,
    "kind": "file",
    "name": "src/services/configurations/browserProductionConfiguration.js",
    "content": "const resolve = require('rollup-plugin-node-resolve');\nconst babel = require('rollup-plugin-babel');\nconst commonjs = require('rollup-plugin-commonjs');\nconst replace = require('rollup-plugin-replace');\nconst sass = require('rollup-plugin-sass');\nconst html = require('rollup-plugin-html');\nconst json = require('rollup-plugin-json');\nconst { uglify } = require('rollup-plugin-uglify');\n\nconst { provider } = require('jimple');\nconst ConfigurationFile = require('../../abstracts/configurationFile');\nconst {\n  css,\n  urls,\n  stylesheetAssets,\n  template,\n  compression,\n  stats,\n  stylesheetModulesFixer,\n  windowAsGlobal,\n} = require('../../plugins');\n/**\n * Creates the specifics of a Rollup configuration for a browser target production build.\n * @extends {ConfigurationFile}\n */\nclass RollupBrowserProductionConfiguration extends ConfigurationFile {\n  /**\n  * @param {Events} events\n  * To reduce the configuration.\n  * @param {PathUtils} pathUtils\n  * Required by `ConfigurationFile` in order to build the path to the overwrite file.\n  * @param {RollupPluginSettingsConfiguration} rollupPluginSettingsConfiguration\n  * To get the plugin settings.\n  */\n  constructor(\n    events,\n    pathUtils,\n    rollupPluginSettingsConfiguration\n  ) {\n    super(pathUtils, 'rollup/browser.production.config.js');\n    /**\n     * A local reference for the `events` service.\n     * @type {Events}\n     */\n    this.events = events;\n    /**\n     * A local reference for the `rollupPluginSettingsConfiguration` service.\n     * @type {RollupPluginSettingsConfiguration}\n     */\n    this.rollupPluginSettingsConfiguration = rollupPluginSettingsConfiguration;\n  }\n  /**\n   * Creates the complete configuration for a browser target production build.\n   * This method uses the reducer events `rollup-browser-production-configuration` and\n   * `rollup-browser-configuration`. It sends the configuration, the received `params` and\n   * expects a configuration on return.\n   * @param {RollupConfigurationParams} params A dictionary generated by the top service building\n   *                                           the configuration and that includes things like the\n   *                                           target information, its entry settings, output\n   *                                           paths, etc.\n   * @return {Object}\n   */\n  createConfig(params) {\n    const { target, input, output } = params;\n    // Create the `stats` plugin instance.\n    const statsPlugin = stats({\n      path: `${target.paths.build}/`,\n    });\n    // Get the plugins settings.\n    const pluginSettings = this.rollupPluginSettingsConfiguration.getConfig(\n      params,\n      statsPlugin.add\n    );\n    // Define the plugins list.\n    const plugins = [\n      statsPlugin.reset(),\n      resolve(pluginSettings.resolve),\n      commonjs(pluginSettings.commonjs),\n      babel(pluginSettings.babel),\n      windowAsGlobal(),\n      replace(pluginSettings.replace),\n      sass(pluginSettings.sass),\n      css(pluginSettings.css),\n      stylesheetAssets(pluginSettings.stylesheetAssets),\n      ...(\n        target.css.modules ?\n          [stylesheetModulesFixer(pluginSettings.stylesheetModulesFixer)] :\n          []\n      ),\n      html(pluginSettings.html),\n      json(pluginSettings.json),\n      urls(pluginSettings.urls),\n      uglify(pluginSettings.uglify),\n    ];\n    // If the target is not a library, push the template plugin for the HTML file.\n    if (!target.library) {\n      plugins.push(template(pluginSettings.template));\n    }\n    /**\n     * If the target is not a library or has the compression setting enabled, push the plugin\n     * to compress the assets using Gzip.\n     */\n    if (!target.library || target.libraryOptions.compress) {\n      plugins.push(compression(pluginSettings.compression));\n    }\n    // Finally, push the `stats` _\"sub plugin\"_ to log the report table.\n    plugins.push(statsPlugin.log(pluginSettings.statsLog));\n    // Get the list of external dependencies.\n    const { external } = pluginSettings.external;\n    /**\n     * Merge the globals settings with any globals that may have been defined on the `output`\n     * object by the parent configuration.\n     */\n    const globals = output.globals ?\n      Object.assign({}, output.globals, pluginSettings.globals) :\n      pluginSettings.globals;\n    // Define the configuration object.\n    const config = {\n      input,\n      output: Object.assign({}, output, { globals }),\n      plugins,\n      external,\n    };\n    // Return the reduced configuration.\n    return this.events.reduce(\n      [\n        'rollup-browser-production-configuration',\n        'rollup-browser-configuration',\n      ],\n      config,\n      params\n    );\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `RollupBrowserProductionConfiguration` as the `rollupBrowserProductionConfiguration` service.\n * @example\n * // Register it on the container\n * container.register(rollupBrowserProductionConfiguration);\n * // Getting access to the service instance\n * const rollupBrowserProdConfig = container.get('rollupBrowserProductionConfiguration');\n * @type {Provider}\n */\nconst rollupBrowserProductionConfiguration = provider((app) => {\n  app.set('rollupBrowserProductionConfiguration', () => new RollupBrowserProductionConfiguration(\n    app.get('events'),\n    app.get('pathUtils'),\n    app.get('rollupPluginSettingsConfiguration')\n  ));\n});\n\nmodule.exports = {\n  RollupBrowserProductionConfiguration,\n  rollupBrowserProductionConfiguration,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/src/services/configurations/browserProductionConfiguration.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 344,
    "kind": "class",
    "name": "RollupBrowserProductionConfiguration",
    "memberof": "src/services/configurations/browserProductionConfiguration.js",
    "static": true,
    "longname": "src/services/configurations/browserProductionConfiguration.js~RollupBrowserProductionConfiguration",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/services/configurations/browserProductionConfiguration.js",
    "importStyle": "{RollupBrowserProductionConfiguration}",
    "description": "Creates the specifics of a Rollup configuration for a browser target production build.",
    "lineNumber": 26,
    "interface": false,
    "extends": [
      "ConfigurationFile"
    ]
  },
  {
    "__docId__": 345,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/configurations/browserProductionConfiguration.js~RollupBrowserProductionConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/browserProductionConfiguration.js~RollupBrowserProductionConfiguration#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "Events"
        ],
        "spread": false,
        "optional": false,
        "name": "events",
        "description": "To reduce the configuration."
      },
      {
        "nullable": null,
        "types": [
          "PathUtils"
        ],
        "spread": false,
        "optional": false,
        "name": "pathUtils",
        "description": "Required by `ConfigurationFile` in order to build the path to the overwrite file."
      },
      {
        "nullable": null,
        "types": [
          "RollupPluginSettingsConfiguration"
        ],
        "spread": false,
        "optional": false,
        "name": "rollupPluginSettingsConfiguration",
        "description": "To get the plugin settings."
      }
    ]
  },
  {
    "__docId__": 346,
    "kind": "member",
    "name": "events",
    "memberof": "src/services/configurations/browserProductionConfiguration.js~RollupBrowserProductionConfiguration",
    "static": false,
    "longname": "src/services/configurations/browserProductionConfiguration.js~RollupBrowserProductionConfiguration#events",
    "access": "public",
    "description": "A local reference for the `events` service.",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "Events"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 347,
    "kind": "member",
    "name": "rollupPluginSettingsConfiguration",
    "memberof": "src/services/configurations/browserProductionConfiguration.js~RollupBrowserProductionConfiguration",
    "static": false,
    "longname": "src/services/configurations/browserProductionConfiguration.js~RollupBrowserProductionConfiguration#rollupPluginSettingsConfiguration",
    "access": "public",
    "description": "A local reference for the `rollupPluginSettingsConfiguration` service.",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "RollupPluginSettingsConfiguration"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 348,
    "kind": "method",
    "name": "createConfig",
    "memberof": "src/services/configurations/browserProductionConfiguration.js~RollupBrowserProductionConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/browserProductionConfiguration.js~RollupBrowserProductionConfiguration#createConfig",
    "access": "public",
    "description": "Creates the complete configuration for a browser target production build.\nThis method uses the reducer events `rollup-browser-production-configuration` and\n`rollup-browser-configuration`. It sends the configuration, the received `params` and\nexpects a configuration on return.",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "RollupConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                          the configuration and that includes things like the\n                                          target information, its entry settings, output\n                                          paths, etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 349,
    "kind": "variable",
    "name": "rollupBrowserProductionConfiguration",
    "memberof": "src/services/configurations/browserProductionConfiguration.js",
    "static": true,
    "longname": "src/services/configurations/browserProductionConfiguration.js~rollupBrowserProductionConfiguration",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/services/configurations/browserProductionConfiguration.js",
    "importStyle": "{rollupBrowserProductionConfiguration}",
    "description": "The service provider that once registered on the app container will set an instance of\n`RollupBrowserProductionConfiguration` as the `rollupBrowserProductionConfiguration` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(rollupBrowserProductionConfiguration);\n// Getting access to the service instance\nconst rollupBrowserProdConfig = container.get('rollupBrowserProductionConfiguration');"
    ],
    "lineNumber": 145,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 350,
    "kind": "file",
    "name": "src/services/configurations/index.js",
    "content": "const {\n  rollupBrowserDevelopmentConfiguration,\n} = require('./browserDevelopmentConfiguration');\n\nconst {\n  rollupBrowserProductionConfiguration,\n} = require('./browserProductionConfiguration');\n\nconst {\n  rollupNodeDevelopmentConfiguration,\n} = require('./nodeDevelopmentConfiguration');\n\nconst {\n  rollupNodeProductionConfiguration,\n} = require('./nodeProductionConfiguration');\n\nconst {\n  rollupPluginSettingsConfiguration,\n} = require('./pluginsConfiguration');\n\nmodule.exports = {\n  rollupBrowserDevelopmentConfiguration,\n  rollupBrowserProductionConfiguration,\n  rollupNodeDevelopmentConfiguration,\n  rollupNodeProductionConfiguration,\n  rollupPluginSettingsConfiguration,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/src/services/configurations/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 351,
    "kind": "file",
    "name": "src/services/configurations/nodeDevelopmentConfiguration.js",
    "content": "const resolve = require('rollup-plugin-node-resolve');\nconst babel = require('rollup-plugin-babel');\nconst commonjs = require('rollup-plugin-commonjs');\nconst replace = require('rollup-plugin-replace');\nconst sass = require('rollup-plugin-sass');\nconst html = require('rollup-plugin-html');\nconst json = require('rollup-plugin-json');\n\nconst { provider } = require('jimple');\nconst ConfigurationFile = require('../../abstracts/configurationFile');\nconst {\n  css,\n  urls,\n  stylesheetAssets,\n  nodeRunner,\n  stats,\n} = require('../../plugins');\n/**\n * Creates the specifics of a Rollup configuration for a Node target development build.\n * @extends {ConfigurationFile}\n */\nclass RollupNodeDevelopmentConfiguration extends ConfigurationFile {\n  /**\n  * @param {Events} events\n  * To reduce the configuration.\n  * @param {PathUtils} pathUtils\n  * Required by `ConfigurationFile` in order to build the path to the overwrite file.\n  * @param {RollupPluginSettingsConfiguration} rollupPluginSettingsConfiguration\n  * To get the plugin settings.\n  */\n  constructor(\n    events,\n    pathUtils,\n    rollupPluginSettingsConfiguration\n  ) {\n    super(pathUtils, 'rollup/node.development.config.js');\n    /**\n     * A local reference for the `events` service.\n     * @type {Events}\n     */\n    this.events = events;\n    /**\n     * A local reference for the `rollupPluginSettingsConfiguration` service.\n     * @type {RollupPluginSettingsConfiguration}\n     */\n    this.rollupPluginSettingsConfiguration = rollupPluginSettingsConfiguration;\n  }\n  /**\n   * Creates the complete configuration for a Node target development build.\n   * This method uses the reducer events `rollup-node-development-configuration` and\n   * `rollup-node-configuration`. It sends the configuration, the received `params` and\n   * expects a configuration on return.\n   * @param {RollupConfigurationParams} params A dictionary generated by the top service building\n   *                                           the configuration and that includes things like the\n   *                                           target information, its entry settings, output\n   *                                           paths, etc.\n   * @return {Object}\n   */\n  createConfig(params) {\n    const { input, output, target } = params;\n    // Create the `stats` plugin instance.\n    const statsPlugin = stats({\n      path: `${target.paths.build}/`,\n    });\n    // Get the plugins settings.\n    const pluginSettings = this.rollupPluginSettingsConfiguration.getConfig(\n      params,\n      statsPlugin.add\n    );\n    // Define the plugins list.\n    const plugins = [\n      statsPlugin.reset(),\n      resolve(pluginSettings.resolve),\n      commonjs(pluginSettings.commonjs),\n      babel(pluginSettings.babel),\n      replace(pluginSettings.replace),\n      sass(pluginSettings.sass),\n      css(pluginSettings.css),\n      stylesheetAssets.helper(pluginSettings.stylesheetAssetsHelper),\n      stylesheetAssets(pluginSettings.stylesheetAssets),\n      html(pluginSettings.html),\n      json(pluginSettings.json),\n      urls(pluginSettings.urls),\n      statsPlugin.log(pluginSettings.statsLog),\n    ];\n    // Get the list of external dependencies.\n    const { external } = pluginSettings.external;\n    /**\n     * Merge the globals settings with any globals that may have been defined on the `output`\n     * object by the parent configuration.\n     */\n    const globals = output.globals ?\n      Object.assign({}, output.globals, pluginSettings.globals) :\n      pluginSettings.globals;\n    // Define the configuration object.\n    const config = {\n      input,\n      output: Object.assign({}, output, { globals }),\n      plugins,\n      external,\n    };\n    // If the target should run, add the watch settings and push the runner plugin.\n    if (target.runOnDevelopment) {\n      config.watch = pluginSettings.watch;\n      config.plugins.push(nodeRunner(pluginSettings.nodeRunner));\n    }\n    // Return the reduced configuration.\n    return this.events.reduce(\n      [\n        'rollup-node-development-configuration',\n        'rollup-node-configuration',\n      ],\n      config,\n      params\n    );\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `RollupNodeDevelopmentConfiguration` as the `rollupNodeDevelopmentConfiguration` service.\n * @example\n * // Register it on the container\n * container.register(rollupNodeDevelopmentConfiguration);\n * // Getting access to the service instance\n * const rollupNodeDevConfig = container.get('rollupNodeDevelopmentConfiguration');\n * @type {Provider}\n */\nconst rollupNodeDevelopmentConfiguration = provider((app) => {\n  app.set('rollupNodeDevelopmentConfiguration', () => new RollupNodeDevelopmentConfiguration(\n    app.get('events'),\n    app.get('pathUtils'),\n    app.get('rollupPluginSettingsConfiguration')\n  ));\n});\n\nmodule.exports = {\n  RollupNodeDevelopmentConfiguration,\n  rollupNodeDevelopmentConfiguration,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/src/services/configurations/nodeDevelopmentConfiguration.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 352,
    "kind": "class",
    "name": "RollupNodeDevelopmentConfiguration",
    "memberof": "src/services/configurations/nodeDevelopmentConfiguration.js",
    "static": true,
    "longname": "src/services/configurations/nodeDevelopmentConfiguration.js~RollupNodeDevelopmentConfiguration",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/services/configurations/nodeDevelopmentConfiguration.js",
    "importStyle": "{RollupNodeDevelopmentConfiguration}",
    "description": "Creates the specifics of a Rollup configuration for a Node target development build.",
    "lineNumber": 22,
    "interface": false,
    "extends": [
      "ConfigurationFile"
    ]
  },
  {
    "__docId__": 353,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/configurations/nodeDevelopmentConfiguration.js~RollupNodeDevelopmentConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/nodeDevelopmentConfiguration.js~RollupNodeDevelopmentConfiguration#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "Events"
        ],
        "spread": false,
        "optional": false,
        "name": "events",
        "description": "To reduce the configuration."
      },
      {
        "nullable": null,
        "types": [
          "PathUtils"
        ],
        "spread": false,
        "optional": false,
        "name": "pathUtils",
        "description": "Required by `ConfigurationFile` in order to build the path to the overwrite file."
      },
      {
        "nullable": null,
        "types": [
          "RollupPluginSettingsConfiguration"
        ],
        "spread": false,
        "optional": false,
        "name": "rollupPluginSettingsConfiguration",
        "description": "To get the plugin settings."
      }
    ]
  },
  {
    "__docId__": 354,
    "kind": "member",
    "name": "events",
    "memberof": "src/services/configurations/nodeDevelopmentConfiguration.js~RollupNodeDevelopmentConfiguration",
    "static": false,
    "longname": "src/services/configurations/nodeDevelopmentConfiguration.js~RollupNodeDevelopmentConfiguration#events",
    "access": "public",
    "description": "A local reference for the `events` service.",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "Events"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 355,
    "kind": "member",
    "name": "rollupPluginSettingsConfiguration",
    "memberof": "src/services/configurations/nodeDevelopmentConfiguration.js~RollupNodeDevelopmentConfiguration",
    "static": false,
    "longname": "src/services/configurations/nodeDevelopmentConfiguration.js~RollupNodeDevelopmentConfiguration#rollupPluginSettingsConfiguration",
    "access": "public",
    "description": "A local reference for the `rollupPluginSettingsConfiguration` service.",
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "RollupPluginSettingsConfiguration"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 356,
    "kind": "method",
    "name": "createConfig",
    "memberof": "src/services/configurations/nodeDevelopmentConfiguration.js~RollupNodeDevelopmentConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/nodeDevelopmentConfiguration.js~RollupNodeDevelopmentConfiguration#createConfig",
    "access": "public",
    "description": "Creates the complete configuration for a Node target development build.\nThis method uses the reducer events `rollup-node-development-configuration` and\n`rollup-node-configuration`. It sends the configuration, the received `params` and\nexpects a configuration on return.",
    "lineNumber": 59,
    "params": [
      {
        "nullable": null,
        "types": [
          "RollupConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                          the configuration and that includes things like the\n                                          target information, its entry settings, output\n                                          paths, etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 357,
    "kind": "variable",
    "name": "rollupNodeDevelopmentConfiguration",
    "memberof": "src/services/configurations/nodeDevelopmentConfiguration.js",
    "static": true,
    "longname": "src/services/configurations/nodeDevelopmentConfiguration.js~rollupNodeDevelopmentConfiguration",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/services/configurations/nodeDevelopmentConfiguration.js",
    "importStyle": "{rollupNodeDevelopmentConfiguration}",
    "description": "The service provider that once registered on the app container will set an instance of\n`RollupNodeDevelopmentConfiguration` as the `rollupNodeDevelopmentConfiguration` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(rollupNodeDevelopmentConfiguration);\n// Getting access to the service instance\nconst rollupNodeDevConfig = container.get('rollupNodeDevelopmentConfiguration');"
    ],
    "lineNumber": 128,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 358,
    "kind": "file",
    "name": "src/services/configurations/nodeProductionConfiguration.js",
    "content": "const resolve = require('rollup-plugin-node-resolve');\nconst babel = require('rollup-plugin-babel');\nconst commonjs = require('rollup-plugin-commonjs');\nconst replace = require('rollup-plugin-replace');\nconst sass = require('rollup-plugin-sass');\nconst html = require('rollup-plugin-html');\nconst json = require('rollup-plugin-json');\n\nconst { provider } = require('jimple');\nconst ConfigurationFile = require('../../abstracts/configurationFile');\nconst {\n  css,\n  urls,\n  stats,\n  stylesheetAssets,\n} = require('../../plugins');\n/**\n * Creates the specifics of a Rollup configuration for a Node target production build.\n * @extends {ConfigurationFile}\n */\nclass RollupNodeProductionConfiguration extends ConfigurationFile {\n  /**\n  * @param {Events} events\n  * To reduce the configuration.\n  * @param {PathUtils} pathUtils\n  * Required by `ConfigurationFile` in order to build the path to the overwrite file.\n  * @param {RollupPluginSettingsConfiguration} rollupPluginSettingsConfiguration\n  * To get the plugin settings.\n  */\n  constructor(\n    events,\n    pathUtils,\n    rollupPluginSettingsConfiguration\n  ) {\n    super(pathUtils, 'rollup/node.production.config.js');\n    /**\n     * A local reference for the `events` service.\n     * @type {Events}\n     */\n    this.events = events;\n    /**\n     * A local reference for the `rollupPluginSettingsConfiguration` service.\n     * @type {RollupPluginSettingsConfiguration}\n     */\n    this.rollupPluginSettingsConfiguration = rollupPluginSettingsConfiguration;\n  }\n  /**\n   * Creates the complete configuration for a Node target production build.\n   * This method uses the reducer events `rollup-node-production-configuration` and\n   * `rollup-node-configuration`. It sends the configuration, the received `params` and\n   * expects a configuration on return.\n   * @param {RollupConfigurationParams} params A dictionary generated by the top service building\n   *                                           the configuration and that includes things like the\n   *                                           target information, its entry settings, output\n   *                                           paths, etc.\n   * @return {Object}\n   */\n  createConfig(params) {\n    const { input, output, target } = params;\n    // Create the `stats` plugin instance.\n    const statsPlugin = stats({\n      path: `${target.paths.build}/`,\n    });\n    // Get the plugins settings.\n    const pluginSettings = this.rollupPluginSettingsConfiguration.getConfig(\n      params,\n      statsPlugin.add\n    );\n    // Define the plugins list.\n    const plugins = [\n      statsPlugin.reset(),\n      resolve(pluginSettings.resolve),\n      commonjs(pluginSettings.commonjs),\n      babel(pluginSettings.babel),\n      replace(pluginSettings.replace),\n      sass(pluginSettings.sass),\n      css(pluginSettings.css),\n      stylesheetAssets.helper(pluginSettings.stylesheetAssetsHelper),\n      stylesheetAssets(pluginSettings.stylesheetAssets),\n      html(pluginSettings.html),\n      json(pluginSettings.json),\n      urls(pluginSettings.urls),\n      statsPlugin.log(pluginSettings.statsLog),\n    ];\n    // Get the list of external dependencies.\n    const { external } = pluginSettings.external;\n    /**\n     * Merge the globals settings with any globals that may have been defined on the `output`\n     * object by the parent configuration.\n     */\n    const globals = output.globals ?\n      Object.assign({}, output.globals, pluginSettings.globals) :\n      pluginSettings.globals;\n    // Define the configuration object.\n    const config = {\n      input,\n      output: Object.assign({}, output, { globals }),\n      plugins,\n      external,\n    };\n    // Return the reduced configuration.\n    return this.events.reduce(\n      [\n        'rollup-node-production-configuration',\n        'rollup-node-configuration',\n      ],\n      config,\n      params\n    );\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `RollupNodeProductionConfiguration` as the `rollupNodeProductionConfiguration` service.\n * @example\n * // Register it on the container\n * container.register(rollupNodeProductionConfiguration);\n * // Getting access to the service instance\n * const rollupNodeProdConfig = container.get('rollupNodeProductionConfiguration');\n * @type {Provider}\n */\nconst rollupNodeProductionConfiguration = provider((app) => {\n  app.set('rollupNodeProductionConfiguration', () => new RollupNodeProductionConfiguration(\n    app.get('events'),\n    app.get('pathUtils'),\n    app.get('rollupPluginSettingsConfiguration')\n  ));\n});\n\nmodule.exports = {\n  RollupNodeProductionConfiguration,\n  rollupNodeProductionConfiguration,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/src/services/configurations/nodeProductionConfiguration.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 359,
    "kind": "class",
    "name": "RollupNodeProductionConfiguration",
    "memberof": "src/services/configurations/nodeProductionConfiguration.js",
    "static": true,
    "longname": "src/services/configurations/nodeProductionConfiguration.js~RollupNodeProductionConfiguration",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/services/configurations/nodeProductionConfiguration.js",
    "importStyle": "{RollupNodeProductionConfiguration}",
    "description": "Creates the specifics of a Rollup configuration for a Node target production build.",
    "lineNumber": 21,
    "interface": false,
    "extends": [
      "ConfigurationFile"
    ]
  },
  {
    "__docId__": 360,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/configurations/nodeProductionConfiguration.js~RollupNodeProductionConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/nodeProductionConfiguration.js~RollupNodeProductionConfiguration#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "Events"
        ],
        "spread": false,
        "optional": false,
        "name": "events",
        "description": "To reduce the configuration."
      },
      {
        "nullable": null,
        "types": [
          "PathUtils"
        ],
        "spread": false,
        "optional": false,
        "name": "pathUtils",
        "description": "Required by `ConfigurationFile` in order to build the path to the overwrite file."
      },
      {
        "nullable": null,
        "types": [
          "RollupPluginSettingsConfiguration"
        ],
        "spread": false,
        "optional": false,
        "name": "rollupPluginSettingsConfiguration",
        "description": "To get the plugin settings."
      }
    ]
  },
  {
    "__docId__": 361,
    "kind": "member",
    "name": "events",
    "memberof": "src/services/configurations/nodeProductionConfiguration.js~RollupNodeProductionConfiguration",
    "static": false,
    "longname": "src/services/configurations/nodeProductionConfiguration.js~RollupNodeProductionConfiguration#events",
    "access": "public",
    "description": "A local reference for the `events` service.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "Events"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 362,
    "kind": "member",
    "name": "rollupPluginSettingsConfiguration",
    "memberof": "src/services/configurations/nodeProductionConfiguration.js~RollupNodeProductionConfiguration",
    "static": false,
    "longname": "src/services/configurations/nodeProductionConfiguration.js~RollupNodeProductionConfiguration#rollupPluginSettingsConfiguration",
    "access": "public",
    "description": "A local reference for the `rollupPluginSettingsConfiguration` service.",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "RollupPluginSettingsConfiguration"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 363,
    "kind": "method",
    "name": "createConfig",
    "memberof": "src/services/configurations/nodeProductionConfiguration.js~RollupNodeProductionConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/nodeProductionConfiguration.js~RollupNodeProductionConfiguration#createConfig",
    "access": "public",
    "description": "Creates the complete configuration for a Node target production build.\nThis method uses the reducer events `rollup-node-production-configuration` and\n`rollup-node-configuration`. It sends the configuration, the received `params` and\nexpects a configuration on return.",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "RollupConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                          the configuration and that includes things like the\n                                          target information, its entry settings, output\n                                          paths, etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 364,
    "kind": "variable",
    "name": "rollupNodeProductionConfiguration",
    "memberof": "src/services/configurations/nodeProductionConfiguration.js",
    "static": true,
    "longname": "src/services/configurations/nodeProductionConfiguration.js~rollupNodeProductionConfiguration",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/services/configurations/nodeProductionConfiguration.js",
    "importStyle": "{rollupNodeProductionConfiguration}",
    "description": "The service provider that once registered on the app container will set an instance of\n`RollupNodeProductionConfiguration` as the `rollupNodeProductionConfiguration` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(rollupNodeProductionConfiguration);\n// Getting access to the service instance\nconst rollupNodeProdConfig = container.get('rollupNodeProductionConfiguration');"
    ],
    "lineNumber": 122,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 365,
    "kind": "file",
    "name": "src/services/configurations/pluginsConfiguration.js",
    "content": "const fs = require('fs-extra');\nconst postcss = require('postcss');\nconst postcssModules = require('postcss-modules');\nconst builtinModules = require('builtin-modules');\nconst { provider } = require('jimple');\nconst ConfigurationFile = require('../../abstracts/configurationFile');\n/**\n * This service creates a configuration with all the settings for the plugins this build engine\n * uses.\n * @extends {ConfigurationFile}\n */\nclass RollupPluginSettingsConfiguration extends ConfigurationFile {\n  /**\n   * @param {Logger}             appLogger          To send to the plugins that support a logger.\n   * @param {BabelConfiguration} babelConfiguration To get the target Babel configuration.\n   * @param {BabelHelper}        babelHelper        To disable the `modules` setting of the Babel\n   *                                                env preset for a target, as Rollup requires.\n   * @param {Events}             events             To reduce the settings.\n   * @param {Object}             packageInfo        To get the dependencies and define them as\n   *                                                externals for Node targets.\n   * @param {PathUtils}          pathUtils          Require by `ConfigurationFile` in order to\n   *                                                build the path to the overwrite file. It's\n   *                                                also used to build the paths of SSL\n   *                                                certificates the dev server plugin may use.\n   * @param {Object}             rollupPluginInfo   To get the name of the _\"sub packages\"_ the\n   *                                                plugin provides and that should be marked as\n   *                                                external.\n   * @param {TargetsHTML}        targetsHTML        To get the path to a target HTML template\n   *                                                file.\n   */\n  constructor(\n    appLogger,\n    babelConfiguration,\n    babelHelper,\n    events,\n    packageInfo,\n    pathUtils,\n    rollupPluginInfo,\n    targetsHTML\n  ) {\n    super(pathUtils, 'rollup/plugins.config.js');\n    /**\n     * A local reference for the `appLogger` service.\n     * @type {Logger}\n     */\n    this.appLogger = appLogger;\n    /**\n     * A local reference for the `babelConfiguration` service.\n     * @type {BabelConfiguration}\n     */\n    this.babelConfiguration = babelConfiguration;\n    /**\n     * A local reference for the `babelHelper` service.\n     * @type {BabelHelper}\n     */\n    this.babelHelper = babelHelper;\n    /**\n     * A local reference for the `events` service.\n     * @type {Events}\n     */\n    this.events = events;\n    /**\n     * The project `package.json` information.\n     * @type {Object}\n     */\n    this.packageInfo = packageInfo;\n    /**\n     * A local reference for the plugin information.\n     * @type {RollupPluginInfo}\n     */\n    this.rollupPluginInfo = rollupPluginInfo;\n    /**\n     * A local reference for the `targetsHTML` service.\n     * @type {TargetsHTML}\n     */\n    this.targetsHTML = targetsHTML;\n  }\n  /**\n   * Creates the plugins settings for the required target.\n   * This method uses the reducer events `rollup-plugin-settings-configuration-for-node` or\n   * `rollup-plugin-settings-configuration-for-browser`, depending on the target type, and then\n   * `rollup-plugin-settings-configuration`. The event receives the configuration object, the\n   * `params` and it expects an updated configuration object on return.\n   * @param {RollupConfigurationParams} params A dictionary generated by the top service building\n   *                                           the configuration and that includes things like the\n   *                                           target information, its entry settings, output\n   *                                           paths, etc.\n   * @param {Function}                  stats  A function to send to the plugins that support\n   *                                           logging stats entries.\n   * @return {Object}\n   */\n  createConfig(params, stats) {\n    // Get the external settings.\n    const external = this._getExternalSettings(params);\n    // Define the basic settings.\n    const settings = {\n      external,\n      globals: this._getGlobalVariablesSettings(params, external.external),\n      resolve: this._getResolveSettings(params, stats),\n      replace: this._getReplaceSettings(params, stats),\n      babel: this._getBabelSettings(params, stats),\n      commonjs: this._getCommonJSSettings(params, stats),\n      sass: this._getSASSSettings(params, stats),\n      css: this._getCSSSettings(params, stats),\n      stylesheetAssets: this._getStyleheetAssetsSettings(params, stats),\n      stylesheetModulesFixer: this._getStylesheetModulesFixerSettings(params, stats),\n      html: this._getHTMLSettings(params, stats),\n      json: this._getJSONSettings(params, stats),\n      urls: this._getURLsSettings(params, stats),\n      watch: this._getWatchSettings(params, stats),\n      uglify: this._getUglifySettings(params, stats),\n      compression: this._getCompressionSettings(params, stats),\n      statsLog: this._getStatsLogSettings(params),\n    };\n\n    let eventName;\n    // Based on the target type, define the event reducer name and add specific settings.\n    if (params.target.is.node) {\n      eventName = 'rollup-plugin-settings-configuration-for-node';\n      settings.nodeRunner = this._getNodeRunnerSettings(params);\n      settings.stylesheetAssetsHelper = this._getStyleheetAssetsHelperSettings(params);\n    } else {\n      eventName = 'rollup-plugin-settings-configuration-for-browser';\n      settings.template = this._getTemplateSettings(params, stats);\n      settings.devServer = this._getDevServerSettings(params);\n    }\n    // Return the reduced settings.\n    return this.events.reduce(\n      [eventName, 'rollup-plugin-settings-configuration'],\n      settings,\n      params\n    );\n  }\n  /**\n   * Defines the settings for the external dependencies.\n   * This method uses the reducer event `rollup-external-plugin-settings-configuration-for-browser`\n   * or `rollup-external-plugin-settings-configuration-for-node`, depending on the target type, and\n   * then `rollup-external-plugin-settings-configuration`. The event receives the settings, the\n   * `params` and expects new settings on return.\n   * @param {RollupConfigurationParams} params A dictionary generated by the top service building\n   *                                           the configuration and that includes things like the\n   *                                           target information, its entry settings, output\n   *                                           paths, etc.\n   * @return {Object}\n   * @access protected\n   * @ignore\n   */\n  _getExternalSettings(params) {\n    const { target, buildType } = params;\n    // Define the list of modules that shuld be external.\n    const external = [];\n\n    // Push modules the target is excluding by configuration.\n    if (target.excludeModules) {\n      external.push(...target.excludeModules);\n    }\n    // If the target is for Node...\n    if (target.is.node) {\n      // Push all the Node builtin modules\n      external.push(...builtinModules);\n      // Push the plugin _\"sub modules\"_.\n      external.push(...this.rollupPluginInfo.external.map((dependencyName) => (\n        `${this.rollupPluginInfo.name}/${dependencyName}`\n      )));\n      // Push the production dependencies.\n      external.push(...Object.keys(this.packageInfo.dependencies));\n      // And if the build is for development, push the dev dependencies too.\n      if (buildType === 'development') {\n        external.push(...Object.keys(this.packageInfo.devDependencies));\n      }\n    }\n    // Wrap the list on an object.\n    const settings = { external };\n\n    const eventName = target.is.node ?\n      'rollup-external-plugin-settings-configuration-for-node' :\n      'rollup-external-plugin-settings-configuration-for-browser';\n\n    // Return the reduced configuration.\n    return this.events.reduce(\n      [eventName, 'rollup-external-plugin-settings-configuration'],\n      settings,\n      params\n    );\n  }\n  /**\n   * Defines the settings for the global variables on the bundle. They are actually based on the\n   * modules that are handled as external.\n   * This method uses the reducer event\n   * `rollup-global-variables-plugin-settings-configuration-for-browser` or\n   * `rollup-global-variables-plugin-settings-configuration-for-node`, depending on the target\n   * type, and then `rollup-global-variables-plugin-settings-configuration`. The event receives\n   * the settings, the `params` and expects new settings on return.\n   * @param {RollupConfigurationParams} params   A dictionary generated by the top service building\n   *                                             the configuration and that includes things like the\n   *                                             target information, its entry settings, output\n   *                                             paths, etc.\n   * @param {Array}                     external The list of modules that will be handled as\n   *                                             external dependencies.\n   * @return {Object}\n   * @access protected\n   * @ignore\n   */\n  _getGlobalVariablesSettings(params, external) {\n    // Define the settings dictionary.\n    const settings = {};\n    // Loop all the external modules.\n    external.forEach((name) => {\n      // Format the module name into a variable.\n      const globalName = name\n      .replace(/\\//g, '-')\n      .replace(/-(\\w)/g, (match, letter) => letter.toUpperCase());\n      // Set it on the dictionary using the module name as key.\n      settings[name] = globalName;\n    });\n\n    const eventName = params.target.is.node ?\n      'rollup-global-variables-settings-configuration-for-node' :\n      'rollup-global-variables-settings-configuration-for-browser';\n\n    // return the reduced configuration.\n    return this.events.reduce(\n      [eventName, 'rollup-global-variables-settings-configuration'],\n      settings,\n      params\n    );\n  }\n  /**\n   * Defines the settings for the `resolve` plugin.\n   * This method uses the reducer event `rollup-resolve-plugin-settings-configuration-for-browser`\n   * or `rollup-resolve-plugin-settings-configuration-for-node`, depending on the target type, and\n   * then `rollup-resolve-plugin-settings-configuration`. The event receives the settings, the\n   * `params` and expects new settings on return.\n   * @param {RollupConfigurationParams} params A dictionary generated by the top service building\n   *                                           the configuration and that includes things like the\n   *                                           target information, its entry settings, output\n   *                                           paths, etc.\n   * @return {Object}\n   * @access protected\n   * @ignore\n   */\n  _getResolveSettings(params) {\n    const settings = {\n      // Add just for basic JS files and JSON.\n      extensions: ['.js', '.json', '.jsx'],\n    };\n\n    const eventName = params.target.is.node ?\n      'rollup-resolve-plugin-settings-configuration-for-node' :\n      'rollup-resolve-plugin-settings-configuration-for-browser';\n\n    // Return the reduced configuration.\n    return this.events.reduce(\n      [eventName, 'rollup-resolve-plugin-settings-configuration'],\n      settings,\n      params\n    );\n  }\n  /**\n   * Defines the settings for the `replace` plugin.\n   * This method uses the reducer event `rollup-replace-plugin-settings-configuration-for-browser`\n   * or `rollup-replace-plugin-settings-configuration-for-node`, depending on the target type, and\n   * then `rollup-replace-plugin-settings-configuration`. The event receives the settings, the\n   * `params` and expects new settings on return.\n   * @param {RollupConfigurationParams} params A dictionary generated by the top service building\n   *                                           the configuration and that includes things like the\n   *                                           target information, its entry settings, output\n   *                                           paths, etc.\n   * @return {Object}\n   * @access protected\n   * @ignore\n   */\n  _getReplaceSettings(params) {\n    // Add the target definitions as the settings.\n    const settings = Object.assign({}, params.definitions);\n\n    const eventName = params.target.is.node ?\n      'rollup-replace-plugin-settings-configuration-for-node' :\n      'rollup-replace-plugin-settings-configuration-for-browser';\n\n    // Return the reduced configuration.\n    return this.events.reduce(\n      [eventName, 'rollup-replace-plugin-settings-configuration'],\n      settings,\n      params\n    );\n  }\n  /**\n   * Defines the settings for the `babel` plugin.\n   * This method uses the reducer event `rollup-babel-plugin-settings-configuration-for-browser`\n   * or `rollup-babel-plugin-settings-configuration-for-node`, depending on the target type, and\n   * then `rollup-babel-plugin-settings-configuration`. The event receives the settings, the\n   * `params` and expects new settings on return.\n   * @param {RollupConfigurationParams} params A dictionary generated by the top service building\n   *                                           the configuration and that includes things like the\n   *                                           target information, its entry settings, output\n   *                                           paths, etc.\n   * @return {Object}\n   * @access protected\n   * @ignore\n   */\n  _getBabelSettings(params) {\n    const { target, targetRules } = params;\n    // Get the rule for JS files.\n    const jsRule = targetRules.js.getRule();\n    // Get the target Babel configuration.\n    const baseConfiguration = this.babelConfiguration.getConfigForTarget(target);\n    // Disable the `modules` feature for the `env` preset.\n    const configuration = this.babelHelper.disableEnvPresetModules(baseConfiguration);\n    // Define the plugin settings.\n    const settings = Object.assign(\n      {},\n      configuration,\n      {\n        // The plugin doesn't support RegExp, so it will use the glob patterns.\n        include: [...jsRule.files.glob.include],\n        exclude: [...jsRule.files.glob.exclude],\n      }\n    );\n\n    const eventName = target.is.node ?\n      'rollup-babel-plugin-settings-configuration-for-node' :\n      'rollup-babel-plugin-settings-configuration-for-browser';\n\n    // Return the reduced configuration.\n    return this.events.reduce(\n      [eventName, 'rollup-babel-plugin-settings-configuration'],\n      settings,\n      params\n    );\n  }\n  /**\n   * Defines the settings for the `commonjs` plugin.\n   * This method uses the reducer event `rollup-commonjs-plugin-settings-configuration-for-browser`\n   * or `rollup-commonjs-plugin-settings-configuration-for-node`, depending on the target type, and\n   * then `rollup-commonjs-plugin-settings-configuration`. The event receives the settings, the\n   * `params` and expects new settings on return.\n   * @param {RollupConfigurationParams} params A dictionary generated by the top service building\n   *                                           the configuration and that includes things like the\n   *                                           target information, its entry settings, output\n   *                                           paths, etc.\n   * @return {Object}\n   * @access protected\n   * @ignore\n   */\n  _getCommonJSSettings(params) {\n    // Define the plugin settings.\n    const settings = {\n      include: [\n        new RegExp(this.pathUtils.join('config'), 'i'),\n        /node_modules\\//i,\n      ],\n    };\n\n    const eventName = params.target.is.node ?\n      'rollup-commonjs-plugin-settings-configuration-for-node' :\n      'rollup-commonjs-plugin-settings-configuration-for-browser';\n\n    // Return the reduced configuration.\n    return this.events.reduce(\n      [eventName, 'rollup-commonjs-plugin-settings-configuration'],\n      settings,\n      params\n    );\n  }\n  /**\n   * Defines the settings for the `sass` plugin.\n   * This method uses the reducer event `rollup-sass-plugin-settings-configuration-for-browser`\n   * or `rollup-sass-plugin-settings-configuration-for-node`, depending on the target type, and\n   * then `rollup-sass-plugin-settings-configuration`. The event receives the settings, the\n   * `params` and expects new settings on return.\n   * @param {RollupConfigurationParams} params A dictionary generated by the top service building\n   *                                           the configuration and that includes things like the\n   *                                           target information, its entry settings, output\n   *                                           paths, etc.\n   * @return {Object}\n   * @access protected\n   * @ignore\n   */\n  _getSASSSettings(params) {\n    const { target, paths, targetRules } = params;\n    // Get the rule for SCSS files.\n    const scssRule = targetRules.scss.getRule();\n\n    // Define the plugin settings.\n    const settings = {\n      include: [...scssRule.files.include],\n      exclude: [...scssRule.files.exclude],\n      options: {\n        sourceMapEmbed: true,\n        outputStyle: 'compressed',\n        includePaths: ['node_modules'],\n      },\n      processor: this._getStylesProcessor(target.css.modules),\n      failOnError: true,\n    };\n\n    // If the CSS should be injected, turn on the flag.\n    if (target.css.inject) {\n      settings.insert = true;\n    } else if (target.is.browser) {\n      // If the CSS shouldn't be injected and the target is for browser, define a bundle path.\n      settings.output = `${target.paths.build}/${paths.css}`;\n    } else {\n      // Otherwise, it means that is a Node target, so just return the code.\n      settings.output = false;\n    }\n\n    const eventName = target.is.node ?\n      'rollup-sass-plugin-settings-configuration-for-node' :\n      'rollup-sass-plugin-settings-configuration-for-browser';\n\n    // Return the reduced configuration.\n    return this.events.reduce(\n      [eventName, 'rollup-sass-plugin-settings-configuration'],\n      settings,\n      params\n    );\n  }\n  /**\n   * Defines the settings for the `css` plugin.\n   * This method uses the reducer event `rollup-css-plugin-settings-configuration-for-browser`\n   * or `rollup-css-plugin-settings-configuration-for-node`, depending on the target type, and\n   * then `rollup-css-plugin-settings-configuration`. The event receives the settings, the\n   * `params` and expects new settings on return.\n   * @param {RollupConfigurationParams} params A dictionary generated by the top service building\n   *                                           the configuration and that includes things like the\n   *                                           target information, its entry settings, output\n   *                                           paths, etc.\n   * @param {Function}                  stats  A function to send to the plugins that support\n   *                                           logging stats entries.\n   * @return {Object}\n   * @access protected\n   * @ignore\n   */\n  _getCSSSettings(params, stats) {\n    const { target, paths, targetRules } = params;\n    // Get the rule for SCSS files.\n    const cssRule = targetRules.css.getRule();\n    // Define the plugin settings.\n    const settings = {\n      include: [...cssRule.files.include],\n      exclude: [...cssRule.files.exclude],\n      processor: this._getStylesProcessor(false, { map: true }),\n      stats,\n    };\n\n    // If the CSS should be injected, turn on the flag.\n    if (target.css.inject) {\n      settings.insert = true;\n    } else if (target.is.browser) {\n      // If the CSS shouldn't be injected and the target is for browser, define a bundle path.\n      settings.output = `${target.paths.build}/${paths.css}`;\n    } else {\n      // Otherwise, it means that is a Node target, so just return the code.\n      settings.output = false;\n    }\n\n    const eventName = target.is.node ?\n      'rollup-css-plugin-settings-configuration-for-node' :\n      'rollup-css-plugin-settings-configuration-for-browser';\n\n    // Return the reduced configuration.\n    return this.events.reduce(\n      [eventName, 'rollup-css-plugin-settings-configuration'],\n      settings,\n      params\n    );\n  }\n  /**\n   * Defines the settings for the `stylesheetAssets` plugin, which is a projext's plugin that takes\n   * care of copying and fixing the paths for the files linked on stylesheets.\n   * This method uses the reducer event\n   * `rollup-stylesheet-assets-plugin-settings-configuration-for-browser` or\n   * `rollup-stylesheet-assets-plugin-settings-configuration-for-node`, depending on the target\n   * type, and then `rollup-stylesheet-assets-plugin-settings-configuration`. The event receives\n   * the settings, the `params` and expects new settings on return.\n   * @param {RollupConfigurationParams} params A dictionary generated by the top service building\n   *                                           the configuration and that includes things like the\n   *                                           target information, its entry settings, output\n   *                                           paths, etc.\n   * @param {Function}                  stats  A function to send to the plugins that support\n   *                                           logging stats entries.\n   * @return {Object}\n   * @access protected\n   * @ignore\n   */\n  _getStyleheetAssetsSettings(params, stats) {\n    const {\n      target,\n      paths,\n      output,\n    } = params;\n    // Get the rules for common assets.\n    const assetsRules = this._getAssetsRules(params);\n    /**\n     * Define the file the plugin will parse. If the target injects the CSS or is a Node target,\n     * use the main JS file, otherwise, the path for bundling CSS.\n     */\n    const stylesheet = target.css.inject || target.is.node ?\n      output.file :\n      `${target.paths.build}/${paths.css}`;\n\n    // Define the plugin settings.\n    const settings = {\n      stylesheet,\n      stats,\n      urls: [\n        assetsRules.fonts,\n        assetsRules.images,\n      ],\n    };\n\n    const eventName = target.is.node ?\n      'rollup-stylesheet-assets-plugin-settings-configuration-for-node' :\n      'rollup-stylesheet-assets-plugin-settings-configuration-for-browser';\n\n    // Return the reduced configuration.\n    return this.events.reduce(\n      [eventName, 'rollup-stylesheet-assets-plugin-settings-configuration'],\n      settings,\n      params\n    );\n  }\n  /**\n   * Defines the settings for the `stylesheetModulesFixer` plugin, which is a projext's plugin that\n   * parses modules for CSS (stylsheet that Rollup transforms into ES modules) and if they inject\n   * the CSS on the browser or they code was moved to a separate bundle, replace their default\n   * exports for the named export for CSS Modules locals.\n   * This method uses the reducer event\n   * `rollup-stylesheet-modules-fixer-plugin-settings-configuration-for-browser` or\n   * `rollup-stylesheet-modules-fixer-plugin-settings-configuration-for-node`, depending on the\n   * target type, and then `rollup-stylesheet-modules-fixer-plugin-settings-configuration`. The\n   * event receives the settings, the `params` and expects new settings on return.\n   * @param {RollupConfigurationParams} params A dictionary generated by the top service building\n   *                                           the configuration and that includes things like the\n   *                                           target information, its entry settings, output\n   *                                           paths, etc.\n   * @return {Object}\n   * @access protected\n   * @ignore\n   */\n  _getStylesheetModulesFixerSettings(params) {\n    const { target, targetRules } = params;\n    // Get both SCSS and CSS rules.\n    const scssRule = targetRules.scss.getRule();\n    const cssRule = targetRules.css.getRule();\n    // Define the plugin settings.\n    const settings = {\n      include: [\n        ...scssRule.files.include,\n        ...cssRule.files.include,\n      ],\n      exclude: [\n        ...scssRule.files.exclude,\n        ...cssRule.files.exclude,\n      ],\n    };\n\n    const eventName = target.is.node ?\n      'rollup-stylesheet-modules-fixer-plugin-settings-configuration-for-node' :\n      'rollup-stylesheet-modules-fixer-plugin-settings-configuration-for-browser';\n\n    // Return the reduced configuration.\n    return this.events.reduce(\n      [eventName, 'rollup-stylesheet-modules-fixer-plugin-settings-configuration'],\n      settings,\n      params\n    );\n  }\n  /**\n   * Defines the settings for the `stylesheetAssets` helper plugin, which is a projext's plugin\n   * that wraps the default exports of stylesheets Rollup transforms into ES modules so\n   * the `stylesheetAssets` plugin can find them and parse them.\n   * This method uses the reducer event\n   * `rollup-stylesheet-assets-helper-plugin-settings-configuration`, it receives the settings,\n   * the `params` and expects new settings on return.\n   * @param {RollupConfigurationParams} params A dictionary generated by the top service building\n   *                                           the configuration and that includes things like the\n   *                                           target information, its entry settings, output\n   *                                           paths, etc.\n   * @return {Object}\n   * @access protected\n   * @ignore\n   */\n  _getStyleheetAssetsHelperSettings(params) {\n    const { targetRules } = params;\n    // Get both SCSS and CSS rules.\n    const scssRule = targetRules.scss.getRule();\n    const cssRule = targetRules.css.getRule();\n    // Define the plugin settings.\n    const settings = {\n      include: [\n        ...scssRule.files.include,\n        ...cssRule.files.include,\n      ],\n      exclude: [\n        ...scssRule.files.exclude,\n        ...cssRule.files.exclude,\n      ],\n    };\n    // Return the reduced configuration.\n    return this.events.reduce(\n      'rollup-stylesheet-assets-helper-plugin-settings-configuration',\n      settings,\n      params\n    );\n  }\n  /**\n   * Defines the settings for the `html` plugin.\n   * This method uses the reducer event `rollup-html-plugin-settings-configuration-for-browser`\n   * or `rollup-html-plugin-settings-configuration-for-node`, depending on the target type, and\n   * then `rollup-html-plugin-settings-configuration`. The event receives the settings, the\n   * `params` and expects new settings on return.\n   * @param {RollupConfigurationParams} params A dictionary generated by the top service building\n   *                                           the configuration and that includes things like the\n   *                                           target information, its entry settings, output\n   *                                           paths, etc.\n   * @return {Object}\n   * @access protected\n   * @ignore\n   */\n  _getHTMLSettings(params) {\n    /**\n     * There are no settings, but because the plugin is used, the method reduces the empty\n     * configuration so other plugins/services can update it if needed.\n     */\n    const settings = {};\n\n    const eventName = params.target.is.node ?\n      'rollup-html-plugin-settings-configuration-for-node' :\n      'rollup-html-plugin-settings-configuration-for-browser';\n    // Return the reduced configuration.\n    return this.events.reduce(\n      [eventName, 'rollup-html-plugin-settings-configuration'],\n      settings,\n      params\n    );\n  }\n  /**\n   * Defines the settings for the `json` plugin.\n   * This method uses the reducer event `rollup-json-plugin-settings-configuration-for-browser`\n   * or `rollup-json-plugin-settings-configuration-for-node`, depending on the target type, and\n   * then `rollup-json-plugin-settings-configuration`. The event receives the settings, the\n   * `params` and expects new settings on return.\n   * @param {RollupConfigurationParams} params A dictionary generated by the top service building\n   *                                           the configuration and that includes things like the\n   *                                           target information, its entry settings, output\n   *                                           paths, etc.\n   * @return {Object}\n   * @access protected\n   * @ignore\n   */\n  _getJSONSettings(params) {\n    /**\n     * There are no settings, but because the plugin is used, the method reduces the empty\n     * configuration so other plugins/services can update it if needed.\n     */\n    const settings = {};\n\n    const eventName = params.target.is.node ?\n      'rollup-json-plugin-settings-configuration-for-node' :\n      'rollup-json-plugin-settings-configuration-for-browser';\n    // Return the reduced configuration.\n    return this.events.reduce(\n      [eventName, 'rollup-json-plugin-settings-configuration'],\n      settings,\n      params\n    );\n  }\n  /**\n   * Defines the settings for the `stylesheetAssets` plugin, which is a projext's plugin that\n   * transform files matching a filter by copying its contents into a new file on the output\n   * directory and replacing its default export with a URL for them.\n   * This method uses the reducer event `rollup-urls-plugin-settings-configuration-for-browser` or\n   * `rollup-urls-plugin-settings-configuration-for-node`, depending on the target type, and then\n   * `rollup-urls-plugin-settings-configuration`. The event receives the settings, the `params`\n   * and expects new settings on return.\n   * @param {RollupConfigurationParams} params A dictionary generated by the top service building\n   *                                           the configuration and that includes things like the\n   *                                           target information, its entry settings, output\n   *                                           paths, etc.\n   * @param {Function}                  stats  A function to send to the plugins that support\n   *                                           logging stats entries.\n   * @return {Object}\n   * @access protected\n   * @ignore\n   */\n  _getURLsSettings(params, stats) {\n    const { target } = params;\n    // Get the rules for common assets.\n    const assetsRules = this._getAssetsRules(params);\n    // Define the plugin settings.\n    const settings = {\n      urls: [\n        assetsRules.fonts,\n        assetsRules.images,\n        assetsRules.favicon,\n      ],\n      stats,\n    };\n\n    const eventName = target.is.node ?\n      'rollup-urls-plugin-settings-configuration-for-node' :\n      'rollup-urls-plugin-settings-configuration-for-browser';\n    // Return the reduced configuration.\n    return this.events.reduce(\n      [eventName, 'rollup-urls-plugin-settings-configuration'],\n      settings,\n      params\n    );\n  }\n  /**\n   * Defines the settings for the `template` plugin, which is a projext's plugin that generates\n   * and HTML file and injects a list of JS and CSS files.\n   * This method uses the reducer event `rollup-html-plugin-settings-configuration-for-browser` or\n   * `rollup-html-plugin-settings-configuration-for-node`, depending on the target type, and then\n   * `rollup-html-plugin-settings-configuration`. The event receives the settings, the `params`\n   * and expects new settings on return.\n   * @param {RollupConfigurationParams} params A dictionary generated by the top service building\n   *                                           the configuration and that includes things like the\n   *                                           target information, its entry settings, output\n   *                                           paths, etc.\n   * @param {Function}                  stats  A function to send to the plugins that support\n   *                                           logging stats entries.\n   * @return {Object}\n   * @access protected\n   * @ignore\n   */\n  _getTemplateSettings(params, stats) {\n    const { target, paths } = params;\n    // Get the rules for common assets.\n    const assetsRules = this._getAssetsRules(params);\n    // Define the plugin settings.\n    const settings = {\n      template: this.targetsHTML.getFilepath(target),\n      output: `${target.paths.build}/${target.html.filename}`,\n      stylesheets: target.css.inject ?\n        [] :\n        [`/${paths.css}`],\n      scripts: [`/${paths.js}`],\n      urls: [\n        assetsRules.images,\n        assetsRules.favicon,\n      ],\n      stats,\n    };\n    // Return the reduced configuration.\n    return this.events.reduce(\n      'rollup-template-plugin-settings-configuration',\n      settings,\n      params\n    );\n  }\n  /**\n   * Defines the settings for the Rollup watcher.\n   * This method uses the reducer event `rollup-watch-plugin-settings-configuration-for-browser` or\n   * `rollup-watch-plugin-settings-configuration-for-node`, depending on the target type, and then\n   * `rollup-watch-plugin-settings-configuration`. The event receives the settings, the `params`\n   * and expects new settings on return.\n   * @param {RollupConfigurationParams} params A dictionary generated by the top service building\n   *                                           the configuration and that includes things like the\n   *                                           target information, its entry settings, output\n   *                                           paths, etc.\n   * @return {Object}\n   * @access protected\n   * @ignore\n   */\n  _getWatchSettings(params) {\n    // Define the plugin settings.\n    const settings = {\n      clearScreen: false,\n    };\n\n    const eventName = params.target.is.node ?\n      'rollup-watch-plugin-settings-configuration-for-node' :\n      'rollup-watch-plugin-settings-configuration-for-browser';\n    // Return the reduced configuration.\n    return this.events.reduce(\n      [eventName, 'rollup-watch-plugin-settings-configuration'],\n      settings,\n      params\n    );\n  }\n  /**\n   * Defines the settings for the `devServer` plugin, which is a projext's plugin for running web\n   * apps while on development.\n   * This method uses the reducer event `rollup-dev-server-plugin-settings-configuration`, it\n   * receives the settings, the `params` and expects new settings on return.\n   * @param {RollupConfigurationParams} params A dictionary generated by the top service building\n   *                                           the configuration and that includes things like the\n   *                                           target information, its entry settings, output\n   *                                           paths, etc.\n   * @return {Object}\n   * @access protected\n   * @ignore\n   */\n  _getDevServerSettings(params) {\n    const { target } = params;\n    const { devServer } = target;\n    // Define the basic settings.\n    const settings = {\n      host: devServer.host,\n      port: devServer.port,\n      contentBase: target.paths.build,\n      historyApiFallback: !!devServer.historyApiFallback,\n      https: null,\n      logger: this.appLogger,\n    };\n    // Loop the SSL settings and load the file for those which have a valid file path.\n    const sslSettings = {};\n    /**\n     * The idea of this flag is that if none of the SSL settings has value, the `ssl` setting\n     * won't be added.\n     */\n    let atLeastOneSSLSetting = false;\n    [\n      'key',\n      'cert',\n      'ca',\n    ].forEach((sslSettingName) => {\n      const file = devServer.ssl[sslSettingName];\n      // Make sure the setting value is a string.\n      if (typeof file === 'string') {\n        const filepath = this.pathUtils.join(file);\n        // Verify that the file exists.\n        if (fs.pathExistsSync(filepath)) {\n          // Turn on the flag.\n          atLeastOneSSLSetting = true;\n          // Set the value of the setting with the contents of the file.\n          sslSettings[sslSettingName] = fs.readFileSync(filepath, 'utf-8');\n        }\n      }\n    });\n    /**\n     * If there's at least one setting implemented, set it for the plugin to use, otherwise keep\n     * it as `undefined`.\n     */\n    if (atLeastOneSSLSetting) {\n      settings.https = sslSettings;\n    }\n    // Return the reduced configuration.\n    return this.events.reduce(\n      'rollup-dev-server-plugin-settings-configuration',\n      settings,\n      params\n    );\n  }\n  /**\n   * Defines the settings for the `ugify` plugin.\n   * This method uses the reducer event `rollup-uglify-plugin-settings-configuration-for-browser`\n   * or `rollup-uglify-plugin-settings-configuration-for-node`, depending on the target type, and\n   * then `rollup-uglify-plugin-settings-configuration`. The event receives the settings, the\n   * `params` and expects new settings on return.\n   * @param {RollupConfigurationParams} params A dictionary generated by the top service building\n   *                                           the configuration and that includes things like the\n   *                                           target information, its entry settings, output\n   *                                           paths, etc.\n   * @return {Object}\n   * @access protected\n   * @ignore\n   */\n  _getUglifySettings(params) {\n    /**\n     * There are no settings, but because the plugin is used, the method reduces the empty\n     * configuration so other plugins/services can update it if needed.\n     */\n    const settings = {};\n\n    const eventName = params.target.is.node ?\n      'rollup-uglify-plugin-settings-configuration-for-node' :\n      'rollup-uglify-plugin-settings-configuration-for-browser';\n    // Return the reduced configuration.\n    return this.events.reduce(\n      [eventName, 'rollup-uglify-plugin-settings-configuration'],\n      settings,\n      params\n    );\n  }\n  /**\n   * Defines the settings for the `compression` plugin, which is a projext's plugin that takes care\n   * of compressing the generated assets using Gzip.\n   * This method uses the reducer event\n   * `rollup-compression-plugin-settings-configuration-for-browser` or\n   * `rollup-compression-plugin-settings-configuration-for-node`, depending on the target type,\n   * and then `rollup-compression-plugin-settings-configuration`. The event receives the settings,\n   * the `params` and expects new settings on return.\n   * @param {RollupConfigurationParams} params A dictionary generated by the top service building\n   *                                           the configuration and that includes things like the\n   *                                           target information, its entry settings, output\n   *                                           paths, etc.\n   * @param {Function}                  stats  A function to send to the plugins that support\n   *                                           logging stats entries.\n   * @return {Object}\n   * @access protected\n   * @ignore\n   */\n  _getCompressionSettings(params, stats) {\n    const { target } = params;\n    // Get the rule to find ALL generated assets.\n    const rule = this._getARuleForAllTheAssets(params);\n    // Define the plugin settings.\n    const settings = {\n      folder: target.paths.build,\n      include: rule.include,\n      exclude: rule.exclude,\n      stats,\n    };\n\n    const eventName = target.is.node ?\n      'rollup-compression-plugin-settings-configuration-for-node' :\n      'rollup-compression-plugin-settings-configuration-for-browser';\n    // Return the reduced configuration.\n    return this.events.reduce(\n      [eventName, 'rollup-compression-plugin-settings-configuration'],\n      settings,\n      params\n    );\n  }\n  /**\n   * Defines the settings for the `stats` plugin `log` _\"sub plugin\"_. The `stats` plugin is a\n   * projext plugin that allows other plugins and services to add stats entries to eventually\n   * show a report table when the bundle process finishes. The `log` _\"sub plugin\"_ is the method\n   * that you would add to the Rollup plugins queue and that it actually logs the report table.\n   * This method uses the reducer event\n   * `rollup-stats-plugin-settings-configuration-for-browser` or\n   * `rollup-stats-plugin-settings-configuration-for-node`, depending on the target type,\n   * and then `rollup-stats-plugin-settings-configuration`. The event receives the settings,\n   * the `params` and expects new settings on return.\n   * @param {RollupConfigurationParams} params A dictionary generated by the top service building\n   *                                           the configuration and that includes things like the\n   *                                           target information, its entry settings, output\n   *                                           paths, etc.\n   * @return {Object}\n   * @access protected\n   * @ignore\n   */\n  _getStatsLogSettings(params) {\n    const { target, paths, buildType } = params;\n    // As the first extra entry, add the bundle generated by Rollup.\n    const extraEntries = [\n      {\n        plugin: 'rollup',\n        filepath: `${target.paths.build}/${paths.js}`,\n      },\n    ];\n    // If the target implements source maps, add the entry for the source map.\n    if (target.sourceMap && target.sourceMap[buildType]) {\n      extraEntries.push({\n        plugin: 'rollup',\n        filepath: `${target.paths.build}/${paths.js}.map`,\n      });\n    }\n    /**\n     * If the target is for browser and is not injecting the styles, assume the `sass` plugin\n     * has generated a bundle, so add and entry for it.\n     * @todo This should be on the `processor` to be able to know if it was the `sass` or `css`\n     *       plugin.\n     */\n    if (target.is.browser && !target.css.inject) {\n      extraEntries.push({\n        plugin: 'rollup-plugin-sass',\n        filepath: `${target.paths.build}/${paths.css}`,\n      });\n    }\n    // Define the plugin settings.\n    const settings = {\n      extraEntries,\n    };\n\n    const eventName = target.is.node ?\n      'rollup-stats-plugin-settings-configuration-for-node' :\n      'rollup-stats-plugin-settings-configuration-for-browser';\n    // Return the reduced configuration.\n    return this.events.reduce(\n      [eventName, 'rollup-stats-plugin-settings-configuration'],\n      settings,\n      params\n    );\n  }\n  /**\n   * Defines the settings for the `nodeRunner` plugin, which is a projext's plugin for running Node\n   * apps while on development.\n   * This method uses the reducer event `rollup-node-runner-plugin-settings-configuration`, it\n   * receives the settings, the `params` and expects new settings on return.\n   * @param {RollupConfigurationParams} params A dictionary generated by the top service building\n   *                                           the configuration and that includes things like the\n   *                                           target information, its entry settings, output\n   *                                           paths, etc.\n   * @return {Object}\n   * @access protected\n   * @ignore\n   */\n  _getNodeRunnerSettings(params) {\n    const { output } = params;\n    // Define the plugin settings.\n    const settings = {\n      file: output.file,\n      logger: this.appLogger,\n    };\n    // Return the reduced configuration.\n    return this.events.reduce(\n      'rollup-node-runner-plugin-settings-configuration',\n      settings,\n      params\n    );\n  }\n  /**\n   * This a helper method that generates a dictionary of {@link ProjextRollupPluginURL}\n   * definitions for common assets (fonts, images and the favicon). These definitions can be used\n   * on different plugin settings.\n   * @param {RollupConfigurationParams} params A dictionary generated by the top service building\n   *                                           the configuration and that includes things like the\n   *                                           target information, its entry settings, output\n   *                                           paths, etc.\n   * @return {Object}\n   * @access protected\n   * @ignore\n   */\n  _getAssetsRules(params) {\n    const { target, targetRules, paths } = params;\n    const commonFontsRule = targetRules.fonts.common.getRule();\n    const svgFontsRule = targetRules.fonts.svg.getRule();\n    const imagesRule = targetRules.images.getRule();\n    const faviconRule = targetRules.favicon.getRule();\n\n    return {\n      fonts: {\n        include: [\n          ...commonFontsRule.files.include,\n          ...svgFontsRule.files.include,\n        ],\n        exclude: [\n          ...commonFontsRule.files.exclude,\n          ...svgFontsRule.files.exclude,\n        ],\n        output: `${target.paths.build}/${paths.fonts}`,\n        url: `/${paths.fonts}`,\n      },\n      images: {\n        include: [...imagesRule.files.include],\n        exclude: [...imagesRule.files.exclude],\n        output: `${target.paths.build}/${paths.images}`,\n        url: `/${paths.images}`,\n      },\n      favicon: {\n        include: [...faviconRule.files.include],\n        exclude: [...faviconRule.files.exclude],\n        output: `${target.paths.build}/[name].[ext]`,\n        url: '/[name].[ext]',\n      },\n    };\n  }\n  /**\n   * This a helper method that generates a set of `include` and `exclude` rules to match all\n   * possible generated assets on the output directory.\n   * @param {RollupConfigurationParams} params A dictionary generated by the top service building\n   *                                           the configuration and that includes things like the\n   *                                           target information, its entry settings, output\n   *                                           paths, etc.\n   * @return {Object}\n   * @access protected\n   * @ignore\n   */\n  _getARuleForAllTheAssets(params) {\n    const { target } = params;\n    const extensions = [\n      'js',\n      'jsx',\n      'css',\n      'html',\n      'map',\n      'woff',\n      'woff2',\n      'ttf',\n      'eot',\n      'jpg',\n      'jpeg',\n      'png',\n      'gif',\n      'svg',\n      'ico',\n    ];\n    const extensionsStr = extensions.join('|');\n    const extensionsRegex = `\\\\.(?:${extensionsStr})$`;\n    return {\n      include: [new RegExp(`${target.paths.build}/.*?${extensionsRegex}`, 'i')],\n      exclude: [],\n    };\n  }\n  /**\n   * Helper method for the stylsheet processor. It searches and retrieves a source map comment\n   * from a given CSS code.\n   * @param {string} code The CSS code where the source map will be retrieved from.\n   * @return {?string} If the source map it's found, it will return it, otherwise, it will return\n   *                   `null`.\n   * @access protected\n   * @ignore\n   */\n  _getSourceMap(code) {\n    const regex = /(\\/\\*# sourceMappingURL=.*? \\*\\/)/i;\n    const match = regex.exec(code);\n    let result = null;\n    if (match) {\n      [result] = match;\n    }\n\n    return result;\n  }\n  /**\n   * This is a custom stylesheet processor for the `sass` and `css` plugin. It makes sure all\n   * generated styles have a source map that plugins like `stylesheetAssets` can use. It also\n   * takes care of implementing CSS modules if the target has them enabled.\n   * @param {boolean} modules                      Whether or not CSS modules are enabled.\n   * @param {Object}  [processorOptions={}]        Custom options for the processor.\n   * @param {boolean} [processorOptions.map=false] Whether or not a source map should be generated\n   *                                               for the stylesheet. When generated with the\n   *                                               `sass` plugin, the source map already comes\n   *                                               with the code; but when generated with the\n   *                                               `css` plugin, it should be added.\n   * @return {function}\n   * @access protected\n   * @ignore\n   */\n  _getStylesProcessor(modules, processorOptions = {}) {\n    // Merge the default options with the received custom options.\n    const options = Object.assign(\n      {},\n      {\n        map: false,\n        /**\n         * If the file already has a source map, this value will be filled with the path to\n         * the file being processed, as required by `postcss`.\n         */\n        from: undefined,\n      },\n      processorOptions\n    );\n    // Return the processor function.\n    return (css, filepath) => {\n      let map;\n      /**\n       * If the stylesheet needs a source map, complete the `from` option; otherwise, read it from\n       * the code.\n       * The reason the source map is being extracted before processing the stylesheet is because\n       * `postcss` may update it and the reference for the original sources may get lost.\n       */\n      if (options.map) {\n        options.from = filepath;\n      } else {\n        map = this._getSourceMap(css) || '';\n      }\n      // Define the variable that will be used to store the CSS modules locals if enabled.\n      let locals;\n      // Define the list of plugins for `postcss`.\n      const plugins = [];\n      /**\n       * If CSS modules are enabled for the target, push the plugin with a callback to obtain the\n       * locals names.\n       */\n      if (modules) {\n        plugins.push(postcssModules({\n          getJSON: (filename, json) => {\n            locals = json;\n          },\n        }));\n      }\n\n      return postcss(plugins)\n      // Process the stylesheet code.\n      .process(css, options)\n      .then((processed) => {\n        // Add the source map if needed.\n        const cssCode = options.map ?\n          `${processed.css}\\n` :\n          `${processed.css}\\n\\n${map}\\n`;\n        // Define the return object.\n        let result;\n        /**\n         * If CSS modules are enabled for the target, return a dictionary with the code and the\n         * locals, otherwise just return the code.\n         */\n        if (modules) {\n          result = {\n            css: cssCode,\n            locals,\n          };\n        } else {\n          result = cssCode;\n        }\n\n        return result;\n      });\n    };\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `RollupPluginSettingsConfiguration` as the `rollupPluginSettingsConfiguration` service.\n * @example\n * // Register it on the container\n * container.register(rollupPluginSettingsConfiguration);\n * // Getting access to the service instance\n * const rollupPluginSettingsConfiguration = container.get('rollupPluginSettingsConfiguration');\n * @type {Provider}\n */\nconst rollupPluginSettingsConfiguration = provider((app) => {\n  app.set('rollupPluginSettingsConfiguration', () => new RollupPluginSettingsConfiguration(\n    app.get('appLogger'),\n    app.get('babelConfiguration'),\n    app.get('babelHelper'),\n    app.get('events'),\n    app.get('packageInfo'),\n    app.get('pathUtils'),\n    app.get('rollupPluginInfo'),\n    app.get('targetsHTML')\n  ));\n});\n\nmodule.exports = {\n  RollupPluginSettingsConfiguration,\n  rollupPluginSettingsConfiguration,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/src/services/configurations/pluginsConfiguration.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 366,
    "kind": "class",
    "name": "RollupPluginSettingsConfiguration",
    "memberof": "src/services/configurations/pluginsConfiguration.js",
    "static": true,
    "longname": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/services/configurations/pluginsConfiguration.js",
    "importStyle": "{RollupPluginSettingsConfiguration}",
    "description": "This service creates a configuration with all the settings for the plugins this build engine\nuses.",
    "lineNumber": 12,
    "interface": false,
    "extends": [
      "ConfigurationFile"
    ]
  },
  {
    "__docId__": 367,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "Logger"
        ],
        "spread": false,
        "optional": false,
        "name": "appLogger",
        "description": "To send to the plugins that support a logger."
      },
      {
        "nullable": null,
        "types": [
          "BabelConfiguration"
        ],
        "spread": false,
        "optional": false,
        "name": "babelConfiguration",
        "description": "To get the target Babel configuration."
      },
      {
        "nullable": null,
        "types": [
          "BabelHelper"
        ],
        "spread": false,
        "optional": false,
        "name": "babelHelper",
        "description": "To disable the `modules` setting of the Babel\n                                               env preset for a target, as Rollup requires."
      },
      {
        "nullable": null,
        "types": [
          "Events"
        ],
        "spread": false,
        "optional": false,
        "name": "events",
        "description": "To reduce the settings."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "packageInfo",
        "description": "To get the dependencies and define them as\n                                               externals for Node targets."
      },
      {
        "nullable": null,
        "types": [
          "PathUtils"
        ],
        "spread": false,
        "optional": false,
        "name": "pathUtils",
        "description": "Require by `ConfigurationFile` in order to\n                                               build the path to the overwrite file. It's\n                                               also used to build the paths of SSL\n                                               certificates the dev server plugin may use."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "rollupPluginInfo",
        "description": "To get the name of the _\"sub packages\"_ the\n                                               plugin provides and that should be marked as\n                                               external."
      },
      {
        "nullable": null,
        "types": [
          "TargetsHTML"
        ],
        "spread": false,
        "optional": false,
        "name": "targetsHTML",
        "description": "To get the path to a target HTML template\n                                               file."
      }
    ]
  },
  {
    "__docId__": 368,
    "kind": "member",
    "name": "appLogger",
    "memberof": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration",
    "static": false,
    "longname": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration#appLogger",
    "access": "public",
    "description": "A local reference for the `appLogger` service.",
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "Logger"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 369,
    "kind": "member",
    "name": "babelConfiguration",
    "memberof": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration",
    "static": false,
    "longname": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration#babelConfiguration",
    "access": "public",
    "description": "A local reference for the `babelConfiguration` service.",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "BabelConfiguration"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 370,
    "kind": "member",
    "name": "babelHelper",
    "memberof": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration",
    "static": false,
    "longname": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration#babelHelper",
    "access": "public",
    "description": "A local reference for the `babelHelper` service.",
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "BabelHelper"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 371,
    "kind": "member",
    "name": "events",
    "memberof": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration",
    "static": false,
    "longname": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration#events",
    "access": "public",
    "description": "A local reference for the `events` service.",
    "lineNumber": 61,
    "type": {
      "nullable": null,
      "types": [
        "Events"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 372,
    "kind": "member",
    "name": "packageInfo",
    "memberof": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration",
    "static": false,
    "longname": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration#packageInfo",
    "access": "public",
    "description": "The project `package.json` information.",
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 373,
    "kind": "member",
    "name": "rollupPluginInfo",
    "memberof": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration",
    "static": false,
    "longname": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration#rollupPluginInfo",
    "access": "public",
    "description": "A local reference for the plugin information.",
    "lineNumber": 71,
    "type": {
      "nullable": null,
      "types": [
        "RollupPluginInfo"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 374,
    "kind": "member",
    "name": "targetsHTML",
    "memberof": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration",
    "static": false,
    "longname": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration#targetsHTML",
    "access": "public",
    "description": "A local reference for the `targetsHTML` service.",
    "lineNumber": 76,
    "type": {
      "nullable": null,
      "types": [
        "TargetsHTML"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 375,
    "kind": "method",
    "name": "createConfig",
    "memberof": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration#createConfig",
    "access": "public",
    "description": "Creates the plugins settings for the required target.\nThis method uses the reducer events `rollup-plugin-settings-configuration-for-node` or\n`rollup-plugin-settings-configuration-for-browser`, depending on the target type, and then\n`rollup-plugin-settings-configuration`. The event receives the configuration object, the\n`params` and it expects an updated configuration object on return.",
    "lineNumber": 92,
    "params": [
      {
        "nullable": null,
        "types": [
          "RollupConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                          the configuration and that includes things like the\n                                          target information, its entry settings, output\n                                          paths, etc."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "stats",
        "description": "A function to send to the plugins that support\n                                          logging stats entries."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 376,
    "kind": "method",
    "name": "_getExternalSettings",
    "memberof": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration#_getExternalSettings",
    "access": "protected",
    "description": "Defines the settings for the external dependencies.\nThis method uses the reducer event `rollup-external-plugin-settings-configuration-for-browser`\nor `rollup-external-plugin-settings-configuration-for-node`, depending on the target type, and\nthen `rollup-external-plugin-settings-configuration`. The event receives the settings, the\n`params` and expects new settings on return.",
    "lineNumber": 148,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "RollupConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                          the configuration and that includes things like the\n                                          target information, its entry settings, output\n                                          paths, etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 377,
    "kind": "method",
    "name": "_getGlobalVariablesSettings",
    "memberof": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration#_getGlobalVariablesSettings",
    "access": "protected",
    "description": "Defines the settings for the global variables on the bundle. They are actually based on the\nmodules that are handled as external.\nThis method uses the reducer event\n`rollup-global-variables-plugin-settings-configuration-for-browser` or\n`rollup-global-variables-plugin-settings-configuration-for-node`, depending on the target\ntype, and then `rollup-global-variables-plugin-settings-configuration`. The event receives\nthe settings, the `params` and expects new settings on return.",
    "lineNumber": 204,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "RollupConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                            the configuration and that includes things like the\n                                            target information, its entry settings, output\n                                            paths, etc."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "external",
        "description": "The list of modules that will be handled as\n                                            external dependencies."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 378,
    "kind": "method",
    "name": "_getResolveSettings",
    "memberof": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration#_getResolveSettings",
    "access": "protected",
    "description": "Defines the settings for the `resolve` plugin.\nThis method uses the reducer event `rollup-resolve-plugin-settings-configuration-for-browser`\nor `rollup-resolve-plugin-settings-configuration-for-node`, depending on the target type, and\nthen `rollup-resolve-plugin-settings-configuration`. The event receives the settings, the\n`params` and expects new settings on return.",
    "lineNumber": 242,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "RollupConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                          the configuration and that includes things like the\n                                          target information, its entry settings, output\n                                          paths, etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 379,
    "kind": "method",
    "name": "_getReplaceSettings",
    "memberof": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration#_getReplaceSettings",
    "access": "protected",
    "description": "Defines the settings for the `replace` plugin.\nThis method uses the reducer event `rollup-replace-plugin-settings-configuration-for-browser`\nor `rollup-replace-plugin-settings-configuration-for-node`, depending on the target type, and\nthen `rollup-replace-plugin-settings-configuration`. The event receives the settings, the\n`params` and expects new settings on return.",
    "lineNumber": 273,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "RollupConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                          the configuration and that includes things like the\n                                          target information, its entry settings, output\n                                          paths, etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 380,
    "kind": "method",
    "name": "_getBabelSettings",
    "memberof": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration#_getBabelSettings",
    "access": "protected",
    "description": "Defines the settings for the `babel` plugin.\nThis method uses the reducer event `rollup-babel-plugin-settings-configuration-for-browser`\nor `rollup-babel-plugin-settings-configuration-for-node`, depending on the target type, and\nthen `rollup-babel-plugin-settings-configuration`. The event receives the settings, the\n`params` and expects new settings on return.",
    "lineNumber": 302,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "RollupConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                          the configuration and that includes things like the\n                                          target information, its entry settings, output\n                                          paths, etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 381,
    "kind": "method",
    "name": "_getCommonJSSettings",
    "memberof": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration#_getCommonJSSettings",
    "access": "protected",
    "description": "Defines the settings for the `commonjs` plugin.\nThis method uses the reducer event `rollup-commonjs-plugin-settings-configuration-for-browser`\nor `rollup-commonjs-plugin-settings-configuration-for-node`, depending on the target type, and\nthen `rollup-commonjs-plugin-settings-configuration`. The event receives the settings, the\n`params` and expects new settings on return.",
    "lineNumber": 346,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "RollupConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                          the configuration and that includes things like the\n                                          target information, its entry settings, output\n                                          paths, etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 382,
    "kind": "method",
    "name": "_getSASSSettings",
    "memberof": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration#_getSASSSettings",
    "access": "protected",
    "description": "Defines the settings for the `sass` plugin.\nThis method uses the reducer event `rollup-sass-plugin-settings-configuration-for-browser`\nor `rollup-sass-plugin-settings-configuration-for-node`, depending on the target type, and\nthen `rollup-sass-plugin-settings-configuration`. The event receives the settings, the\n`params` and expects new settings on return.",
    "lineNumber": 380,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "RollupConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                          the configuration and that includes things like the\n                                          target information, its entry settings, output\n                                          paths, etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 383,
    "kind": "method",
    "name": "_getCSSSettings",
    "memberof": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration#_getCSSSettings",
    "access": "protected",
    "description": "Defines the settings for the `css` plugin.\nThis method uses the reducer event `rollup-css-plugin-settings-configuration-for-browser`\nor `rollup-css-plugin-settings-configuration-for-node`, depending on the target type, and\nthen `rollup-css-plugin-settings-configuration`. The event receives the settings, the\n`params` and expects new settings on return.",
    "lineNumber": 436,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "RollupConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                          the configuration and that includes things like the\n                                          target information, its entry settings, output\n                                          paths, etc."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "stats",
        "description": "A function to send to the plugins that support\n                                          logging stats entries."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 384,
    "kind": "method",
    "name": "_getStyleheetAssetsSettings",
    "memberof": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration#_getStyleheetAssetsSettings",
    "access": "protected",
    "description": "Defines the settings for the `stylesheetAssets` plugin, which is a projext's plugin that takes\ncare of copying and fixing the paths for the files linked on stylesheets.\nThis method uses the reducer event\n`rollup-stylesheet-assets-plugin-settings-configuration-for-browser` or\n`rollup-stylesheet-assets-plugin-settings-configuration-for-node`, depending on the target\ntype, and then `rollup-stylesheet-assets-plugin-settings-configuration`. The event receives\nthe settings, the `params` and expects new settings on return.",
    "lineNumber": 488,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "RollupConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                          the configuration and that includes things like the\n                                          target information, its entry settings, output\n                                          paths, etc."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "stats",
        "description": "A function to send to the plugins that support\n                                          logging stats entries."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 385,
    "kind": "method",
    "name": "_getStylesheetModulesFixerSettings",
    "memberof": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration#_getStylesheetModulesFixerSettings",
    "access": "protected",
    "description": "Defines the settings for the `stylesheetModulesFixer` plugin, which is a projext's plugin that\nparses modules for CSS (stylsheet that Rollup transforms into ES modules) and if they inject\nthe CSS on the browser or they code was moved to a separate bundle, replace their default\nexports for the named export for CSS Modules locals.\nThis method uses the reducer event\n`rollup-stylesheet-modules-fixer-plugin-settings-configuration-for-browser` or\n`rollup-stylesheet-modules-fixer-plugin-settings-configuration-for-node`, depending on the\ntarget type, and then `rollup-stylesheet-modules-fixer-plugin-settings-configuration`. The\nevent receives the settings, the `params` and expects new settings on return.",
    "lineNumber": 543,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "RollupConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                          the configuration and that includes things like the\n                                          target information, its entry settings, output\n                                          paths, etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 386,
    "kind": "method",
    "name": "_getStyleheetAssetsHelperSettings",
    "memberof": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration#_getStyleheetAssetsHelperSettings",
    "access": "protected",
    "description": "Defines the settings for the `stylesheetAssets` helper plugin, which is a projext's plugin\nthat wraps the default exports of stylesheets Rollup transforms into ES modules so\nthe `stylesheetAssets` plugin can find them and parse them.\nThis method uses the reducer event\n`rollup-stylesheet-assets-helper-plugin-settings-configuration`, it receives the settings,\nthe `params` and expects new settings on return.",
    "lineNumber": 586,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "RollupConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                          the configuration and that includes things like the\n                                          target information, its entry settings, output\n                                          paths, etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 387,
    "kind": "method",
    "name": "_getHTMLSettings",
    "memberof": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration#_getHTMLSettings",
    "access": "protected",
    "description": "Defines the settings for the `html` plugin.\nThis method uses the reducer event `rollup-html-plugin-settings-configuration-for-browser`\nor `rollup-html-plugin-settings-configuration-for-node`, depending on the target type, and\nthen `rollup-html-plugin-settings-configuration`. The event receives the settings, the\n`params` and expects new settings on return.",
    "lineNumber": 623,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "RollupConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                          the configuration and that includes things like the\n                                          target information, its entry settings, output\n                                          paths, etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 388,
    "kind": "method",
    "name": "_getJSONSettings",
    "memberof": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration#_getJSONSettings",
    "access": "protected",
    "description": "Defines the settings for the `json` plugin.\nThis method uses the reducer event `rollup-json-plugin-settings-configuration-for-browser`\nor `rollup-json-plugin-settings-configuration-for-node`, depending on the target type, and\nthen `rollup-json-plugin-settings-configuration`. The event receives the settings, the\n`params` and expects new settings on return.",
    "lineNumber": 654,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "RollupConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                          the configuration and that includes things like the\n                                          target information, its entry settings, output\n                                          paths, etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 389,
    "kind": "method",
    "name": "_getURLsSettings",
    "memberof": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration#_getURLsSettings",
    "access": "protected",
    "description": "Defines the settings for the `stylesheetAssets` plugin, which is a projext's plugin that\ntransform files matching a filter by copying its contents into a new file on the output\ndirectory and replacing its default export with a URL for them.\nThis method uses the reducer event `rollup-urls-plugin-settings-configuration-for-browser` or\n`rollup-urls-plugin-settings-configuration-for-node`, depending on the target type, and then\n`rollup-urls-plugin-settings-configuration`. The event receives the settings, the `params`\nand expects new settings on return.",
    "lineNumber": 689,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "RollupConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                          the configuration and that includes things like the\n                                          target information, its entry settings, output\n                                          paths, etc."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "stats",
        "description": "A function to send to the plugins that support\n                                          logging stats entries."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 390,
    "kind": "method",
    "name": "_getTemplateSettings",
    "memberof": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration#_getTemplateSettings",
    "access": "protected",
    "description": "Defines the settings for the `template` plugin, which is a projext's plugin that generates\nand HTML file and injects a list of JS and CSS files.\nThis method uses the reducer event `rollup-html-plugin-settings-configuration-for-browser` or\n`rollup-html-plugin-settings-configuration-for-node`, depending on the target type, and then\n`rollup-html-plugin-settings-configuration`. The event receives the settings, the `params`\nand expects new settings on return.",
    "lineNumber": 730,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "RollupConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                          the configuration and that includes things like the\n                                          target information, its entry settings, output\n                                          paths, etc."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "stats",
        "description": "A function to send to the plugins that support\n                                          logging stats entries."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 391,
    "kind": "method",
    "name": "_getWatchSettings",
    "memberof": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration#_getWatchSettings",
    "access": "protected",
    "description": "Defines the settings for the Rollup watcher.\nThis method uses the reducer event `rollup-watch-plugin-settings-configuration-for-browser` or\n`rollup-watch-plugin-settings-configuration-for-node`, depending on the target type, and then\n`rollup-watch-plugin-settings-configuration`. The event receives the settings, the `params`\nand expects new settings on return.",
    "lineNumber": 769,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "RollupConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                          the configuration and that includes things like the\n                                          target information, its entry settings, output\n                                          paths, etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 392,
    "kind": "method",
    "name": "_getDevServerSettings",
    "memberof": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration#_getDevServerSettings",
    "access": "protected",
    "description": "Defines the settings for the `devServer` plugin, which is a projext's plugin for running web\napps while on development.\nThis method uses the reducer event `rollup-dev-server-plugin-settings-configuration`, it\nreceives the settings, the `params` and expects new settings on return.",
    "lineNumber": 798,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "RollupConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                          the configuration and that includes things like the\n                                          target information, its entry settings, output\n                                          paths, etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 393,
    "kind": "method",
    "name": "_getUglifySettings",
    "memberof": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration#_getUglifySettings",
    "access": "protected",
    "description": "Defines the settings for the `ugify` plugin.\nThis method uses the reducer event `rollup-uglify-plugin-settings-configuration-for-browser`\nor `rollup-uglify-plugin-settings-configuration-for-node`, depending on the target type, and\nthen `rollup-uglify-plugin-settings-configuration`. The event receives the settings, the\n`params` and expects new settings on return.",
    "lineNumber": 863,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "RollupConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                          the configuration and that includes things like the\n                                          target information, its entry settings, output\n                                          paths, etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 394,
    "kind": "method",
    "name": "_getCompressionSettings",
    "memberof": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration#_getCompressionSettings",
    "access": "protected",
    "description": "Defines the settings for the `compression` plugin, which is a projext's plugin that takes care\nof compressing the generated assets using Gzip.\nThis method uses the reducer event\n`rollup-compression-plugin-settings-configuration-for-browser` or\n`rollup-compression-plugin-settings-configuration-for-node`, depending on the target type,\nand then `rollup-compression-plugin-settings-configuration`. The event receives the settings,\nthe `params` and expects new settings on return.",
    "lineNumber": 898,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "RollupConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                          the configuration and that includes things like the\n                                          target information, its entry settings, output\n                                          paths, etc."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "stats",
        "description": "A function to send to the plugins that support\n                                          logging stats entries."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 395,
    "kind": "method",
    "name": "_getStatsLogSettings",
    "memberof": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration#_getStatsLogSettings",
    "access": "protected",
    "description": "Defines the settings for the `stats` plugin `log` _\"sub plugin\"_. The `stats` plugin is a\nprojext plugin that allows other plugins and services to add stats entries to eventually\nshow a report table when the bundle process finishes. The `log` _\"sub plugin\"_ is the method\nthat you would add to the Rollup plugins queue and that it actually logs the report table.\nThis method uses the reducer event\n`rollup-stats-plugin-settings-configuration-for-browser` or\n`rollup-stats-plugin-settings-configuration-for-node`, depending on the target type,\nand then `rollup-stats-plugin-settings-configuration`. The event receives the settings,\nthe `params` and expects new settings on return.",
    "lineNumber": 938,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "RollupConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                          the configuration and that includes things like the\n                                          target information, its entry settings, output\n                                          paths, etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 396,
    "kind": "method",
    "name": "_getNodeRunnerSettings",
    "memberof": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration#_getNodeRunnerSettings",
    "access": "protected",
    "description": "Defines the settings for the `nodeRunner` plugin, which is a projext's plugin for running Node\napps while on development.\nThis method uses the reducer event `rollup-node-runner-plugin-settings-configuration`, it\nreceives the settings, the `params` and expects new settings on return.",
    "lineNumber": 994,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "RollupConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                          the configuration and that includes things like the\n                                          target information, its entry settings, output\n                                          paths, etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 397,
    "kind": "method",
    "name": "_getAssetsRules",
    "memberof": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration#_getAssetsRules",
    "access": "protected",
    "description": "This a helper method that generates a dictionary of {@link ProjextRollupPluginURL}\ndefinitions for common assets (fonts, images and the favicon). These definitions can be used\non different plugin settings.",
    "lineNumber": 1020,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "RollupConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                          the configuration and that includes things like the\n                                          target information, its entry settings, output\n                                          paths, etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 398,
    "kind": "method",
    "name": "_getARuleForAllTheAssets",
    "memberof": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration#_getARuleForAllTheAssets",
    "access": "protected",
    "description": "This a helper method that generates a set of `include` and `exclude` rules to match all\npossible generated assets on the output directory.",
    "lineNumber": 1065,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "RollupConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                          the configuration and that includes things like the\n                                          target information, its entry settings, output\n                                          paths, etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 399,
    "kind": "method",
    "name": "_getSourceMap",
    "memberof": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration#_getSourceMap",
    "access": "protected",
    "description": "Helper method for the stylsheet processor. It searches and retrieves a source map comment\nfrom a given CSS code.",
    "lineNumber": 1100,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "The CSS code where the source map will be retrieved from."
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "If the source map it's found, it will return it, otherwise, it will return\n                  `null`."
    }
  },
  {
    "__docId__": 400,
    "kind": "method",
    "name": "_getStylesProcessor",
    "memberof": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/pluginsConfiguration.js~RollupPluginSettingsConfiguration#_getStylesProcessor",
    "access": "protected",
    "description": "This is a custom stylesheet processor for the `sass` and `css` plugin. It makes sure all\ngenerated styles have a source map that plugins like `stylesheetAssets` can use. It also\ntakes care of implementing CSS modules if the target has them enabled.",
    "lineNumber": 1125,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "modules",
        "description": "Whether or not CSS modules are enabled."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "processorOptions",
        "description": "Custom options for the processor."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "processorOptions.map",
        "description": "Whether or not a source map should be generated\n                                              for the stylesheet. When generated with the\n                                              `sass` plugin, the source map already comes\n                                              with the code; but when generated with the\n                                              `css` plugin, it should be added."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 401,
    "kind": "variable",
    "name": "rollupPluginSettingsConfiguration",
    "memberof": "src/services/configurations/pluginsConfiguration.js",
    "static": true,
    "longname": "src/services/configurations/pluginsConfiguration.js~rollupPluginSettingsConfiguration",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/services/configurations/pluginsConfiguration.js",
    "importStyle": "{rollupPluginSettingsConfiguration}",
    "description": "The service provider that once registered on the app container will set an instance of\n`RollupPluginSettingsConfiguration` as the `rollupPluginSettingsConfiguration` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(rollupPluginSettingsConfiguration);\n// Getting access to the service instance\nconst rollupPluginSettingsConfiguration = container.get('rollupPluginSettingsConfiguration');"
    ],
    "lineNumber": 1207,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 402,
    "kind": "file",
    "name": "src/services/server/index.js",
    "content": "const { rollupMiddleware } = require('./middleware');\n\nmodule.exports = {\n  rollupMiddleware,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/src/services/server/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 403,
    "kind": "file",
    "name": "src/services/server/middleware.js",
    "content": "const path = require('path');\nconst rollup = require('rollup');\nconst fs = require('fs-extra');\nconst mime = require('mime');\nconst { provider } = require('jimple');\nconst { deferred } = require('wootils/shared');\n/**\n * This service creates, configures and manages an Express-like middleware for bundling Rollup.\n */\nclass RollupMiddleware {\n  /**\n   * Class constructor.\n   * @param {Logger}              appLogger           To log information messages.\n   * @param {Events}              events              To reduce the middlewares configuration.\n   * @param {Targets}             targets             To get targets information.\n   * @param {RollupConfiguration} rollupConfiguration To get a target Rollup configuration.\n   */\n  constructor(appLogger, events, targets, rollupConfiguration) {\n    /**\n     * A local reference for the `appLogger` service.\n     * @type {Logger}\n     */\n    this.appLogger = appLogger;\n    /**\n     * A local reference for the `events` service.\n     * @type {Events}\n     */\n    this.events = events;\n    /**\n     * A local reference for the `targets` service.\n     * @type {Targets}\n     */\n    this.targets = targets;\n    /**\n     * A local reference for the `rollupConfiguration` service.\n     * @type {RollupConfiguration}\n     */\n    this.rollupConfiguration = rollupConfiguration;\n    // Set the default mime type for the `mime` module.\n    mime.default_type = 'text/plain';\n    /**\n     * The instance of the Rollup watcher.\n     * @type {?Object}\n     */\n    this._watcher = null;\n    /**\n     * A dictionary of directories the middleware use as root for their file system.\n     * It uses the targets names as the keys.\n     * @type {Object}\n     * @ignore\n     * @access protected\n     */\n    this._directories = {};\n    /**\n     * A dictionary of flags that indicate if a target middleware finished bundling and if the\n     * file system can be accessed..\n     * The idea is that file system can't be used until Rollup finishes its process.\n     * It uses the targets names as the keys.\n     * @type {Object}\n     * @ignore\n     * @access protected\n     */\n    this._fileSystemsReady = {};\n    /**\n     * A dictionary of deferred promises the service uses to return when asked for a file system\n     * while its Rollup hasn't finished compiling.\n     * It uses the targets names as the keys.\n     * @type {Object}\n     * @ignore\n     * @access protected\n     */\n    this._fileSystemsDeferreds = {};\n  }\n  /**\n   * Generate the middleware for a given target.\n   * @param {string} targetToBuild The name of the target that will be builded on the middleware.\n   * @param {string} targetToServe The name of the target that will implement the middleware.\n   *                               When the other target is builded, it will assume that is on the\n   *                               distribution directory, and if the target serving it is being\n   *                               executed from the source directory it won't be able to use the\n   *                               file system without hardcoding some relatives paths from the\n   *                               build to the source; to avoid that, the method gets the build\n   *                               path of this target, so when using `getDirectory()`, it\n   *                               will think they are both on the distribution directory and the\n   *                               paths can be created relative to that.\n   * @return {MiddlewareInformation}\n   */\n  generate(targetToBuild, targetToServe) {\n    // Get the target information.\n    const target = this.targets.getTarget(targetToBuild);\n    // Set the target working directory as the target that serves it build folder\n    this._directories[target.name] = this.targets.getTarget(targetToServe).paths.build;\n    // Set the flag indicating the file system is not ready.\n    this._fileSystemsReady[target.name] = false;\n    // Create the deferred promise for when the file system is ready.\n    this._fileSystemsDeferreds[target.name] = deferred();\n    // Define the functions to get the file system promise and the middleware root directory.\n    const getDirectory = () => this._directories[target.name];\n    const getFileSystem = () => this._fileSystem(target);\n    // Define the function to get the target middleware.\n    const middleware = () => this._middleware(target);\n\n    return {\n      getDirectory,\n      getFileSystem,\n      middleware,\n    };\n  }\n  /**\n   * Gets access to file system. This returns a promise so the file system can't be accessed until\n   * Rollup finishes the bundling.\n   * @param {Target} target The target owner of the middleware.\n   * @return {Promise<FileSystem,Error>}\n   * @access protected\n   * @ignore\n   */\n  _fileSystem(target) {\n    return this._fileSystemsReady[target.name] ?\n      Promise.resolve(fs) :\n      this._fileSystemsDeferreds[target.name].promise;\n  }\n  /**\n   * Gets the middleware the will serve the bundled files.\n   * @param {Target} target The information of the target to bundle.\n   * @return {Middleware}\n   * @access protected\n   * @ignore\n   */\n  _middleware(target) {\n    // Bundle the target.\n    this._compile(target);\n    return (req, res, next) => {\n      // If the file system is ready...\n      if (this._fileSystemsReady[target.name]) {\n        // Remove any query string from the requested path.\n        const urlPath = decodeURI(req.url.split('?').shift());\n        // Get the file absolute path.\n        const filepath = path.join(target.paths.build, urlPath);\n        // If the file exists...\n        if (fs.pathExistsSync(filepath)) {\n          // Set the type header with the file mime type.\n          res.setHeader('Content-Type', mime.getType(filepath));\n          // Try to respond with the file contents.\n          res.sendFile(filepath, (error) => {\n            /**\n             * If sending the file fails, move to the next middleware with an error, otherwise,\n             * end the response.\n             */\n            if (error) {\n              next(error);\n            } else {\n              res.end();\n            }\n          });\n        } else {\n          // If the file doesn't exist, move to the next middleware.\n          next();\n        }\n      } else {\n        /**\n         * If the file system is not ready, log a message, wait for the file system and then\n         * move to the next middleware.\n         */\n        this.appLogger.warning(`Request on hold until the build is ready: ${req.originalUrl}`);\n        this._fileSystem(target)\n        .then(() => {\n          next();\n        });\n      }\n    };\n  }\n  /**\n   * Compile a target and watch for changes.\n   * @param {Target} target The target information.\n   * @access protected\n   * @ignore\n   */\n  _compile(target) {\n    // Make sure there's not an instance already.\n    if (!this._watcher) {\n      // Get the Rollup configuration for the target.\n      const configuration = this.rollupConfiguration.getConfig(target, 'development');\n      // Create the watcher instance.\n      this._watcher = rollup.watch(configuration);\n      // Listen for the watcher events.\n      this._watcher.on('event', (event) => {\n        // eslint-disable-next-line default-case\n        switch (event.code) {\n        case 'START':\n          this._onStart(target);\n          break;\n        case 'END':\n          this._onFinish(target);\n          break;\n        case 'ERROR':\n          this._onError(target, event);\n          break;\n        case 'FATAL':\n          this._onError(target, event, true);\n          break;\n        }\n      });\n    }\n  }\n  /**\n   * This is called when Rollup starts the bundling process. It logs an information message and\n   * resets the file system flag for a target.\n   * @param {Target} target The target information.\n   * @access protected\n   * @ignore\n   */\n  _onStart(target) {\n    setTimeout(() => {\n      this.appLogger.warning('Creating the Rollup build...');\n    }, 1);\n    if (!this._fileSystemsDeferreds[target.name]) {\n      this._fileSystemsReady[target.name] = false;\n      this._fileSystemsDeferreds[target.name] = deferred();\n    }\n  }\n  /**\n   * This is called when Rollup finishes the bundling process. It logs an information message\n   * and resolves the target file system promise.\n   * @param {Target} target The target information.\n   * @access protected\n   * @ignore\n   */\n  _onFinish(target) {\n    setTimeout(() => {\n      this.appLogger.success('The Rollup build is ready');\n    }, 1);\n    this._fileSystemsReady[target.name] = true;\n    this._fileSystemsDeferreds[target.name].resolve(fs);\n    delete this._fileSystemsDeferreds[target.name];\n  }\n  /**\n   * This is called when Rollup finds an error on the build process. It just logs an error message.\n   * @access protected\n   * @ignore\n   */\n  _onError(target, event, fatal = false) {\n    const message = fatal ?\n      'The Rollup build can\\'t be created' :\n      'There was a problem while creating the Rollup build';\n    this.appLogger.error(message);\n    if (event.error) {\n      this.appLogger.error(event.error);\n    }\n    if (fatal) {\n      process.exit(1);\n    }\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `RollupMiddleware` as the `rollupMiddleware` service.\n * @example\n * // Register it on the container\n * container.register(rollupMiddleware);\n * // Getting access to the service instance\n * const rollupMiddleware = container.get('rollupMiddleware');\n * @type {Provider}\n */\nconst rollupMiddleware = provider((app) => {\n  app.set('rollupMiddleware', () => new RollupMiddleware(\n    app.get('appLogger'),\n    app.get('events'),\n    app.get('targets'),\n    app.get('rollupConfiguration')\n  ));\n});\n\nmodule.exports = {\n  RollupMiddleware,\n  rollupMiddleware,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/src/services/server/middleware.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 404,
    "kind": "class",
    "name": "RollupMiddleware",
    "memberof": "src/services/server/middleware.js",
    "static": true,
    "longname": "src/services/server/middleware.js~RollupMiddleware",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/services/server/middleware.js",
    "importStyle": "{RollupMiddleware}",
    "description": "This service creates, configures and manages an Express-like middleware for bundling Rollup.",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 405,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/server/middleware.js~RollupMiddleware",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/server/middleware.js~RollupMiddleware#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Logger"
        ],
        "spread": false,
        "optional": false,
        "name": "appLogger",
        "description": "To log information messages."
      },
      {
        "nullable": null,
        "types": [
          "Events"
        ],
        "spread": false,
        "optional": false,
        "name": "events",
        "description": "To reduce the middlewares configuration."
      },
      {
        "nullable": null,
        "types": [
          "Targets"
        ],
        "spread": false,
        "optional": false,
        "name": "targets",
        "description": "To get targets information."
      },
      {
        "nullable": null,
        "types": [
          "RollupConfiguration"
        ],
        "spread": false,
        "optional": false,
        "name": "rollupConfiguration",
        "description": "To get a target Rollup configuration."
      }
    ]
  },
  {
    "__docId__": 406,
    "kind": "member",
    "name": "appLogger",
    "memberof": "src/services/server/middleware.js~RollupMiddleware",
    "static": false,
    "longname": "src/services/server/middleware.js~RollupMiddleware#appLogger",
    "access": "public",
    "description": "A local reference for the `appLogger` service.",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "Logger"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 407,
    "kind": "member",
    "name": "events",
    "memberof": "src/services/server/middleware.js~RollupMiddleware",
    "static": false,
    "longname": "src/services/server/middleware.js~RollupMiddleware#events",
    "access": "public",
    "description": "A local reference for the `events` service.",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "Events"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 408,
    "kind": "member",
    "name": "targets",
    "memberof": "src/services/server/middleware.js~RollupMiddleware",
    "static": false,
    "longname": "src/services/server/middleware.js~RollupMiddleware#targets",
    "access": "public",
    "description": "A local reference for the `targets` service.",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "Targets"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 409,
    "kind": "member",
    "name": "rollupConfiguration",
    "memberof": "src/services/server/middleware.js~RollupMiddleware",
    "static": false,
    "longname": "src/services/server/middleware.js~RollupMiddleware#rollupConfiguration",
    "access": "public",
    "description": "A local reference for the `rollupConfiguration` service.",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "RollupConfiguration"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 410,
    "kind": "member",
    "name": "_watcher",
    "memberof": "src/services/server/middleware.js~RollupMiddleware",
    "static": false,
    "longname": "src/services/server/middleware.js~RollupMiddleware#_watcher",
    "access": "private",
    "description": "The instance of the Rollup watcher.",
    "lineNumber": 45,
    "type": {
      "nullable": true,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 411,
    "kind": "member",
    "name": "_directories",
    "memberof": "src/services/server/middleware.js~RollupMiddleware",
    "static": false,
    "longname": "src/services/server/middleware.js~RollupMiddleware#_directories",
    "access": "protected",
    "description": "A dictionary of directories the middleware use as root for their file system.\nIt uses the targets names as the keys.",
    "lineNumber": 53,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 412,
    "kind": "member",
    "name": "_fileSystemsReady",
    "memberof": "src/services/server/middleware.js~RollupMiddleware",
    "static": false,
    "longname": "src/services/server/middleware.js~RollupMiddleware#_fileSystemsReady",
    "access": "protected",
    "description": "A dictionary of flags that indicate if a target middleware finished bundling and if the\nfile system can be accessed..\nThe idea is that file system can't be used until Rollup finishes its process.\nIt uses the targets names as the keys.",
    "lineNumber": 63,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 413,
    "kind": "member",
    "name": "_fileSystemsDeferreds",
    "memberof": "src/services/server/middleware.js~RollupMiddleware",
    "static": false,
    "longname": "src/services/server/middleware.js~RollupMiddleware#_fileSystemsDeferreds",
    "access": "protected",
    "description": "A dictionary of deferred promises the service uses to return when asked for a file system\nwhile its Rollup hasn't finished compiling.\nIt uses the targets names as the keys.",
    "lineNumber": 72,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 414,
    "kind": "method",
    "name": "generate",
    "memberof": "src/services/server/middleware.js~RollupMiddleware",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/server/middleware.js~RollupMiddleware#generate",
    "access": "public",
    "description": "Generate the middleware for a given target.",
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "targetToBuild",
        "description": "The name of the target that will be builded on the middleware."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "targetToServe",
        "description": "The name of the target that will implement the middleware.\n                              When the other target is builded, it will assume that is on the\n                              distribution directory, and if the target serving it is being\n                              executed from the source directory it won't be able to use the\n                              file system without hardcoding some relatives paths from the\n                              build to the source; to avoid that, the method gets the build\n                              path of this target, so when using `getDirectory()`, it\n                              will think they are both on the distribution directory and the\n                              paths can be created relative to that."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MiddlewareInformation"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 415,
    "kind": "method",
    "name": "_fileSystem",
    "memberof": "src/services/server/middleware.js~RollupMiddleware",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/server/middleware.js~RollupMiddleware#_fileSystem",
    "access": "protected",
    "description": "Gets access to file system. This returns a promise so the file system can't be accessed until\nRollup finishes the bundling.",
    "lineNumber": 117,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target owner of the middleware."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<FileSystem,Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 416,
    "kind": "method",
    "name": "_middleware",
    "memberof": "src/services/server/middleware.js~RollupMiddleware",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/server/middleware.js~RollupMiddleware#_middleware",
    "access": "protected",
    "description": "Gets the middleware the will serve the bundled files.",
    "lineNumber": 129,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The information of the target to bundle."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Middleware"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 417,
    "kind": "method",
    "name": "_compile",
    "memberof": "src/services/server/middleware.js~RollupMiddleware",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/server/middleware.js~RollupMiddleware#_compile",
    "access": "protected",
    "description": "Compile a target and watch for changes.",
    "lineNumber": 178,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      }
    ],
    "return": null
  },
  {
    "__docId__": 419,
    "kind": "method",
    "name": "_onStart",
    "memberof": "src/services/server/middleware.js~RollupMiddleware",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/server/middleware.js~RollupMiddleware#_onStart",
    "access": "protected",
    "description": "This is called when Rollup starts the bundling process. It logs an information message and\nresets the file system flag for a target.",
    "lineNumber": 212,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      }
    ],
    "return": null
  },
  {
    "__docId__": 420,
    "kind": "method",
    "name": "_onFinish",
    "memberof": "src/services/server/middleware.js~RollupMiddleware",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/server/middleware.js~RollupMiddleware#_onFinish",
    "access": "protected",
    "description": "This is called when Rollup finishes the bundling process. It logs an information message\nand resolves the target file system promise.",
    "lineNumber": 228,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      }
    ],
    "return": null
  },
  {
    "__docId__": 421,
    "kind": "method",
    "name": "_onError",
    "memberof": "src/services/server/middleware.js~RollupMiddleware",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/server/middleware.js~RollupMiddleware#_onError",
    "access": "protected",
    "description": "This is called when Rollup finds an error on the build process. It just logs an error message.",
    "lineNumber": 241,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "event",
        "types": [
          "*"
        ]
      },
      {
        "name": "fatal",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": null
  },
  {
    "__docId__": 422,
    "kind": "variable",
    "name": "rollupMiddleware",
    "memberof": "src/services/server/middleware.js",
    "static": true,
    "longname": "src/services/server/middleware.js~rollupMiddleware",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-rollup/src/services/server/middleware.js",
    "importStyle": "{rollupMiddleware}",
    "description": "The service provider that once registered on the app container will set an instance of\n`RollupMiddleware` as the `rollupMiddleware` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(rollupMiddleware);\n// Getting access to the service instance\nconst rollupMiddleware = container.get('rollupMiddleware');"
    ],
    "lineNumber": 264,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 423,
    "kind": "file",
    "name": "src/typedef.js",
    "content": "/**\n * ================================================================================================\n * Externals\n * ================================================================================================\n */\n\n/**\n * @external {Jimple}\n * https://yarnpkg.com/en/package/jimple\n */\n\n/**\n * @external {Jimpex}\n * https://yarnpkg.com/en/package/jimpex\n */\n\n/**\n * @external {Express}\n * https://expressjs.com\n */\n\n/**\n * @external {FileSystem}\n * https://nodejs.org/api/fs.html\n */\n\n/**\n * @external {PathUtils}\n * https://homer0.github.io/wootils/class/wootils/node/pathUtils.js~PathUtils.html\n */\n\n/**\n * @external {Logger}\n * https://homer0.github.io/wootils/class/wootils/node/logger.js~Logger.html\n */\n\n/**\n * @external {EnvironmentUtils}\n * https://homer0.github.io/wootils/class/wootils/node/environmentUtils.js~EnvironmentUtils.html\n */\n\n/**\n * @external {Projext}\n * https://homer0.github.io/projext/class/src/app/index.js~Projext.html\n */\n\n/**\n * @external {BuildVersion}\n * https://homer0.github.io/projext/class/src/services/building/buildVersion.js~BuildVersion.html\n */\n\n/**\n * @external {Events}\n * https://homer0.github.io/projext/class/src/services/common/events.js~Events.html\n */\n\n/**\n * @external {Targets}\n * https://homer0.github.io/projext/class/src/services/targets/targets.js~Targets.html\n */\n\n/**\n * @external {TargetsFileRules}\n *  ttps://homer0.github.io/projext/class/src/services/targets/targetsFileRules/targetsFileRules.js~TargetsFileRules.html\n  */\n\n/**\n * @external {TargetFileRules}\n * https://homer0.github.io/projext/typedef/index.html#static-typedef-TargetFileRules\n */\n\n/**\n * @external {TargetsHTML}\n * https://homer0.github.io/projext/class/src/services/targets/targetsHTML.js~TargetsHTML.html\n */\n\n/**\n * @external {Target}\n * https://homer0.github.io/projext/typedef/index.html#static-typedef-Target\n */\n\n/**\n * @external {TargetConfigurationCreator}\n * https://homer0.github.io/projext/typedef/index.html#static-typedef-TargetConfigurationCreator\n */\n\n/**\n * @external {BabelConfiguration}\n *  ttps://homer0.github.io/projext/class/src/services/configurations/babelConfiguration.js~BabelConfiguration.html\n  */\n\n/**\n * @external {Middleware}\n * http://expressjs.com/en/guide/using-middleware.html\n */\n\n/**\n * @external {HTTPRequest}\n * https://nodejs.org/api/http.html#http_class_http_clientrequest\n */\n\n/**\n * @external {HTTPResponse}\n * https://nodejs.org/api/http.html#http_class_http_serverresponse\n */\n\n/**\n * ================================================================================================\n * Plugins > Commons\n * ================================================================================================\n */\n\n/**\n * @typedef {function} RollupFilter\n * @param {string} filepath The path to validate.\n * @return {boolean} Whether or not the path is valid.\n */\n\n/**\n * @typedef {function} RollupStylesheetProcessor\n * @param {string} code The style code to process.\n * @return {Promise<StringOrObject,Error>} If the Promise gets resolved as a string, that would\n *                                          be used as the style code to either return or inject.\n *                                          But if it gets resolved as an `Object`, it's expected\n *                                          for it to have a `css`  key with the style code, the\n *                                          rest of the keys will be added as named exports.\n */\n\n/**\n * @typedef {Object} RollupFileDefinition\n * @param {string} code The file contents.\n * @param {Object} map Extra information for the file map.\n */\n\n/**\n * @typedef {function} ProjextRollupPluginsStats\n * @param {string} plugin   The name of the plugin that generated/copied the file.\n * @param {string} filepath The file that was generated/copied.\n */\n\n/**\n * @typedef {Object} ProjextRollupPluginURL\n * @property {Array}  include A list of expressions the name of a file should match in order to be\n *                            processed by the plugin.\n * @property {Array}  exclude A list of expressions the name of a file shouldn't match in order to\n *                            be processed by the plugin.\n * @property {string} output  The path to the where the a file would be copied. It supports the\n *                            placeholders `[name]` for the file name and `[ext]` for its\n *                            extension.\n * @property {string} url     The URL for the file. It supports the placeholders `[name]` for the\n *                            file name and `[ext]` for its extension.\n */\n\n/**\n * ================================================================================================\n * Plugins > Compression\n * ================================================================================================\n */\n\n/**\n * @typedef {Object} ProjextRollupCompressionPluginOptions\n * @property {string}                    folder  The directory where the plugin will search for\n *                                               files.\n * @property {Array}                     include A list of expressions the name of a file should\n *                                               match in order to be processed by the plugin.\n * @property {Array}                     exclude A list of expressions the name of a file\n *                                               shouldn't match in order to be processed by the\n *                                               plugin.\n * @property {ProjextRollupPluginsStats} stats   The function the plugin will call in order to\n *                                               inform a file was created.\n */\n\n/**\n * @typedef {Object} ProjextRollupCompressionPluginEntry\n * @property {string} original   The path to the file that was compressed.\n * @property {string} compressed The path to the compressed file.\n */\n\n/**\n * ================================================================================================\n * Plugins > CSS\n * ================================================================================================\n */\n\n/**\n * @typedef {Object} ProjextRollupCSSPluginOptions\n * @property {Array}                      include      A list of expressions the name of a file\n *                                                     should match in order to be processed by\n *                                                     the plugin.\n * @property {Array}                      exclude      A list of expressions the name of a file\n *                                                     shouldn't match in order to be processed by\n *                                                     the plugin.\n * @property {boolean}                    insert       Whether the styles should be injected on\n *                                                     the app `<head >` when the bundle finishes\n *                                                     loading.\n * @property {string|boolean}             output       This can be the name a file where all the\n *                                                     files that match the filter would be\n *                                                     bundled. The option can also be set to\n *                                                     `false` so the styles would be returned as\n *                                                     a string when `require`d.\n * @property {?RollupStylesheetProcessor} processor    A custom function to processed the styles.\n * @property {string}                     insertFnName If `insert` is `true`, this will be used as\n *                                                     the name of the function in charge of\n *                                                     injecting the styles.\n * @property {ProjextRollupPluginsStats}  stats        The function the plugin will call in order\n *                                                     to inform a file was created.\n */\n\n/**\n * ================================================================================================\n * Plugins > DevServer\n * ================================================================================================\n */\n\n/**\n * @typedef {function} ProjextRollupDevServerPluginEvent\n * @param {ProjextRollupDevServerPlugin} plugin\n */\n\n/**\n * @typedef {Object} ProjextRollupDevServerPluginOptions\n * @property {string}                            host               The server hostname.\n * @property {number}                            port               The server port.\n * @property {Array|string}                      contentBase        The directory from where the\n *                                                                  files are going to be served.\n *                                                                  It can be a single directory\n *                                                                  or a list of them.\n * @property {boolean}                           historyApiFallback Whether or not the server\n *                                                                  should redirect the user to\n *                                                                  the `index.html` after a\n *                                                                  `404`.\n * @property {null|HTTPSOptions}                 https              The required files to run the\n *                                                                  server on HTTPs. They are the\n *                                                                  same that `https.createServer`\n *                                                                  supports.\n * @property {boolean}                           open               Whether or not the browser\n *                                                                  should be opened after\n *                                                                  starting the server.\n * @property {?Logger}                           logger             A custom logger to log the\n *                                                                  server events.\n * @property {ProjextRollupDevServerPluginEvent} onStart            A callback to be called when\n *                                                                  the server starts.\n * @property {ProjextRollupDevServerPluginEvent} onStop             A callback to be called when\n *                                                                  the server stops.\n */\n\n/**\n * ================================================================================================\n * Plugins > NodeRunner\n * ================================================================================================\n */\n\n/**\n * @typedef {function} ProjextRollupNodeRunnerPluginEvent\n * @param {ProjextRollupNodeRunnerPlugin} plugin\n */\n\n/**\n * @typedef {Object} ProjextRollupNodeRunnerPluginOptions\n * @property {string}                             file    The file to execute\n * @property {?Logger}                            logger  A custom logger to log the server\n *                                                        events.\n * @property {ProjextRollupNodeRunnerPluginEvent} onStart A callback to be called when the\n *                                                        execution starts.\n * @property {ProjextRollupNodeRunnerPluginEvent} onStop  A callback to be called when the\n *                                                        execution stops.\n */\n\n/**\n * ================================================================================================\n * Plugins > Stats\n * ================================================================================================\n */\n\n/**\n * @typedef {Object} ProjextRollupStatsPluginOptions\n * @property {string} path The path to the directory where all the files are generated. The plugin\n *                         needs it so it can be removed when showing the files list.\n */\n\n/**\n * @typedef {Object} ProjextRollupStatsPluginReset\n * @property {function} intro The method Rollup calls to get code to add on the top of the bundle.\n *                            The plugin uses it as a _\"hook\"_ in order to reset the entries list\n *                            and thus, avoid duplicated entries when Rollup is on _\"watch mode\"_.\n */\n\n/**\n * @typedef {Object} ProjextRollupStatsPluginLogOptions\n * @property {Array}   extraEntries A list of extra entries to add.\n * @property {?Logger} logger       A custom instance of {@link Logger} to log the report table.\n */\n\n/**\n * @typedef {Object} ProjextRollupStatsPluginLog\n * @property {function} onwrite The method Rollup calls after writing the files on the file system.\n *                              When this happens, the plugin will log the report table on the\n *                              console.\n */\n\n/**\n * @typedef {Object} ProjextRollupStatsPluginCellsWidth\n * @property {number} plugin The width for the plugin's cell.\n * @property {number} file   The width for the file path cell.\n * @property {number} size   The width for the file size cell.\n */\n\n/**\n * ================================================================================================\n * Plugins > Stylesheet Assets\n * ================================================================================================\n */\n\n/**\n * @typedef {Object} ProjextRollupStylesheetAssetsPluginOptions\n * @property {string}                    stylesheet    The path to the CSS or JS file where the\n *                                                     styles should be fixed.\n * @property {Array}                     insertFnNames In case the `stylesheet` is a JS file, it's\n *                                                     possible that the styles are being injected\n *                                                     by a function, so this option can be used\n *                                                     the different function names the plugin\n *                                                     should search for in order to find CSS\n *                                                     blocks.\n * @property {ProjextRollupPluginURL}    urls          The set of URLs the plugin will use to\n *                                                     validate the files inside the stylesheet in\n *                                                     order to know if they should be processed,\n *                                                     where to copy them and which URL to use.\n * @property {ProjextRollupPluginsStats} stats         The function the plugin will call in order\n *                                                     to inform a file was created.\n */\n\n/**\n * @typedef {Object} ProjextRollupStylesheetAssetsHelperPluginOptions\n * @property {Array}  include A list of expressions the name of a file should match in order to be\n *                            processed by the plugin.\n * @property {Array}  exclude A list of expressions the name of a file shouldn't match in order to\n *                            be processed by the plugin.\n * @property {string} fnName  The name of the function that will be used to wrap the code.\n */\n\n/**\n * ================================================================================================\n * Plugins > Stylesheet Modules Fixer\n * ================================================================================================\n */\n\n/**\n * @typedef {Object} ProjextRollupStylesheetModulesFixerPluginOptions\n * @property {Array}  include           A list of expressions the name of a file should match in\n *                                      order to be processed by the plugin.\n * @property {Array}  exclude           A list of expressions the name of a file shouldn't match\n *                                      in order to be processed by the plugin.\n * @property {string} modulesExportName The name of the export statement for the CSS modules\n *                                      locals.\n */\n\n/**\n * ================================================================================================\n * Plugins > Template\n * ================================================================================================\n */\n\n/**\n * @typedef {Object} ProjextRollupTemplatePluginOptions\n * @property {string}                    template      The path to the template file the plugin\n *                                                     will use to inject the JS and CSS files.\n * @property {string}                    output        The path where the final file will be\n *                                                     written.\n * @property {Array}                     scripts       A list of JS files that will be linked on\n *                                                     the template.\n * @property {boolean}                   scriptsAsync  Whether or not to use `async` attribute on\n *                                                     the script tags.\n * @property {boolean}                   scriptsOnBody Whether or not to place the script tags on\n *                                                     the body.\n * @property {Array}                     stylesheets   A list of CSS files that will be linked on\n *                                                     the template.\n * @property {ProjextRollupPluginURL}    urls          The set of URLs the plugin will use to\n *                                                     validate the files `require`d on the\n *                                                     template in order to know if they should be\n *                                                     processed, where to copy them and which URL\n *                                                     to use.\n * @property {ProjextRollupPluginsStats} stats         The function the plugin will call in order\n *                                                     to inform a file was copied.\n */\n\n/**\n * ================================================================================================\n * Plugins > URLS\n * ================================================================================================\n */\n\n/**\n * @typedef {Object} ProjextRollupURLsPluginOptions\n * @property {ProjextRollupPluginURL}    urls  The set of URLs the plugin will use to validate the\n *                                             files in order to know if they should be processed,\n *                                             where to copy them and which URL to use.\n * @property {ProjextRollupPluginsStats} stats The function the plugin will call in order to\n *                                             inform a file was copied.\n */\n\n/**\n * ================================================================================================\n * Middleware\n * ================================================================================================\n */\n\n/**\n * @typedef {function} MiddlewareGetDirectory\n * @return {string}\n * The build directory of the target implementing the middleware.\n */\n\n/**\n * @typedef {function} MiddlewareGetFileSystem\n * @return {Promise<FileSystem,Error>}\n * The reason this is resolved on a promise is to avoid trying to accessing files before they are\n * generated.\n */\n\n/**\n * @typedef {Object} MiddlewareInformation\n * @property {Middleware} middleware\n * The middleware that implements the Rollup build process.\n * @property {MiddlewareGetDirectory} getDirectory\n * To access the target implementing the middleware build directory.\n * @property {MiddlewareGetFileSystem} getFileSystem\n * To access the file system only when the middleware finishes the build process.\n */\n\n/**\n * ================================================================================================\n * Configurations\n * ================================================================================================\n */\n\n/**\n * @typedef {Object} RollupConfigurationsByEnvironment\n * @property {ConfigurationFile} production\n * The configuration service for a the target type production build.\n * @property {ConfigurationFile} development\n * The configuration service for a the target type development build.\n */\n\n/**\n * @typedef {Object} RollupConfigurations\n * @property {RollupConfigurationsByEnvironment} node\n * The build types configurations for a Node target.\n * @property {RollupConfigurationsByEnvironment} browser\n * The build types configurations for a browser target.\n */\n\n/**\n * ================================================================================================\n * Others\n * ================================================================================================\n */\n\n/**\n * @typedef {Object} RollupConfigurationOutputParams\n * @property {string}  file      The path where the bundle will be generated.\n * @property {string}  format    The format of the bundle (`iife`, `cjs` or `umd`).\n * @property {boolean} sourcemap Whether or not a source map should be generated for the bundle.\n * @property {string}  name      The export name of the bundle.\n * @property {?string} exports   This is implemented when the target is a library. It allows the\n *                               bundle to have named exports.\n */\n\n/**\n * @typedef {Object} RollupConfigurationPathsParams\n * @property {string} js\n * The filename format and path for the bundle, on the distribution directory.\n * @property {string} css\n * The filename format and path for the generated stylesheet, on the distribution directory.\n * @property {string} images\n * The filename format and path for the images that are going to be copied to the distribution\n * directory.\n * @property {string} fonts\n * The filename format and path for the font files that are going to be copied to the distribution\n * directory.\n */\n\n/**\n * @typedef {Object} RollupConfigurationParams\n * @property {string}                          input       The path for the entry file.\n * @property {RollupConfigurationOutputParams} output      The Rollup settings for the bundle\n *                                                         generation.\n * @property {Target}                          target      The information of the target being\n *                                                         bundled.\n * @property {TargetFileRules}                 targetRules The rules to find the different file\n *                                                         types a target may use.\n * @property {Object}                          definitions A dictionary of defined variables that\n *                                                         will be replaced on the bundled code.\n * @property {string}                          buildType   The intended build type: `development`\n *                                                         or `production`.\n * @property {RollupConfigurationPathsParams}  paths       A dictionary with the filenames formats\n *                                                         and paths of the different files the\n *                                                         bundle can generate.\n\n/**\n * @typedef {Object} RollupPluginInfo\n * @property {string} name          The name of the plugin.\n * @property {string} configuration The path to the Rollup configuration file.\n * @property {Array}  external      The list of subpaths the plugin exposes and that should be\n *                                  handled as external dependencies, in order to avoid bundling\n *                                  them.\n */\n\n/**\n * @typedef {function} ProviderRegisterMethod\n * @param {Jimple} app\n * A reference to the dependency injection container.\n */\n\n/**\n * @typedef {Object} Provider\n * @property {ProviderRegisterMethod} register\n * The method that gets called when registering the provider.\n */\n\n/**\n * @typedef {string|Object} StringOrObject\n */\n",
    "static": true,
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/src/typedef.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 424,
    "kind": "external",
    "name": "Jimple",
    "externalLink": "https://yarnpkg.com/en/package/jimple",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~Jimple",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 425,
    "kind": "external",
    "name": "Jimpex",
    "externalLink": "https://yarnpkg.com/en/package/jimpex",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~Jimpex",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 426,
    "kind": "external",
    "name": "Express",
    "externalLink": "https://expressjs.com",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~Express",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 427,
    "kind": "external",
    "name": "FileSystem",
    "externalLink": "https://nodejs.org/api/fs.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~FileSystem",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 428,
    "kind": "external",
    "name": "PathUtils",
    "externalLink": "https://homer0.github.io/wootils/class/wootils/node/pathUtils.js~PathUtils.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~PathUtils",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 429,
    "kind": "external",
    "name": "Logger",
    "externalLink": "https://homer0.github.io/wootils/class/wootils/node/logger.js~Logger.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~Logger",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 430,
    "kind": "external",
    "name": "EnvironmentUtils",
    "externalLink": "https://homer0.github.io/wootils/class/wootils/node/environmentUtils.js~EnvironmentUtils.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~EnvironmentUtils",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 431,
    "kind": "external",
    "name": "Projext",
    "externalLink": "https://homer0.github.io/projext/class/src/app/index.js~Projext.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~Projext",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 432,
    "kind": "external",
    "name": "BuildVersion",
    "externalLink": "https://homer0.github.io/projext/class/src/services/building/buildVersion.js~BuildVersion.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~BuildVersion",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 433,
    "kind": "external",
    "name": "Events",
    "externalLink": "https://homer0.github.io/projext/class/src/services/common/events.js~Events.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~Events",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 434,
    "kind": "external",
    "name": "Targets",
    "externalLink": "https://homer0.github.io/projext/class/src/services/targets/targets.js~Targets.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~Targets",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 435,
    "kind": "external",
    "name": "TargetsFileRules",
    "externalLink": "ttps://homer0.github.io/projext/class/src/services/targets/targetsFileRules/targetsFileRules.js~TargetsFileRules.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~TargetsFileRules",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 436,
    "kind": "external",
    "name": "TargetFileRules",
    "externalLink": "https://homer0.github.io/projext/typedef/index.html#static-typedef-TargetFileRules",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~TargetFileRules",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 437,
    "kind": "external",
    "name": "TargetsHTML",
    "externalLink": "https://homer0.github.io/projext/class/src/services/targets/targetsHTML.js~TargetsHTML.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~TargetsHTML",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 438,
    "kind": "external",
    "name": "Target",
    "externalLink": "https://homer0.github.io/projext/typedef/index.html#static-typedef-Target",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~Target",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 439,
    "kind": "external",
    "name": "TargetConfigurationCreator",
    "externalLink": "https://homer0.github.io/projext/typedef/index.html#static-typedef-TargetConfigurationCreator",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~TargetConfigurationCreator",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 440,
    "kind": "external",
    "name": "BabelConfiguration",
    "externalLink": "ttps://homer0.github.io/projext/class/src/services/configurations/babelConfiguration.js~BabelConfiguration.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~BabelConfiguration",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 441,
    "kind": "external",
    "name": "Middleware",
    "externalLink": "http://expressjs.com/en/guide/using-middleware.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~Middleware",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 442,
    "kind": "external",
    "name": "HTTPRequest",
    "externalLink": "https://nodejs.org/api/http.html#http_class_http_clientrequest",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~HTTPRequest",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 443,
    "kind": "external",
    "name": "HTTPResponse",
    "externalLink": "https://nodejs.org/api/http.html#http_class_http_serverresponse",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~HTTPResponse",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 444,
    "kind": "typedef",
    "name": "RollupFilter",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~RollupFilter",
    "access": "public",
    "description": "",
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "The path to validate."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether or not the path is valid."
    },
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "RollupFilter"
    }
  },
  {
    "__docId__": 445,
    "kind": "typedef",
    "name": "RollupStylesheetProcessor",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~RollupStylesheetProcessor",
    "access": "public",
    "description": "",
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "The style code to process."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<StringOrObject,Error>"
      ],
      "spread": false,
      "description": "If the Promise gets resolved as a string, that would\n                                         be used as the style code to either return or inject.\n                                         But if it gets resolved as an `Object`, it's expected\n                                         for it to have a `css`  key with the style code, the\n                                         rest of the keys will be added as named exports."
    },
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "RollupStylesheetProcessor"
    }
  },
  {
    "__docId__": 446,
    "kind": "typedef",
    "name": "RollupFileDefinition",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~RollupFileDefinition",
    "access": "public",
    "description": "",
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "The file contents."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "map",
        "description": "Extra information for the file map."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "RollupFileDefinition"
    }
  },
  {
    "__docId__": 447,
    "kind": "typedef",
    "name": "ProjextRollupPluginsStats",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjextRollupPluginsStats",
    "access": "public",
    "description": "",
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "plugin",
        "description": "The name of the plugin that generated/copied the file."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "The file that was generated/copied."
      }
    ],
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "ProjextRollupPluginsStats"
    }
  },
  {
    "__docId__": 448,
    "kind": "typedef",
    "name": "ProjextRollupPluginURL",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjextRollupPluginURL",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "include",
        "description": "A list of expressions the name of a file should match in order to be\n                           processed by the plugin."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "exclude",
        "description": "A list of expressions the name of a file shouldn't match in order to\n                           be processed by the plugin."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "output",
        "description": "The path to the where the a file would be copied. It supports the\n                           placeholders `[name]` for the file name and `[ext]` for its\n                           extension."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "The URL for the file. It supports the placeholders `[name]` for the\n                           file name and `[ext]` for its extension."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ProjextRollupPluginURL"
    }
  },
  {
    "__docId__": 449,
    "kind": "typedef",
    "name": "ProjextRollupCompressionPluginOptions",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjextRollupCompressionPluginOptions",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "folder",
        "description": "The directory where the plugin will search for\n                                              files."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "include",
        "description": "A list of expressions the name of a file should\n                                              match in order to be processed by the plugin."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "exclude",
        "description": "A list of expressions the name of a file\n                                              shouldn't match in order to be processed by the\n                                              plugin."
      },
      {
        "nullable": null,
        "types": [
          "ProjextRollupPluginsStats"
        ],
        "spread": false,
        "optional": false,
        "name": "stats",
        "description": "The function the plugin will call in order to\n                                              inform a file was created."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ProjextRollupCompressionPluginOptions"
    }
  },
  {
    "__docId__": 450,
    "kind": "typedef",
    "name": "ProjextRollupCompressionPluginEntry",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjextRollupCompressionPluginEntry",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "original",
        "description": "The path to the file that was compressed."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "compressed",
        "description": "The path to the compressed file."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ProjextRollupCompressionPluginEntry"
    }
  },
  {
    "__docId__": 451,
    "kind": "typedef",
    "name": "ProjextRollupCSSPluginOptions",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjextRollupCSSPluginOptions",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "include",
        "description": "A list of expressions the name of a file\n                                                    should match in order to be processed by\n                                                    the plugin."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "exclude",
        "description": "A list of expressions the name of a file\n                                                    shouldn't match in order to be processed by\n                                                    the plugin."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "insert",
        "description": "Whether the styles should be injected on\n                                                    the app `<head >` when the bundle finishes\n                                                    loading."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "output",
        "description": "This can be the name a file where all the\n                                                    files that match the filter would be\n                                                    bundled. The option can also be set to\n                                                    `false` so the styles would be returned as\n                                                    a string when `require`d."
      },
      {
        "nullable": true,
        "types": [
          "RollupStylesheetProcessor"
        ],
        "spread": false,
        "optional": false,
        "name": "processor",
        "description": "A custom function to processed the styles."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "insertFnName",
        "description": "If `insert` is `true`, this will be used as\n                                                    the name of the function in charge of\n                                                    injecting the styles."
      },
      {
        "nullable": null,
        "types": [
          "ProjextRollupPluginsStats"
        ],
        "spread": false,
        "optional": false,
        "name": "stats",
        "description": "The function the plugin will call in order\n                                                    to inform a file was created."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ProjextRollupCSSPluginOptions"
    }
  },
  {
    "__docId__": 452,
    "kind": "typedef",
    "name": "ProjextRollupDevServerPluginEvent",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjextRollupDevServerPluginEvent",
    "access": "public",
    "description": "",
    "params": [
      {
        "nullable": null,
        "types": [
          "ProjextRollupDevServerPlugin"
        ],
        "spread": false,
        "optional": false,
        "name": "plugin",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "ProjextRollupDevServerPluginEvent"
    }
  },
  {
    "__docId__": 453,
    "kind": "typedef",
    "name": "ProjextRollupDevServerPluginOptions",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjextRollupDevServerPluginOptions",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "host",
        "description": "The server hostname."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "port",
        "description": "The server port."
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "contentBase",
        "description": "The directory from where the\n                                                                 files are going to be served.\n                                                                 It can be a single directory\n                                                                 or a list of them."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "historyApiFallback",
        "description": "Whether or not the server\n                                                                 should redirect the user to\n                                                                 the `index.html` after a\n                                                                 `404`."
      },
      {
        "nullable": null,
        "types": [
          "null",
          "HTTPSOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "https",
        "description": "The required files to run the\n                                                                 server on HTTPs. They are the\n                                                                 same that `https.createServer`\n                                                                 supports."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "open",
        "description": "Whether or not the browser\n                                                                 should be opened after\n                                                                 starting the server."
      },
      {
        "nullable": true,
        "types": [
          "Logger"
        ],
        "spread": false,
        "optional": false,
        "name": "logger",
        "description": "A custom logger to log the\n                                                                 server events."
      },
      {
        "nullable": null,
        "types": [
          "ProjextRollupDevServerPluginEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "onStart",
        "description": "A callback to be called when\n                                                                 the server starts."
      },
      {
        "nullable": null,
        "types": [
          "ProjextRollupDevServerPluginEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "onStop",
        "description": "A callback to be called when\n                                                                 the server stops."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ProjextRollupDevServerPluginOptions"
    }
  },
  {
    "__docId__": 454,
    "kind": "typedef",
    "name": "ProjextRollupNodeRunnerPluginEvent",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjextRollupNodeRunnerPluginEvent",
    "access": "public",
    "description": "",
    "params": [
      {
        "nullable": null,
        "types": [
          "ProjextRollupNodeRunnerPlugin"
        ],
        "spread": false,
        "optional": false,
        "name": "plugin",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "ProjextRollupNodeRunnerPluginEvent"
    }
  },
  {
    "__docId__": 455,
    "kind": "typedef",
    "name": "ProjextRollupNodeRunnerPluginOptions",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjextRollupNodeRunnerPluginOptions",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The file to execute"
      },
      {
        "nullable": true,
        "types": [
          "Logger"
        ],
        "spread": false,
        "optional": false,
        "name": "logger",
        "description": "A custom logger to log the server\n                                                       events."
      },
      {
        "nullable": null,
        "types": [
          "ProjextRollupNodeRunnerPluginEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "onStart",
        "description": "A callback to be called when the\n                                                       execution starts."
      },
      {
        "nullable": null,
        "types": [
          "ProjextRollupNodeRunnerPluginEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "onStop",
        "description": "A callback to be called when the\n                                                       execution stops."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ProjextRollupNodeRunnerPluginOptions"
    }
  },
  {
    "__docId__": 456,
    "kind": "typedef",
    "name": "ProjextRollupStatsPluginOptions",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjextRollupStatsPluginOptions",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "The path to the directory where all the files are generated. The plugin\n                        needs it so it can be removed when showing the files list."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ProjextRollupStatsPluginOptions"
    }
  },
  {
    "__docId__": 457,
    "kind": "typedef",
    "name": "ProjextRollupStatsPluginReset",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjextRollupStatsPluginReset",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "intro",
        "description": "The method Rollup calls to get code to add on the top of the bundle.\n                           The plugin uses it as a _\"hook\"_ in order to reset the entries list\n                           and thus, avoid duplicated entries when Rollup is on _\"watch mode\"_."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ProjextRollupStatsPluginReset"
    }
  },
  {
    "__docId__": 458,
    "kind": "typedef",
    "name": "ProjextRollupStatsPluginLogOptions",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjextRollupStatsPluginLogOptions",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "extraEntries",
        "description": "A list of extra entries to add."
      },
      {
        "nullable": true,
        "types": [
          "Logger"
        ],
        "spread": false,
        "optional": false,
        "name": "logger",
        "description": "A custom instance of {@link Logger} to log the report table."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ProjextRollupStatsPluginLogOptions"
    }
  },
  {
    "__docId__": 459,
    "kind": "typedef",
    "name": "ProjextRollupStatsPluginLog",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjextRollupStatsPluginLog",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "onwrite",
        "description": "The method Rollup calls after writing the files on the file system.\n                             When this happens, the plugin will log the report table on the\n                             console."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ProjextRollupStatsPluginLog"
    }
  },
  {
    "__docId__": 460,
    "kind": "typedef",
    "name": "ProjextRollupStatsPluginCellsWidth",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjextRollupStatsPluginCellsWidth",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "plugin",
        "description": "The width for the plugin's cell."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The width for the file path cell."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "The width for the file size cell."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ProjextRollupStatsPluginCellsWidth"
    }
  },
  {
    "__docId__": 461,
    "kind": "typedef",
    "name": "ProjextRollupStylesheetAssetsPluginOptions",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjextRollupStylesheetAssetsPluginOptions",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "stylesheet",
        "description": "The path to the CSS or JS file where the\n                                                    styles should be fixed."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "insertFnNames",
        "description": "In case the `stylesheet` is a JS file, it's\n                                                    possible that the styles are being injected\n                                                    by a function, so this option can be used\n                                                    the different function names the plugin\n                                                    should search for in order to find CSS\n                                                    blocks."
      },
      {
        "nullable": null,
        "types": [
          "ProjextRollupPluginURL"
        ],
        "spread": false,
        "optional": false,
        "name": "urls",
        "description": "The set of URLs the plugin will use to\n                                                    validate the files inside the stylesheet in\n                                                    order to know if they should be processed,\n                                                    where to copy them and which URL to use."
      },
      {
        "nullable": null,
        "types": [
          "ProjextRollupPluginsStats"
        ],
        "spread": false,
        "optional": false,
        "name": "stats",
        "description": "The function the plugin will call in order\n                                                    to inform a file was created."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ProjextRollupStylesheetAssetsPluginOptions"
    }
  },
  {
    "__docId__": 462,
    "kind": "typedef",
    "name": "ProjextRollupStylesheetAssetsHelperPluginOptions",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjextRollupStylesheetAssetsHelperPluginOptions",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "include",
        "description": "A list of expressions the name of a file should match in order to be\n                           processed by the plugin."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "exclude",
        "description": "A list of expressions the name of a file shouldn't match in order to\n                           be processed by the plugin."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "fnName",
        "description": "The name of the function that will be used to wrap the code."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ProjextRollupStylesheetAssetsHelperPluginOptions"
    }
  },
  {
    "__docId__": 463,
    "kind": "typedef",
    "name": "ProjextRollupStylesheetModulesFixerPluginOptions",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjextRollupStylesheetModulesFixerPluginOptions",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "include",
        "description": "A list of expressions the name of a file should match in\n                                     order to be processed by the plugin."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "exclude",
        "description": "A list of expressions the name of a file shouldn't match\n                                     in order to be processed by the plugin."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "modulesExportName",
        "description": "The name of the export statement for the CSS modules\n                                     locals."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ProjextRollupStylesheetModulesFixerPluginOptions"
    }
  },
  {
    "__docId__": 464,
    "kind": "typedef",
    "name": "ProjextRollupTemplatePluginOptions",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjextRollupTemplatePluginOptions",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "template",
        "description": "The path to the template file the plugin\n                                                    will use to inject the JS and CSS files."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "output",
        "description": "The path where the final file will be\n                                                    written."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "scripts",
        "description": "A list of JS files that will be linked on\n                                                    the template."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "scriptsAsync",
        "description": "Whether or not to use `async` attribute on\n                                                    the script tags."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "scriptsOnBody",
        "description": "Whether or not to place the script tags on\n                                                    the body."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "stylesheets",
        "description": "A list of CSS files that will be linked on\n                                                    the template."
      },
      {
        "nullable": null,
        "types": [
          "ProjextRollupPluginURL"
        ],
        "spread": false,
        "optional": false,
        "name": "urls",
        "description": "The set of URLs the plugin will use to\n                                                    validate the files `require`d on the\n                                                    template in order to know if they should be\n                                                    processed, where to copy them and which URL\n                                                    to use."
      },
      {
        "nullable": null,
        "types": [
          "ProjextRollupPluginsStats"
        ],
        "spread": false,
        "optional": false,
        "name": "stats",
        "description": "The function the plugin will call in order\n                                                    to inform a file was copied."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ProjextRollupTemplatePluginOptions"
    }
  },
  {
    "__docId__": 465,
    "kind": "typedef",
    "name": "ProjextRollupURLsPluginOptions",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjextRollupURLsPluginOptions",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "ProjextRollupPluginURL"
        ],
        "spread": false,
        "optional": false,
        "name": "urls",
        "description": "The set of URLs the plugin will use to validate the\n                                            files in order to know if they should be processed,\n                                            where to copy them and which URL to use."
      },
      {
        "nullable": null,
        "types": [
          "ProjextRollupPluginsStats"
        ],
        "spread": false,
        "optional": false,
        "name": "stats",
        "description": "The function the plugin will call in order to\n                                            inform a file was copied."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ProjextRollupURLsPluginOptions"
    }
  },
  {
    "__docId__": 466,
    "kind": "typedef",
    "name": "MiddlewareGetDirectory",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~MiddlewareGetDirectory",
    "access": "public",
    "description": "",
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The build directory of the target implementing the middleware."
    },
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "MiddlewareGetDirectory"
    }
  },
  {
    "__docId__": 467,
    "kind": "typedef",
    "name": "MiddlewareGetFileSystem",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~MiddlewareGetFileSystem",
    "access": "public",
    "description": "",
    "return": {
      "nullable": null,
      "types": [
        "Promise<FileSystem,Error>"
      ],
      "spread": false,
      "description": "The reason this is resolved on a promise is to avoid trying to accessing files before they are\ngenerated."
    },
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "MiddlewareGetFileSystem"
    }
  },
  {
    "__docId__": 468,
    "kind": "typedef",
    "name": "MiddlewareInformation",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~MiddlewareInformation",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Middleware"
        ],
        "spread": false,
        "optional": false,
        "name": "middleware",
        "description": "The middleware that implements the Rollup build process."
      },
      {
        "nullable": null,
        "types": [
          "MiddlewareGetDirectory"
        ],
        "spread": false,
        "optional": false,
        "name": "getDirectory",
        "description": "To access the target implementing the middleware build directory."
      },
      {
        "nullable": null,
        "types": [
          "MiddlewareGetFileSystem"
        ],
        "spread": false,
        "optional": false,
        "name": "getFileSystem",
        "description": "To access the file system only when the middleware finishes the build process."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "MiddlewareInformation"
    }
  },
  {
    "__docId__": 469,
    "kind": "typedef",
    "name": "RollupConfigurationsByEnvironment",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~RollupConfigurationsByEnvironment",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "ConfigurationFile"
        ],
        "spread": false,
        "optional": false,
        "name": "production",
        "description": "The configuration service for a the target type production build."
      },
      {
        "nullable": null,
        "types": [
          "ConfigurationFile"
        ],
        "spread": false,
        "optional": false,
        "name": "development",
        "description": "The configuration service for a the target type development build."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "RollupConfigurationsByEnvironment"
    }
  },
  {
    "__docId__": 470,
    "kind": "typedef",
    "name": "RollupConfigurations",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~RollupConfigurations",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "RollupConfigurationsByEnvironment"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The build types configurations for a Node target."
      },
      {
        "nullable": null,
        "types": [
          "RollupConfigurationsByEnvironment"
        ],
        "spread": false,
        "optional": false,
        "name": "browser",
        "description": "The build types configurations for a browser target."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "RollupConfigurations"
    }
  },
  {
    "__docId__": 471,
    "kind": "typedef",
    "name": "RollupConfigurationOutputParams",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~RollupConfigurationOutputParams",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The path where the bundle will be generated."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "format",
        "description": "The format of the bundle (`iife`, `cjs` or `umd`)."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "sourcemap",
        "description": "Whether or not a source map should be generated for the bundle."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The export name of the bundle."
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "exports",
        "description": "This is implemented when the target is a library. It allows the\n                              bundle to have named exports."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "RollupConfigurationOutputParams"
    }
  },
  {
    "__docId__": 472,
    "kind": "typedef",
    "name": "RollupConfigurationPathsParams",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~RollupConfigurationPathsParams",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "js",
        "description": "The filename format and path for the bundle, on the distribution directory."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "css",
        "description": "The filename format and path for the generated stylesheet, on the distribution directory."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "images",
        "description": "The filename format and path for the images that are going to be copied to the distribution\ndirectory."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "fonts",
        "description": "The filename format and path for the font files that are going to be copied to the distribution\ndirectory."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "RollupConfigurationPathsParams"
    }
  },
  {
    "__docId__": 473,
    "kind": "typedef",
    "name": "RollupPluginInfo",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~RollupPluginInfo",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": "The path for the entry file."
      },
      {
        "nullable": null,
        "types": [
          "RollupConfigurationOutputParams"
        ],
        "spread": false,
        "optional": false,
        "name": "output",
        "description": "The Rollup settings for the bundle\n                                                        generation."
      },
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The information of the target being\n                                                        bundled."
      },
      {
        "nullable": null,
        "types": [
          "TargetFileRules"
        ],
        "spread": false,
        "optional": false,
        "name": "targetRules",
        "description": "The rules to find the different file\n                                                        types a target may use."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "definitions",
        "description": "A dictionary of defined variables that\n                                                        will be replaced on the bundled code."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "buildType",
        "description": "The intended build type: `development`\n                                                        or `production`."
      },
      {
        "nullable": null,
        "types": [
          "RollupConfigurationPathsParams"
        ],
        "spread": false,
        "optional": false,
        "name": "paths",
        "description": "A dictionary with the filenames formats\n                                                        and paths of the different files the\n                                                        bundle can generate.\n\n/**"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the plugin."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "configuration",
        "description": "The path to the Rollup configuration file."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "external",
        "description": "The list of subpaths the plugin exposes and that should be\n                                 handled as external dependencies, in order to avoid bundling\n                                 them."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "RollupPluginInfo"
    }
  },
  {
    "__docId__": 474,
    "kind": "typedef",
    "name": "ProviderRegisterMethod",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProviderRegisterMethod",
    "access": "public",
    "description": "",
    "params": [
      {
        "nullable": null,
        "types": [
          "Jimple"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "A reference to the dependency injection container."
      }
    ],
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "ProviderRegisterMethod"
    }
  },
  {
    "__docId__": 475,
    "kind": "typedef",
    "name": "Provider",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~Provider",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "ProviderRegisterMethod"
        ],
        "spread": false,
        "optional": false,
        "name": "register",
        "description": "The method that gets called when registering the provider."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Provider"
    }
  },
  {
    "__docId__": 476,
    "kind": "typedef",
    "name": "StringOrObject",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~StringOrObject",
    "access": "public",
    "description": "",
    "type": {
      "types": [
        "string",
        "Object"
      ],
      "optional": false,
      "name": "StringOrObject"
    }
  },
  {
    "kind": "index",
    "content": "# projext plugin for Rollup\n\n[![Travis](https://img.shields.io/travis/homer0/projext-plugin-rollup.svg?style=flat-square)](https://travis-ci.org/homer0/projext-plugin-rollup)\n[![Coveralls github](https://img.shields.io/coveralls/github/homer0/projext-plugin-rollup.svg?style=flat-square)](https://coveralls.io/github/homer0/projext-plugin-rollup?branch=master)\n[![David](https://img.shields.io/david/homer0/projext-plugin-rollup.svg?style=flat-square)](https://david-dm.org/homer0/projext-plugin-rollup)\n[![David](https://img.shields.io/david/dev/homer0/projext-plugin-rollup.svg?style=flat-square)](https://david-dm.org/homer0/projext-plugin-rollup)\n\nAllows [projext](https://yarnpkg.com/en/package/projext) to use [Rollup](https://rollupjs.org) as a build engine.\n\n## Introduction\n\n[projext](https://yarnpkg.com/en/package/projext) allows you to configure a project without adding specific settings for a module bundler, then you can decide which build engine to use. This plugin allows you to bundle your projext project targets using [Rollup](https://rollupjs.org).\n\n## Information\n\n| -            | -                                                                             |\n|--------------|-------------------------------------------------------------------------------|\n| Package      | projext-plugin-rollup                                                         |\n| Description  | Allows projext to use Rollup as a build engine.                               |\n| Node Version | >= v6.10.0                                                                    |\n\n## Usage\n\nSince projext automatically detects this plugin as a _\"known build engine\"_, after you install it, there's nothing else to do, just run the build command and the plugin will take care of the rest:\n\n```bash\nprojext build [target-name]\n```\n\n### Middleware implementation\n\nThis plugin provides a development middleware for implementing on [Express](https://expressjs.com) and [Jimpex](https://yarnpkg.com/en/package/jimpex) very easy:\n\n#### Express\n\n```js\n// Require the function for the implementation\nconst useExpress = require('projext-plugin-rollup/express');\n\n// Require Express to create a dummy app\nconst express = require('express');\n\n// Create the app\nconst app = express();\n\n// Tell the plugin to configure the middleware for the `myApp` target to be served by the\n// `myServer` target\nuseExpress(app, 'myApp', 'myServer');\n\n// Start the app\napp.listen(...);\n```\n\n#### Jimpex\n\n```js\n// Require the function for the implementation\nconst useJimpex = require('projext-plugin-rollup/jimpex');\n\n// Require Jimpex to create a dummy app\nconst { Jimpex } = require('jimpex');\n\n// Define the Jimpex app\nclass DevApp extends Jimpex {\n  boot() {\n    // This method needs to be created.\n  }\n}\n\n// Create the app\nconst app = new DevApp();\n\n// Tell the plugin to configure the middleware for the `myApp` target to be served by the\n// `myServer` target\nuseJimpex(app, 'myApp', 'myServer');\n\n// Start the app\napp.start();\n```\n\n#### Accessing the file system\n\nBoth `useExpress` and `useJimpex` return and object with the following properties:\n\n- `middleware`: A function that returns the actual middleware.\n- `getDirectory`: A function that returns the build directory of the target implementing the middleware.\n- `getFileSystem`: A function that returns a promise that eventually gets resolved with an instance of [`fs-extra`](https://yarnpkg.com/en/package/jimpex). The reason of this function is so the file system would be blocked while Rollup is processing the bundle.\n\n### Extending/Overwriting the configuration\n\nThis plugin has `5` different configuration services:\n\n- Plugins settings configuration.\n- Browser targets configuration for development.\n- Browser targets configuration for production.\n- Node targets configuration for development.\n- Node targets configuration for production.\n\nThey can be easily extended/overwritten by creating a file on your project with an specific name.\n\nAll the configurations receive a single object parameter with the following properties:\n\n- `target`: It has all the information for the target being bundled.\n- `targetRules`: The rules to find the target files on the file system.\n- `input`: The path to the target entry file\n- `output`: The Rollup output settings for the target.\n- `paths`: A dictionary with the filenames formats and paths of the different files the bundle can generate (`js`, `css`, `images` and `fonts`).\n- `definitions`: A dictionary of defined variables that will be replaced on the bundled code.\n- `buildType`: The indented build type (`development` or `production`).\n\n#### Plugins configuration\n\nThis configuration is a big dictionary where each key is the name of a plugin it contains settings for.\n\nTo extend/overwrite this configuration you would need to create a file with the following path: `config/rollup/plugins.plugins.js`. For example:\n\n```js\n// config/rollup/plugins.config.js\n\nmodule.exports = (params) => ({\n  resolve: {\n  \t // Add the `.tsx` extension.\n    extensions: ['.js', '.json', '.jsx', '.tsx'],\n  },\n});\n```\n\n#### Browser targets configuration for development and production\n\nThese services have all the specific configuration for building a browser target.\n\nTo extend/overwrite these configurations you would need to create a file with the following path: `config/rollup/browser.development.config.js` or `config/rollup/browser.production.config.js`. For example:\n\n```js\n// config/rollup/browser.development.config.js\n\nmodule.exports = (params) => ({\n  output: {\n    globals: {\n      'some-lib': 'someLib',\n    },\n  },\n});\n```\n\n### Node targets configuration for development and production\n\nThese services have all the specific configuration for building a Node target.\n\nTo extend/overwrite these configurations you would need to create a file with the following path: `config/rollup/node.development.config.js` or `config/rollup/node.production.config.js`. For example:\n\n```js\n// config/rollup/node.production.config.js\n\nmodule.exports = (params) => ({\n  output: {\n    exports: 'named',\n  },\n});\n```\n\n### Extending/Overwriting a target configuration\n\nThe methods above allow you to extend/overwrite a configuration service for all the targets, but there are two ways of extending/overwriting configurations for an specific target:\n\n**`config/rollup/[target].config.js`**\n\nThis file allows you to overwrite the Rollup configuration generated for an specific target, no matter the build type:\n\n```js\n// config/rollup/myApp.config.js\n\nmodule.exports = (params) => ({\n  output: {\n    exports: 'named',\n  },\n});\n```\n\nThat change will only be applied when building the target `myApp`.\n\n**`config/rollup/[target].[build-type].config.js`**\n\nThis file allows you to overwrite the Rollup configuration generated for an specific target and build type.\n\n```js\n// config/rollup/myApp.production.config.js\n\nmodule.exports = (params) => ({\n  output: {\n    globals: {\n      'some-lib': 'someLib',\n    },\n  },\n});\n```\n\nThat change will only be applied when building the target `myApp` on a production build.\n\n## Making a plugin\n\nIf you want to write a plugin that works with this one (like a framework plugin), there are a lot of reducer events you can listen for and use to modify the Rollup configuration:\n\n### Node target configuration\n\n- Name: `rollup-node-configuration`\n- Reduces: A Rollup configuration for a Node target.\n- Parameters:\n - `params`: The same dictionary sent to all the files that extend a configuration. Check the _\"Extending/Overwriting the configuration\"_ section for more information.\n\nThis is called after generating the configuration for a Node target and before using it.\n\n### Browser target configuration\n\n- Name: `rollup-browser-configuration`\n- Reduces: A Rollup configuration for a browser target.\n- Parameters:\n - `params`: The same dictionary sent to all the files that extend a configuration. Check the _\"Extending/Overwriting the configuration\"_ section for more information.\n\nThis is called after generating the configuration for a browser target and before using it.\n\n### Plugins configuration\n\n- Name: `rollup-plugin-settings-configuration`\n- Reduces: A dictionary with all the settings a target may use.\n- Parameters:\n - `params`: The same dictionary sent to all the files that extend a configuration. Check the _\"Extending/Overwriting the configuration\"_ section for more information.\n\nThis is called after defining all the settings for plugins a target may use and before sending them to the main configuration.\n\n> There are a LOT more reducer events, check the project documentation.\n\n## Development\n\nBefore doing anything, install the repository hooks:\n\n```bash\n# You can either use npm or yarn, it doesn't matter\nyarn run hooks\n```\n\n### NPM/Yarn Tasks\n\n| Task                    | Description                         |\n|-------------------------|-------------------------------------|\n| `yarn run hooks`        | Install the GIT repository hooks.   |\n| `yarn test`             | Run the project unit tests.         |\n| `yarn run lint`         | Lint the modified files.            |\n| `yarn run lint:full`    | Lint the project code.              |\n| `yarn run docs`         | Generate the project documentation. |\n| `yarn run todo`         | List all the pending to-do's.       |\n\n### Testing\n\nI use [Jest](https://facebook.github.io/jest/) with [Jest-Ex](https://yarnpkg.com/en/package/jest-ex) to test the project. The configuration file is on `./.jestrc`, the tests and mocks are on `./tests` and the script that runs it is on `./utils/scripts/test`.\n\n### Linting\n\nI use [ESlint](http://eslint.org) to validate all our JS code. The configuration file for the project code is on `./.eslintrc` and for the tests on `./tests/.eslintrc` (which inherits from the one on the root), there's also an `./.eslintignore` to ignore some files on the process, and the script that runs it is on `./utils/scripts/lint`.\n\n### Documentation\n\nI use [ESDoc](http://esdoc.org) to generate HTML documentation for the project. The configuration file is on `./.esdocrc` and the script that runs it is on `./utils/scripts/docs`.\n\n### To-Dos\n\nI use `@todo` comments to write all the pending improvements and fixes, and [Leasot](https://yarnpkg.com/en/package/leasot) to generate a report. The script that runs it is on `./utils/scripts/todo`.\n",
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n    \"name\": \"projext-plugin-rollup\",\n    \"description\": \"Allows projext to use Rollup as a build engine.\",\n    \"homepage\": \"https://homer0.github.io/projext-plugin-rollup/\",\n    \"version\": \"1.0.0\",\n    \"repository\": \"homer0/projext-plugin-rollup\",\n    \"author\": \"Leonardo Apiwan (@homer0) <me@homer0.com>\",\n    \"license\": \"MIT\",\n    \"dependencies\": {\n      \"projext\": \"^4.0.0\",\n      \"wootils\": \"^1.3.2\",\n      \"jimple\": \"1.5.0\",\n      \"fs-extra\": \"6.0.1\",\n      \"extend\": \"3.0.1\",\n\n      \"rollup\": \"0.61.2\",\n      \"rollup-plugin-commonjs\": \"9.1.3\",\n      \"rollup-plugin-node-resolve\": \"3.3.0\",\n      \"rollup-plugin-uglify\": \"4.0.0\",\n      \"rollup-plugin-html\": \"0.2.1\",\n      \"rollup-plugin-babel\": \"3.0.5\",\n      \"rollup-plugin-json\": \"3.0.0\",\n      \"rollup-plugin-replace\": \"2.0.0\",\n      \"rollup-plugin-sass\": \"0.8.1\",\n      \"rollup-pluginutils\": \"2.3.0\",\n\n      \"builtin-modules\": \"3.0.0\",\n\n      \"postcss\": \"6.0.23\",\n      \"postcss-modules\": \"1.1.0\",\n\n      \"mime\": \"2.3.1\",\n      \"opener\": \"1.4.3\",\n      \"node-zopfli\": \"2.0.2\",\n      \"prettysize\": \"1.1.0\",\n      \"colors\": \"1.3.0\",\n\n      \"babel-core\": \"6.26.3\",\n      \"babel-preset-env\": \"1.7.0\"\n    },\n    \"devDependencies\": {\n      \"eslint\": \"4.19.1\",\n      \"eslint-config-airbnb-base\": \"13.0.0\",\n      \"eslint-plugin-import\": \"2.12.0\",\n      \"eslint-plugin-node\": \"6.0.1\",\n      \"jest-ex\": \"5.0.0\",\n      \"jest-cli\": \"23.1.0\",\n      \"jasmine-expect\": \"3.8.3\",\n      \"jimpex\": \"^2.1.1\",\n      \"esdoc\": \"1.1.0\",\n      \"esdoc-standard-plugin\": \"1.0.0\",\n      \"esdoc-node\": \"1.0.3\",\n      \"leasot\": \"6.3.0\",\n      \"coveralls\": \"3.0.1\"\n    },\n    \"engine-strict\": true,\n    \"engines\": {\n      \"node\": \">=6.0.0\",\n      \"npm\": \">=3.0.0\"\n    },\n    \"main\": \"src/index.js\",\n    \"scripts\": {\n      \"hooks\": \"./utils/hooks/install\",\n      \"test\": \"./utils/scripts/test\",\n      \"lint\": \"./utils/scripts/lint\",\n      \"lint:full\": \"./utils/scripts/lint-full\",\n      \"docs\": \"./utils/scripts/docs\",\n      \"todo\": \"./utils/scripts/todo\"\n    }\n}\n",
    "longname": "/Users/homer0/CODE/node/projext/projext-plugin-rollup/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]