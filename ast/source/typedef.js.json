{
  "type": "File",
  "start": 0,
  "end": 26117,
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 575,
      "column": 0
    }
  },
  "program": {
    "type": "Program",
    "start": 0,
    "end": 26117,
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 575,
        "column": 0
      }
    },
    "sourceType": "module",
    "body": [],
    "directives": [],
    "leadingComments": null,
    "innerComments": [
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Externals\n * ================================================================================================\n ",
        "start": 0,
        "end": 220,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {Jimple}\n * https://yarnpkg.com/en/package/jimple\n ",
        "start": 222,
        "end": 292,
        "loc": {
          "start": {
            "line": 7,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {Jimpex}\n * https://yarnpkg.com/en/package/jimpex\n ",
        "start": 294,
        "end": 364,
        "loc": {
          "start": {
            "line": 12,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {Express}\n * https://expressjs.com\n ",
        "start": 366,
        "end": 421,
        "loc": {
          "start": {
            "line": 17,
            "column": 0
          },
          "end": {
            "line": 20,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {FileSystem}\n * https://nodejs.org/api/fs.html\n ",
        "start": 423,
        "end": 490,
        "loc": {
          "start": {
            "line": 22,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {PathUtils}\n * https://homer0.github.io/wootils/class/wootils/node/pathUtils.js~PathUtils.html\n ",
        "start": 492,
        "end": 607,
        "loc": {
          "start": {
            "line": 27,
            "column": 0
          },
          "end": {
            "line": 30,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {Logger}\n * https://homer0.github.io/wootils/class/wootils/node/logger.js~Logger.html\n ",
        "start": 609,
        "end": 715,
        "loc": {
          "start": {
            "line": 32,
            "column": 0
          },
          "end": {
            "line": 35,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {EnvironmentUtils}\n * https://homer0.github.io/wootils/class/wootils/node/environmentUtils.js~EnvironmentUtils.html\n ",
        "start": 717,
        "end": 853,
        "loc": {
          "start": {
            "line": 37,
            "column": 0
          },
          "end": {
            "line": 40,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {Projext}\n * https://homer0.github.io/projext/class/src/app/index.js~Projext.html\n ",
        "start": 855,
        "end": 957,
        "loc": {
          "start": {
            "line": 42,
            "column": 0
          },
          "end": {
            "line": 45,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {BuildVersion}\n * https://homer0.github.io/projext/class/src/services/building/buildVersion.js~BuildVersion.html\n ",
        "start": 959,
        "end": 1092,
        "loc": {
          "start": {
            "line": 47,
            "column": 0
          },
          "end": {
            "line": 50,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {Events}\n * https://homer0.github.io/projext/class/src/services/common/events.js~Events.html\n ",
        "start": 1094,
        "end": 1207,
        "loc": {
          "start": {
            "line": 52,
            "column": 0
          },
          "end": {
            "line": 55,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {Targets}\n * https://homer0.github.io/projext/class/src/services/targets/targets.js~Targets.html\n ",
        "start": 1209,
        "end": 1326,
        "loc": {
          "start": {
            "line": 57,
            "column": 0
          },
          "end": {
            "line": 60,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {TargetsFileRules}\n *  ttps://homer0.github.io/projext/class/src/services/targets/targetsFileRules/targetsFileRules.js~TargetsFileRules.html\n  ",
        "start": 1328,
        "end": 1490,
        "loc": {
          "start": {
            "line": 62,
            "column": 0
          },
          "end": {
            "line": 65,
            "column": 4
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {TargetFileRules}\n * https://homer0.github.io/projext/typedef/index.html#static-typedef-TargetFileRules\n ",
        "start": 1492,
        "end": 1616,
        "loc": {
          "start": {
            "line": 67,
            "column": 0
          },
          "end": {
            "line": 70,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {TargetsHTML}\n * https://homer0.github.io/projext/class/src/services/targets/targetsHTML.js~TargetsHTML.html\n ",
        "start": 1618,
        "end": 1747,
        "loc": {
          "start": {
            "line": 72,
            "column": 0
          },
          "end": {
            "line": 75,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {Target}\n * https://homer0.github.io/projext/typedef/index.html#static-typedef-Target\n ",
        "start": 1749,
        "end": 1855,
        "loc": {
          "start": {
            "line": 77,
            "column": 0
          },
          "end": {
            "line": 80,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {TargetConfigurationCreator}\n * https://homer0.github.io/projext/typedef/index.html#static-typedef-TargetConfigurationCreator\n ",
        "start": 1857,
        "end": 2003,
        "loc": {
          "start": {
            "line": 82,
            "column": 0
          },
          "end": {
            "line": 85,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {TargetExtraFile}\n * https://homer0.github.io/projext/typedef/index.html#static-typedef-TargetExtraFile\n ",
        "start": 2005,
        "end": 2129,
        "loc": {
          "start": {
            "line": 87,
            "column": 0
          },
          "end": {
            "line": 90,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {BabelConfiguration}\n *  ttps://homer0.github.io/projext/class/src/services/configurations/babelConfiguration.js~BabelConfiguration.html\n  ",
        "start": 2131,
        "end": 2289,
        "loc": {
          "start": {
            "line": 92,
            "column": 0
          },
          "end": {
            "line": 95,
            "column": 4
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {NodeInspectorSettings}\n * https://homer0.github.io/projext/typedef/index.html#static-typedef-NodeInspectorSettings\n ",
        "start": 2291,
        "end": 2427,
        "loc": {
          "start": {
            "line": 97,
            "column": 0
          },
          "end": {
            "line": 100,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {Middleware}\n * http://expressjs.com/en/guide/using-middleware.html\n ",
        "start": 2429,
        "end": 2517,
        "loc": {
          "start": {
            "line": 102,
            "column": 0
          },
          "end": {
            "line": 105,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {HTTPRequest}\n * https://nodejs.org/api/http.html#http_class_http_clientrequest\n ",
        "start": 2519,
        "end": 2619,
        "loc": {
          "start": {
            "line": 107,
            "column": 0
          },
          "end": {
            "line": 110,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {HTTPResponse}\n * https://nodejs.org/api/http.html#http_class_http_serverresponse\n ",
        "start": 2621,
        "end": 2723,
        "loc": {
          "start": {
            "line": 112,
            "column": 0
          },
          "end": {
            "line": 115,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {Buffer}\n * https://nodejs.org/api/buffer.html\n ",
        "start": 2725,
        "end": 2792,
        "loc": {
          "start": {
            "line": 117,
            "column": 0
          },
          "end": {
            "line": 120,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Plugins > Commons\n * ================================================================================================\n ",
        "start": 2794,
        "end": 3022,
        "loc": {
          "start": {
            "line": 122,
            "column": 0
          },
          "end": {
            "line": 126,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {function} RollupFilter\n * @param {string} filepath The path to validate.\n * @return {boolean} Whether or not the path is valid.\n ",
        "start": 3024,
        "end": 3172,
        "loc": {
          "start": {
            "line": 128,
            "column": 0
          },
          "end": {
            "line": 132,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {function} RollupStylesheetProcessor\n * @param {string} code The style code to process.\n * @return {Promise<StringOrObject,Error>} If the Promise gets resolved as a string, that would\n *                                          be used as the style code to either return or inject.\n *                                          But if it gets resolved as an `Object`, it's expected\n *                                          for it to have a `css`  key with the style code, the\n *                                          rest of the keys will be added as named exports.\n ",
        "start": 3174,
        "end": 3763,
        "loc": {
          "start": {
            "line": 134,
            "column": 0
          },
          "end": {
            "line": 142,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} RollupFileDefinition\n * @param {string} code The file contents.\n * @param {Object} map Extra information for the file map.\n ",
        "start": 3765,
        "end": 3916,
        "loc": {
          "start": {
            "line": 144,
            "column": 0
          },
          "end": {
            "line": 148,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {function} ProjextRollupPluginsStats\n * @param {string} plugin   The name of the plugin that generated/copied the file.\n * @param {string} filepath The file that was generated/copied.\n ",
        "start": 3918,
        "end": 4121,
        "loc": {
          "start": {
            "line": 150,
            "column": 0
          },
          "end": {
            "line": 154,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjextRollupPluginURL\n * @property {Array}  include A list of expressions the name of a file should match in order to be\n *                            processed by the plugin.\n * @property {Array}  exclude A list of expressions the name of a file shouldn't match in order to\n *                            be processed by the plugin.\n * @property {string} output  The path to the where the a file would be copied. It supports the\n *                            placeholders `[name]` for the file name and `[ext]` for its\n *                            extension.\n * @property {string} url     The URL for the file. It supports the placeholders `[name]` for the\n *                            file name and `[ext]` for its extension.\n ",
        "start": 4123,
        "end": 4881,
        "loc": {
          "start": {
            "line": 156,
            "column": 0
          },
          "end": {
            "line": 167,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Plugins > Compression\n * ================================================================================================\n ",
        "start": 4883,
        "end": 5115,
        "loc": {
          "start": {
            "line": 169,
            "column": 0
          },
          "end": {
            "line": 173,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjextRollupCompressionPluginOptions\n * @property {string}                    folder  The directory where the plugin will search for\n *                                               files.\n * @property {Array}                     include A list of expressions the name of a file should\n *                                               match in order to be processed by the plugin.\n * @property {Array}                     exclude A list of expressions the name of a file\n *                                               shouldn't match in order to be processed by the\n *                                               plugin.\n * @property {ProjextRollupPluginsStats} stats   The function the plugin will call in order to\n *                                               inform a file was created.\n ",
        "start": 5117,
        "end": 5942,
        "loc": {
          "start": {
            "line": 175,
            "column": 0
          },
          "end": {
            "line": 186,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjextRollupCompressionPluginEntry\n * @property {string} original   The path to the file that was compressed.\n * @property {string} compressed The path to the compressed file.\n ",
        "start": 5944,
        "end": 6149,
        "loc": {
          "start": {
            "line": 188,
            "column": 0
          },
          "end": {
            "line": 192,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Plugins > Copy\n * ================================================================================================\n ",
        "start": 6151,
        "end": 6376,
        "loc": {
          "start": {
            "line": 194,
            "column": 0
          },
          "end": {
            "line": 198,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {function} ProjextRollupCopyPluginItemTransform\n * @param {Buffer} contents The original contents of the file.\n * @return {Promise<string,Error>} The updated contents.\n ",
        "start": 6378,
        "end": 6565,
        "loc": {
          "start": {
            "line": 200,
            "column": 0
          },
          "end": {
            "line": 204,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjextRollupCopyPluginItem\n * @property {string}                                from      The file origin path.\n * @property {string}                                to        The file destination path.\n * @property {?ProjextRollupCopyPluginItemTransform} transform A custom function to modify the\n *                                                             contents of the file to copy.\n ",
        "start": 6567,
        "end": 6986,
        "loc": {
          "start": {
            "line": 206,
            "column": 0
          },
          "end": {
            "line": 212,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjextRollupCopyPluginOptions\n * @property {Array}                      files A list of files information so the plugin can copy\n *                                              them. Each item should have a `from` and `to`\n *                                              property, otherwise the plugin will throw an error.\n *                                              See {@link ProjextRollupCopyPluginItem}.\n * @property {ProjextRollupPluginsStats}  stats The function the plugin will call in order to\n *                                              inform a file was copied.\n ",
        "start": 6988,
        "end": 7597,
        "loc": {
          "start": {
            "line": 214,
            "column": 0
          },
          "end": {
            "line": 222,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Plugins > CSS\n * ================================================================================================\n ",
        "start": 7599,
        "end": 7823,
        "loc": {
          "start": {
            "line": 224,
            "column": 0
          },
          "end": {
            "line": 228,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjextRollupCSSPluginOptions\n * @property {Array}                      include      A list of expressions the name of a file\n *                                                     should match in order to be processed by\n *                                                     the plugin.\n * @property {Array}                      exclude      A list of expressions the name of a file\n *                                                     shouldn't match in order to be processed by\n *                                                     the plugin.\n * @property {boolean}                    insert       Whether the styles should be injected on\n *                                                     the app `<head >` when the bundle finishes\n *                                                     loading.\n * @property {string|boolean}             output       This can be the name a file where all the\n *                                                     files that match the filter would be\n *                                                     bundled. The option can also be set to\n *                                                     `false` so the styles would be returned as\n *                                                     a string when `require`d.\n * @property {?RollupStylesheetProcessor} processor    A custom function to processed the styles.\n * @property {string}                     insertFnName If `insert` is `true`, this will be used as\n *                                                     the name of the function in charge of\n *                                                     injecting the styles.\n * @property {ProjextRollupPluginsStats}  stats        The function the plugin will call in order\n *                                                     to inform a file was created.\n ",
        "start": 7825,
        "end": 9674,
        "loc": {
          "start": {
            "line": 230,
            "column": 0
          },
          "end": {
            "line": 252,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Plugins > DevServer\n * ================================================================================================\n ",
        "start": 9676,
        "end": 9906,
        "loc": {
          "start": {
            "line": 254,
            "column": 0
          },
          "end": {
            "line": 258,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {function} ProjextRollupDevServerPluginEvent\n * @param {ProjextRollupDevServerPlugin} plugin\n ",
        "start": 9908,
        "end": 10020,
        "loc": {
          "start": {
            "line": 260,
            "column": 0
          },
          "end": {
            "line": 263,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjextRollupDevServerPluginOptions\n * @property {string}                            host               The server hostname.\n * @property {number}                            port               The server port.\n * @property {Array|string}                      contentBase        The directory from where the\n *                                                                  files are going to be served.\n *                                                                  It can be a single directory\n *                                                                  or a list of them.\n * @property {boolean}                           historyApiFallback Whether or not the server\n *                                                                  should redirect the user to\n *                                                                  the `index.html` after a\n *                                                                  `404`.\n * @property {null|HTTPSOptions}                 https              The required files to run the\n *                                                                  server on HTTPs. They are the\n *                                                                  same that `https.createServer`\n *                                                                  supports.\n * @property {boolean}                           open               Whether or not the browser\n *                                                                  should be opened after\n *                                                                  starting the server.\n * @property {?Logger}                           logger             A custom logger to log the\n *                                                                  server events.\n * @property {ProjextRollupDevServerPluginEvent} onStart            A callback to be called when\n *                                                                  the server starts.\n * @property {ProjextRollupDevServerPluginEvent} onStop             A callback to be called when\n *                                                                  the server stops.\n ",
        "start": 10022,
        "end": 12190,
        "loc": {
          "start": {
            "line": 265,
            "column": 0
          },
          "end": {
            "line": 290,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Plugins > NodeRunner\n * ================================================================================================\n ",
        "start": 12192,
        "end": 12423,
        "loc": {
          "start": {
            "line": 292,
            "column": 0
          },
          "end": {
            "line": 296,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {function} ProjextRollupNodeRunnerPluginEvent\n * @param {ProjextRollupNodeRunnerPlugin} plugin\n ",
        "start": 12425,
        "end": 12539,
        "loc": {
          "start": {
            "line": 298,
            "column": 0
          },
          "end": {
            "line": 301,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjextRollupNodeRunnerPluginOptions\n * @property {string}                             file    The file to execute\n * @property {?Logger}                            logger  A custom logger to log the server\n *                                                        events.\n * @property {?NodeInspectorSettings}             inspect The custom settings for the Node\n *                                                        Inspector.\n * @property {ProjextRollupNodeRunnerPluginEvent} onStart A callback to be called when the\n *                                                        execution starts.\n * @property {ProjextRollupNodeRunnerPluginEvent} onStop  A callback to be called when the\n *                                                        execution stops.\n ",
        "start": 12541,
        "end": 13335,
        "loc": {
          "start": {
            "line": 303,
            "column": 0
          },
          "end": {
            "line": 314,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Plugins > Stats\n * ================================================================================================\n ",
        "start": 13337,
        "end": 13563,
        "loc": {
          "start": {
            "line": 316,
            "column": 0
          },
          "end": {
            "line": 320,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjextRollupStatsPluginOptions\n * @property {string} path The path to the directory where all the files are generated. The plugin\n *                         needs it so it can be removed when showing the files list.\n ",
        "start": 13565,
        "end": 13810,
        "loc": {
          "start": {
            "line": 322,
            "column": 0
          },
          "end": {
            "line": 326,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjextRollupStatsPluginReset\n * @property {function} intro The method Rollup calls to get code to add on the top of the bundle.\n *                            The plugin uses it as a _\"hook\"_ in order to reset the entries list\n *                            and thus, avoid duplicated entries when Rollup is on _\"watch mode\"_.\n ",
        "start": 13812,
        "end": 14166,
        "loc": {
          "start": {
            "line": 328,
            "column": 0
          },
          "end": {
            "line": 333,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjextRollupStatsPluginLogOptions\n * @property {Array}     extraEntries A list of extra entries to add.\n * @property {?Logger}   logger       A custom instance of {@link Logger} to log the report table.\n * @property {?function} afterLog     A custom callback to call after the report table is logged.\n ",
        "start": 14168,
        "end": 14498,
        "loc": {
          "start": {
            "line": 335,
            "column": 0
          },
          "end": {
            "line": 340,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjextRollupStatsPluginLog\n * @property {function} onwrite The method Rollup calls after writing the files on the file system.\n *                              When this happens, the plugin will log the report table on the\n *                              console.\n ",
        "start": 14500,
        "end": 14792,
        "loc": {
          "start": {
            "line": 342,
            "column": 0
          },
          "end": {
            "line": 347,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjextRollupStatsPluginCellsWidth\n * @property {number} plugin The width for the plugin's cell.\n * @property {number} file   The width for the file path cell.\n * @property {number} size   The width for the file size cell.\n ",
        "start": 14794,
        "end": 15045,
        "loc": {
          "start": {
            "line": 349,
            "column": 0
          },
          "end": {
            "line": 354,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Plugins > Stylesheet Assets\n * ================================================================================================\n ",
        "start": 15047,
        "end": 15285,
        "loc": {
          "start": {
            "line": 356,
            "column": 0
          },
          "end": {
            "line": 360,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjextRollupStylesheetAssetsPluginOptions\n * @property {string}                    stylesheet    The path to the CSS or JS file where the\n *                                                     styles should be fixed.\n * @property {Array}                     insertFnNames In case the `stylesheet` is a JS file, it's\n *                                                     possible that the styles are being injected\n *                                                     by a function, so this option can be used\n *                                                     the different function names the plugin\n *                                                     should search for in order to find CSS\n *                                                     blocks.\n * @property {ProjextRollupPluginURL}    urls          The set of URLs the plugin will use to\n *                                                     validate the files inside the stylesheet in\n *                                                     order to know if they should be processed,\n *                                                     where to copy them and which URL to use.\n * @property {ProjextRollupPluginsStats} stats         The function the plugin will call in order\n *                                                     to inform a file was created.\n ",
        "start": 15287,
        "end": 16650,
        "loc": {
          "start": {
            "line": 362,
            "column": 0
          },
          "end": {
            "line": 378,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjextRollupStylesheetAssetsHelperPluginOptions\n * @property {Array}  include A list of expressions the name of a file should match in order to be\n *                            processed by the plugin.\n * @property {Array}  exclude A list of expressions the name of a file shouldn't match in order to\n *                            be processed by the plugin.\n * @property {string} fnName  The name of the function that will be used to wrap the code.\n ",
        "start": 16652,
        "end": 17131,
        "loc": {
          "start": {
            "line": 380,
            "column": 0
          },
          "end": {
            "line": 387,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Plugins > Stylesheet Modules Fixer\n * ================================================================================================\n ",
        "start": 17133,
        "end": 17378,
        "loc": {
          "start": {
            "line": 389,
            "column": 0
          },
          "end": {
            "line": 393,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjextRollupStylesheetModulesFixerPluginOptions\n * @property {Array}  include           A list of expressions the name of a file should match in\n *                                      order to be processed by the plugin.\n * @property {Array}  exclude           A list of expressions the name of a file shouldn't match\n *                                      in order to be processed by the plugin.\n * @property {string} modulesExportName The name of the export statement for the CSS modules\n *                                      locals.\n ",
        "start": 17380,
        "end": 17949,
        "loc": {
          "start": {
            "line": 395,
            "column": 0
          },
          "end": {
            "line": 403,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Plugins > Template\n * ================================================================================================\n ",
        "start": 17951,
        "end": 18180,
        "loc": {
          "start": {
            "line": 405,
            "column": 0
          },
          "end": {
            "line": 409,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjextRollupTemplatePluginOptions\n * @property {string}                    template      The path to the template file the plugin\n *                                                     will use to inject the JS and CSS files.\n * @property {string}                    output        The path where the final file will be\n *                                                     written.\n * @property {Array}                     scripts       A list of JS files that will be linked on\n *                                                     the template.\n * @property {boolean}                   scriptsAsync  Whether or not to use `async` attribute on\n *                                                     the script tags.\n * @property {boolean}                   scriptsOnBody Whether or not to place the script tags on\n *                                                     the body.\n * @property {Array}                     stylesheets   A list of CSS files that will be linked on\n *                                                     the template.\n * @property {ProjextRollupPluginURL}    urls          The set of URLs the plugin will use to\n *                                                     validate the files `require`d on the\n *                                                     template in order to know if they should be\n *                                                     processed, where to copy them and which URL\n *                                                     to use.\n * @property {ProjextRollupPluginsStats} stats         The function the plugin will call in order\n *                                                     to inform a file was copied.\n ",
        "start": 18182,
        "end": 19889,
        "loc": {
          "start": {
            "line": 411,
            "column": 0
          },
          "end": {
            "line": 432,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Plugins > URLS\n * ================================================================================================\n ",
        "start": 19891,
        "end": 20116,
        "loc": {
          "start": {
            "line": 434,
            "column": 0
          },
          "end": {
            "line": 438,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjextRollupURLsPluginOptions\n * @property {ProjextRollupPluginURL}    urls  The set of URLs the plugin will use to validate the\n *                                             files in order to know if they should be processed,\n *                                             where to copy them and which URL to use.\n * @property {ProjextRollupPluginsStats} stats The function the plugin will call in order to\n *                                             inform a file was copied.\n ",
        "start": 20118,
        "end": 20629,
        "loc": {
          "start": {
            "line": 440,
            "column": 0
          },
          "end": {
            "line": 447,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Middleware\n * ================================================================================================\n ",
        "start": 20631,
        "end": 20852,
        "loc": {
          "start": {
            "line": 449,
            "column": 0
          },
          "end": {
            "line": 453,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {function} MiddlewareGetDirectory\n * @return {string}\n * The build directory of the target implementing the middleware.\n ",
        "start": 20854,
        "end": 20993,
        "loc": {
          "start": {
            "line": 455,
            "column": 0
          },
          "end": {
            "line": 459,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {function} MiddlewareGetFileSystem\n * @return {Promise<FileSystem,Error>}\n * The reason this is resolved on a promise is to avoid trying to accessing files before they are\n * generated.\n ",
        "start": 20995,
        "end": 21200,
        "loc": {
          "start": {
            "line": 461,
            "column": 0
          },
          "end": {
            "line": 466,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} MiddlewareInformation\n * @property {Middleware} middleware\n * The middleware that implements the Rollup build process.\n * @property {MiddlewareGetDirectory} getDirectory\n * To access the target implementing the middleware build directory.\n * @property {MiddlewareGetFileSystem} getFileSystem\n * To access the file system only when the middleware finishes the build process.\n ",
        "start": 21202,
        "end": 21604,
        "loc": {
          "start": {
            "line": 468,
            "column": 0
          },
          "end": {
            "line": 476,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Configurations\n * ================================================================================================\n ",
        "start": 21606,
        "end": 21831,
        "loc": {
          "start": {
            "line": 478,
            "column": 0
          },
          "end": {
            "line": 482,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} RollupConfigurationsByEnvironment\n * @property {ConfigurationFile} production\n * The configuration service for a the target type production build.\n * @property {ConfigurationFile} development\n * The configuration service for a the target type development build.\n ",
        "start": 21833,
        "end": 22123,
        "loc": {
          "start": {
            "line": 484,
            "column": 0
          },
          "end": {
            "line": 490,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} RollupConfigurations\n * @property {RollupConfigurationsByEnvironment} node\n * The build types configurations for a Node target.\n * @property {RollupConfigurationsByEnvironment} browser\n * The build types configurations for a browser target.\n ",
        "start": 22125,
        "end": 22394,
        "loc": {
          "start": {
            "line": 492,
            "column": 0
          },
          "end": {
            "line": 498,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Others\n * ================================================================================================\n ",
        "start": 22396,
        "end": 22613,
        "loc": {
          "start": {
            "line": 500,
            "column": 0
          },
          "end": {
            "line": 504,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} RollupConfigurationOutputParams\n * @property {string}  file      The path where the bundle will be generated.\n * @property {string}  format    The format of the bundle (`iife`, `cjs` or `umd`).\n * @property {boolean} sourcemap Whether or not a source map should be generated for the bundle.\n * @property {string}  name      The export name of the bundle.\n * @property {?string} exports   This is implemented when the target is a library. It allows the\n *                               bundle to have named exports.\n ",
        "start": 22615,
        "end": 23158,
        "loc": {
          "start": {
            "line": 506,
            "column": 0
          },
          "end": {
            "line": 514,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} RollupConfigurationPathsParams\n * @property {string} js\n * The filename format and path for the bundle, on the distribution directory.\n * @property {string} css\n * The filename format and path for the generated stylesheet, on the distribution directory.\n * @property {string} images\n * The filename format and path for the images that are going to be copied to the distribution\n * directory.\n * @property {string} fonts\n * The filename format and path for the font files that are going to be copied to the distribution\n * directory.\n ",
        "start": 23160,
        "end": 23721,
        "loc": {
          "start": {
            "line": 516,
            "column": 0
          },
          "end": {
            "line": 528,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} RollupConfigurationParams\n * @property {string}                          input       The path for the entry file.\n * @property {RollupConfigurationOutputParams} output      The Rollup settings for the bundle\n *                                                         generation.\n * @property {Target}                          target      The information of the target being\n *                                                         bundled.\n * @property {TargetFileRules}                 targetRules The rules to find the different file\n *                                                         types a target may use.\n * @property {Object}                          definitions A dictionary of defined variables that\n *                                                         will be replaced on the bundled code.\n * @property {string}                          buildType   The intended build type: `development`\n *                                                         or `production`.\n * @property {RollupConfigurationPathsParams}  paths       A dictionary with the filenames formats\n *                                                         and paths of the different files the\n *                                                         bundle can generate.\n * @property {Array}                           copy        A list of\n *                                                         {@link TargetExtraFile} with\n *                                                         the information of files that need to\n *                                                         be copied during the bundling process.\n\n/**\n * @typedef {Object} RollupPluginInfo\n * @property {string} name          The name of the plugin.\n * @property {string} configuration The path to the Rollup configuration file.\n * @property {Array}  external      The list of subpaths the plugin exposes and that should be\n *                                  handled as external dependencies, in order to avoid bundling\n *                                  them.\n ",
        "start": 23723,
        "end": 25784,
        "loc": {
          "start": {
            "line": 530,
            "column": 0
          },
          "end": {
            "line": 558,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {function} ProviderRegisterMethod\n * @param {Jimple} app\n * A reference to the dependency injection container.\n ",
        "start": 25786,
        "end": 25916,
        "loc": {
          "start": {
            "line": 560,
            "column": 0
          },
          "end": {
            "line": 564,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} Provider\n * @property {ProviderRegisterMethod} register\n * The method that gets called when registering the provider.\n ",
        "start": 25918,
        "end": 26064,
        "loc": {
          "start": {
            "line": 566,
            "column": 0
          },
          "end": {
            "line": 570,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {string|Object} StringOrObject\n ",
        "start": 26066,
        "end": 26116,
        "loc": {
          "start": {
            "line": 572,
            "column": 0
          },
          "end": {
            "line": 574,
            "column": 3
          }
        }
      }
    ]
  },
  "comments": [
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Externals\n * ================================================================================================\n ",
      "start": 0,
      "end": 220,
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Jimple}\n * https://yarnpkg.com/en/package/jimple\n ",
      "start": 222,
      "end": 292,
      "loc": {
        "start": {
          "line": 7,
          "column": 0
        },
        "end": {
          "line": 10,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Jimpex}\n * https://yarnpkg.com/en/package/jimpex\n ",
      "start": 294,
      "end": 364,
      "loc": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 15,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Express}\n * https://expressjs.com\n ",
      "start": 366,
      "end": 421,
      "loc": {
        "start": {
          "line": 17,
          "column": 0
        },
        "end": {
          "line": 20,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {FileSystem}\n * https://nodejs.org/api/fs.html\n ",
      "start": 423,
      "end": 490,
      "loc": {
        "start": {
          "line": 22,
          "column": 0
        },
        "end": {
          "line": 25,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {PathUtils}\n * https://homer0.github.io/wootils/class/wootils/node/pathUtils.js~PathUtils.html\n ",
      "start": 492,
      "end": 607,
      "loc": {
        "start": {
          "line": 27,
          "column": 0
        },
        "end": {
          "line": 30,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Logger}\n * https://homer0.github.io/wootils/class/wootils/node/logger.js~Logger.html\n ",
      "start": 609,
      "end": 715,
      "loc": {
        "start": {
          "line": 32,
          "column": 0
        },
        "end": {
          "line": 35,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {EnvironmentUtils}\n * https://homer0.github.io/wootils/class/wootils/node/environmentUtils.js~EnvironmentUtils.html\n ",
      "start": 717,
      "end": 853,
      "loc": {
        "start": {
          "line": 37,
          "column": 0
        },
        "end": {
          "line": 40,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Projext}\n * https://homer0.github.io/projext/class/src/app/index.js~Projext.html\n ",
      "start": 855,
      "end": 957,
      "loc": {
        "start": {
          "line": 42,
          "column": 0
        },
        "end": {
          "line": 45,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {BuildVersion}\n * https://homer0.github.io/projext/class/src/services/building/buildVersion.js~BuildVersion.html\n ",
      "start": 959,
      "end": 1092,
      "loc": {
        "start": {
          "line": 47,
          "column": 0
        },
        "end": {
          "line": 50,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Events}\n * https://homer0.github.io/projext/class/src/services/common/events.js~Events.html\n ",
      "start": 1094,
      "end": 1207,
      "loc": {
        "start": {
          "line": 52,
          "column": 0
        },
        "end": {
          "line": 55,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Targets}\n * https://homer0.github.io/projext/class/src/services/targets/targets.js~Targets.html\n ",
      "start": 1209,
      "end": 1326,
      "loc": {
        "start": {
          "line": 57,
          "column": 0
        },
        "end": {
          "line": 60,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {TargetsFileRules}\n *  ttps://homer0.github.io/projext/class/src/services/targets/targetsFileRules/targetsFileRules.js~TargetsFileRules.html\n  ",
      "start": 1328,
      "end": 1490,
      "loc": {
        "start": {
          "line": 62,
          "column": 0
        },
        "end": {
          "line": 65,
          "column": 4
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {TargetFileRules}\n * https://homer0.github.io/projext/typedef/index.html#static-typedef-TargetFileRules\n ",
      "start": 1492,
      "end": 1616,
      "loc": {
        "start": {
          "line": 67,
          "column": 0
        },
        "end": {
          "line": 70,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {TargetsHTML}\n * https://homer0.github.io/projext/class/src/services/targets/targetsHTML.js~TargetsHTML.html\n ",
      "start": 1618,
      "end": 1747,
      "loc": {
        "start": {
          "line": 72,
          "column": 0
        },
        "end": {
          "line": 75,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Target}\n * https://homer0.github.io/projext/typedef/index.html#static-typedef-Target\n ",
      "start": 1749,
      "end": 1855,
      "loc": {
        "start": {
          "line": 77,
          "column": 0
        },
        "end": {
          "line": 80,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {TargetConfigurationCreator}\n * https://homer0.github.io/projext/typedef/index.html#static-typedef-TargetConfigurationCreator\n ",
      "start": 1857,
      "end": 2003,
      "loc": {
        "start": {
          "line": 82,
          "column": 0
        },
        "end": {
          "line": 85,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {TargetExtraFile}\n * https://homer0.github.io/projext/typedef/index.html#static-typedef-TargetExtraFile\n ",
      "start": 2005,
      "end": 2129,
      "loc": {
        "start": {
          "line": 87,
          "column": 0
        },
        "end": {
          "line": 90,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {BabelConfiguration}\n *  ttps://homer0.github.io/projext/class/src/services/configurations/babelConfiguration.js~BabelConfiguration.html\n  ",
      "start": 2131,
      "end": 2289,
      "loc": {
        "start": {
          "line": 92,
          "column": 0
        },
        "end": {
          "line": 95,
          "column": 4
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {NodeInspectorSettings}\n * https://homer0.github.io/projext/typedef/index.html#static-typedef-NodeInspectorSettings\n ",
      "start": 2291,
      "end": 2427,
      "loc": {
        "start": {
          "line": 97,
          "column": 0
        },
        "end": {
          "line": 100,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Middleware}\n * http://expressjs.com/en/guide/using-middleware.html\n ",
      "start": 2429,
      "end": 2517,
      "loc": {
        "start": {
          "line": 102,
          "column": 0
        },
        "end": {
          "line": 105,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {HTTPRequest}\n * https://nodejs.org/api/http.html#http_class_http_clientrequest\n ",
      "start": 2519,
      "end": 2619,
      "loc": {
        "start": {
          "line": 107,
          "column": 0
        },
        "end": {
          "line": 110,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {HTTPResponse}\n * https://nodejs.org/api/http.html#http_class_http_serverresponse\n ",
      "start": 2621,
      "end": 2723,
      "loc": {
        "start": {
          "line": 112,
          "column": 0
        },
        "end": {
          "line": 115,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Buffer}\n * https://nodejs.org/api/buffer.html\n ",
      "start": 2725,
      "end": 2792,
      "loc": {
        "start": {
          "line": 117,
          "column": 0
        },
        "end": {
          "line": 120,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Plugins > Commons\n * ================================================================================================\n ",
      "start": 2794,
      "end": 3022,
      "loc": {
        "start": {
          "line": 122,
          "column": 0
        },
        "end": {
          "line": 126,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {function} RollupFilter\n * @param {string} filepath The path to validate.\n * @return {boolean} Whether or not the path is valid.\n ",
      "start": 3024,
      "end": 3172,
      "loc": {
        "start": {
          "line": 128,
          "column": 0
        },
        "end": {
          "line": 132,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {function} RollupStylesheetProcessor\n * @param {string} code The style code to process.\n * @return {Promise<StringOrObject,Error>} If the Promise gets resolved as a string, that would\n *                                          be used as the style code to either return or inject.\n *                                          But if it gets resolved as an `Object`, it's expected\n *                                          for it to have a `css`  key with the style code, the\n *                                          rest of the keys will be added as named exports.\n ",
      "start": 3174,
      "end": 3763,
      "loc": {
        "start": {
          "line": 134,
          "column": 0
        },
        "end": {
          "line": 142,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} RollupFileDefinition\n * @param {string} code The file contents.\n * @param {Object} map Extra information for the file map.\n ",
      "start": 3765,
      "end": 3916,
      "loc": {
        "start": {
          "line": 144,
          "column": 0
        },
        "end": {
          "line": 148,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {function} ProjextRollupPluginsStats\n * @param {string} plugin   The name of the plugin that generated/copied the file.\n * @param {string} filepath The file that was generated/copied.\n ",
      "start": 3918,
      "end": 4121,
      "loc": {
        "start": {
          "line": 150,
          "column": 0
        },
        "end": {
          "line": 154,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupPluginURL\n * @property {Array}  include A list of expressions the name of a file should match in order to be\n *                            processed by the plugin.\n * @property {Array}  exclude A list of expressions the name of a file shouldn't match in order to\n *                            be processed by the plugin.\n * @property {string} output  The path to the where the a file would be copied. It supports the\n *                            placeholders `[name]` for the file name and `[ext]` for its\n *                            extension.\n * @property {string} url     The URL for the file. It supports the placeholders `[name]` for the\n *                            file name and `[ext]` for its extension.\n ",
      "start": 4123,
      "end": 4881,
      "loc": {
        "start": {
          "line": 156,
          "column": 0
        },
        "end": {
          "line": 167,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Plugins > Compression\n * ================================================================================================\n ",
      "start": 4883,
      "end": 5115,
      "loc": {
        "start": {
          "line": 169,
          "column": 0
        },
        "end": {
          "line": 173,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupCompressionPluginOptions\n * @property {string}                    folder  The directory where the plugin will search for\n *                                               files.\n * @property {Array}                     include A list of expressions the name of a file should\n *                                               match in order to be processed by the plugin.\n * @property {Array}                     exclude A list of expressions the name of a file\n *                                               shouldn't match in order to be processed by the\n *                                               plugin.\n * @property {ProjextRollupPluginsStats} stats   The function the plugin will call in order to\n *                                               inform a file was created.\n ",
      "start": 5117,
      "end": 5942,
      "loc": {
        "start": {
          "line": 175,
          "column": 0
        },
        "end": {
          "line": 186,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupCompressionPluginEntry\n * @property {string} original   The path to the file that was compressed.\n * @property {string} compressed The path to the compressed file.\n ",
      "start": 5944,
      "end": 6149,
      "loc": {
        "start": {
          "line": 188,
          "column": 0
        },
        "end": {
          "line": 192,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Plugins > Copy\n * ================================================================================================\n ",
      "start": 6151,
      "end": 6376,
      "loc": {
        "start": {
          "line": 194,
          "column": 0
        },
        "end": {
          "line": 198,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {function} ProjextRollupCopyPluginItemTransform\n * @param {Buffer} contents The original contents of the file.\n * @return {Promise<string,Error>} The updated contents.\n ",
      "start": 6378,
      "end": 6565,
      "loc": {
        "start": {
          "line": 200,
          "column": 0
        },
        "end": {
          "line": 204,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupCopyPluginItem\n * @property {string}                                from      The file origin path.\n * @property {string}                                to        The file destination path.\n * @property {?ProjextRollupCopyPluginItemTransform} transform A custom function to modify the\n *                                                             contents of the file to copy.\n ",
      "start": 6567,
      "end": 6986,
      "loc": {
        "start": {
          "line": 206,
          "column": 0
        },
        "end": {
          "line": 212,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupCopyPluginOptions\n * @property {Array}                      files A list of files information so the plugin can copy\n *                                              them. Each item should have a `from` and `to`\n *                                              property, otherwise the plugin will throw an error.\n *                                              See {@link ProjextRollupCopyPluginItem}.\n * @property {ProjextRollupPluginsStats}  stats The function the plugin will call in order to\n *                                              inform a file was copied.\n ",
      "start": 6988,
      "end": 7597,
      "loc": {
        "start": {
          "line": 214,
          "column": 0
        },
        "end": {
          "line": 222,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Plugins > CSS\n * ================================================================================================\n ",
      "start": 7599,
      "end": 7823,
      "loc": {
        "start": {
          "line": 224,
          "column": 0
        },
        "end": {
          "line": 228,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupCSSPluginOptions\n * @property {Array}                      include      A list of expressions the name of a file\n *                                                     should match in order to be processed by\n *                                                     the plugin.\n * @property {Array}                      exclude      A list of expressions the name of a file\n *                                                     shouldn't match in order to be processed by\n *                                                     the plugin.\n * @property {boolean}                    insert       Whether the styles should be injected on\n *                                                     the app `<head >` when the bundle finishes\n *                                                     loading.\n * @property {string|boolean}             output       This can be the name a file where all the\n *                                                     files that match the filter would be\n *                                                     bundled. The option can also be set to\n *                                                     `false` so the styles would be returned as\n *                                                     a string when `require`d.\n * @property {?RollupStylesheetProcessor} processor    A custom function to processed the styles.\n * @property {string}                     insertFnName If `insert` is `true`, this will be used as\n *                                                     the name of the function in charge of\n *                                                     injecting the styles.\n * @property {ProjextRollupPluginsStats}  stats        The function the plugin will call in order\n *                                                     to inform a file was created.\n ",
      "start": 7825,
      "end": 9674,
      "loc": {
        "start": {
          "line": 230,
          "column": 0
        },
        "end": {
          "line": 252,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Plugins > DevServer\n * ================================================================================================\n ",
      "start": 9676,
      "end": 9906,
      "loc": {
        "start": {
          "line": 254,
          "column": 0
        },
        "end": {
          "line": 258,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {function} ProjextRollupDevServerPluginEvent\n * @param {ProjextRollupDevServerPlugin} plugin\n ",
      "start": 9908,
      "end": 10020,
      "loc": {
        "start": {
          "line": 260,
          "column": 0
        },
        "end": {
          "line": 263,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupDevServerPluginOptions\n * @property {string}                            host               The server hostname.\n * @property {number}                            port               The server port.\n * @property {Array|string}                      contentBase        The directory from where the\n *                                                                  files are going to be served.\n *                                                                  It can be a single directory\n *                                                                  or a list of them.\n * @property {boolean}                           historyApiFallback Whether or not the server\n *                                                                  should redirect the user to\n *                                                                  the `index.html` after a\n *                                                                  `404`.\n * @property {null|HTTPSOptions}                 https              The required files to run the\n *                                                                  server on HTTPs. They are the\n *                                                                  same that `https.createServer`\n *                                                                  supports.\n * @property {boolean}                           open               Whether or not the browser\n *                                                                  should be opened after\n *                                                                  starting the server.\n * @property {?Logger}                           logger             A custom logger to log the\n *                                                                  server events.\n * @property {ProjextRollupDevServerPluginEvent} onStart            A callback to be called when\n *                                                                  the server starts.\n * @property {ProjextRollupDevServerPluginEvent} onStop             A callback to be called when\n *                                                                  the server stops.\n ",
      "start": 10022,
      "end": 12190,
      "loc": {
        "start": {
          "line": 265,
          "column": 0
        },
        "end": {
          "line": 290,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Plugins > NodeRunner\n * ================================================================================================\n ",
      "start": 12192,
      "end": 12423,
      "loc": {
        "start": {
          "line": 292,
          "column": 0
        },
        "end": {
          "line": 296,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {function} ProjextRollupNodeRunnerPluginEvent\n * @param {ProjextRollupNodeRunnerPlugin} plugin\n ",
      "start": 12425,
      "end": 12539,
      "loc": {
        "start": {
          "line": 298,
          "column": 0
        },
        "end": {
          "line": 301,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupNodeRunnerPluginOptions\n * @property {string}                             file    The file to execute\n * @property {?Logger}                            logger  A custom logger to log the server\n *                                                        events.\n * @property {?NodeInspectorSettings}             inspect The custom settings for the Node\n *                                                        Inspector.\n * @property {ProjextRollupNodeRunnerPluginEvent} onStart A callback to be called when the\n *                                                        execution starts.\n * @property {ProjextRollupNodeRunnerPluginEvent} onStop  A callback to be called when the\n *                                                        execution stops.\n ",
      "start": 12541,
      "end": 13335,
      "loc": {
        "start": {
          "line": 303,
          "column": 0
        },
        "end": {
          "line": 314,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Plugins > Stats\n * ================================================================================================\n ",
      "start": 13337,
      "end": 13563,
      "loc": {
        "start": {
          "line": 316,
          "column": 0
        },
        "end": {
          "line": 320,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupStatsPluginOptions\n * @property {string} path The path to the directory where all the files are generated. The plugin\n *                         needs it so it can be removed when showing the files list.\n ",
      "start": 13565,
      "end": 13810,
      "loc": {
        "start": {
          "line": 322,
          "column": 0
        },
        "end": {
          "line": 326,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupStatsPluginReset\n * @property {function} intro The method Rollup calls to get code to add on the top of the bundle.\n *                            The plugin uses it as a _\"hook\"_ in order to reset the entries list\n *                            and thus, avoid duplicated entries when Rollup is on _\"watch mode\"_.\n ",
      "start": 13812,
      "end": 14166,
      "loc": {
        "start": {
          "line": 328,
          "column": 0
        },
        "end": {
          "line": 333,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupStatsPluginLogOptions\n * @property {Array}     extraEntries A list of extra entries to add.\n * @property {?Logger}   logger       A custom instance of {@link Logger} to log the report table.\n * @property {?function} afterLog     A custom callback to call after the report table is logged.\n ",
      "start": 14168,
      "end": 14498,
      "loc": {
        "start": {
          "line": 335,
          "column": 0
        },
        "end": {
          "line": 340,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupStatsPluginLog\n * @property {function} onwrite The method Rollup calls after writing the files on the file system.\n *                              When this happens, the plugin will log the report table on the\n *                              console.\n ",
      "start": 14500,
      "end": 14792,
      "loc": {
        "start": {
          "line": 342,
          "column": 0
        },
        "end": {
          "line": 347,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupStatsPluginCellsWidth\n * @property {number} plugin The width for the plugin's cell.\n * @property {number} file   The width for the file path cell.\n * @property {number} size   The width for the file size cell.\n ",
      "start": 14794,
      "end": 15045,
      "loc": {
        "start": {
          "line": 349,
          "column": 0
        },
        "end": {
          "line": 354,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Plugins > Stylesheet Assets\n * ================================================================================================\n ",
      "start": 15047,
      "end": 15285,
      "loc": {
        "start": {
          "line": 356,
          "column": 0
        },
        "end": {
          "line": 360,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupStylesheetAssetsPluginOptions\n * @property {string}                    stylesheet    The path to the CSS or JS file where the\n *                                                     styles should be fixed.\n * @property {Array}                     insertFnNames In case the `stylesheet` is a JS file, it's\n *                                                     possible that the styles are being injected\n *                                                     by a function, so this option can be used\n *                                                     the different function names the plugin\n *                                                     should search for in order to find CSS\n *                                                     blocks.\n * @property {ProjextRollupPluginURL}    urls          The set of URLs the plugin will use to\n *                                                     validate the files inside the stylesheet in\n *                                                     order to know if they should be processed,\n *                                                     where to copy them and which URL to use.\n * @property {ProjextRollupPluginsStats} stats         The function the plugin will call in order\n *                                                     to inform a file was created.\n ",
      "start": 15287,
      "end": 16650,
      "loc": {
        "start": {
          "line": 362,
          "column": 0
        },
        "end": {
          "line": 378,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupStylesheetAssetsHelperPluginOptions\n * @property {Array}  include A list of expressions the name of a file should match in order to be\n *                            processed by the plugin.\n * @property {Array}  exclude A list of expressions the name of a file shouldn't match in order to\n *                            be processed by the plugin.\n * @property {string} fnName  The name of the function that will be used to wrap the code.\n ",
      "start": 16652,
      "end": 17131,
      "loc": {
        "start": {
          "line": 380,
          "column": 0
        },
        "end": {
          "line": 387,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Plugins > Stylesheet Modules Fixer\n * ================================================================================================\n ",
      "start": 17133,
      "end": 17378,
      "loc": {
        "start": {
          "line": 389,
          "column": 0
        },
        "end": {
          "line": 393,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupStylesheetModulesFixerPluginOptions\n * @property {Array}  include           A list of expressions the name of a file should match in\n *                                      order to be processed by the plugin.\n * @property {Array}  exclude           A list of expressions the name of a file shouldn't match\n *                                      in order to be processed by the plugin.\n * @property {string} modulesExportName The name of the export statement for the CSS modules\n *                                      locals.\n ",
      "start": 17380,
      "end": 17949,
      "loc": {
        "start": {
          "line": 395,
          "column": 0
        },
        "end": {
          "line": 403,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Plugins > Template\n * ================================================================================================\n ",
      "start": 17951,
      "end": 18180,
      "loc": {
        "start": {
          "line": 405,
          "column": 0
        },
        "end": {
          "line": 409,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupTemplatePluginOptions\n * @property {string}                    template      The path to the template file the plugin\n *                                                     will use to inject the JS and CSS files.\n * @property {string}                    output        The path where the final file will be\n *                                                     written.\n * @property {Array}                     scripts       A list of JS files that will be linked on\n *                                                     the template.\n * @property {boolean}                   scriptsAsync  Whether or not to use `async` attribute on\n *                                                     the script tags.\n * @property {boolean}                   scriptsOnBody Whether or not to place the script tags on\n *                                                     the body.\n * @property {Array}                     stylesheets   A list of CSS files that will be linked on\n *                                                     the template.\n * @property {ProjextRollupPluginURL}    urls          The set of URLs the plugin will use to\n *                                                     validate the files `require`d on the\n *                                                     template in order to know if they should be\n *                                                     processed, where to copy them and which URL\n *                                                     to use.\n * @property {ProjextRollupPluginsStats} stats         The function the plugin will call in order\n *                                                     to inform a file was copied.\n ",
      "start": 18182,
      "end": 19889,
      "loc": {
        "start": {
          "line": 411,
          "column": 0
        },
        "end": {
          "line": 432,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Plugins > URLS\n * ================================================================================================\n ",
      "start": 19891,
      "end": 20116,
      "loc": {
        "start": {
          "line": 434,
          "column": 0
        },
        "end": {
          "line": 438,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupURLsPluginOptions\n * @property {ProjextRollupPluginURL}    urls  The set of URLs the plugin will use to validate the\n *                                             files in order to know if they should be processed,\n *                                             where to copy them and which URL to use.\n * @property {ProjextRollupPluginsStats} stats The function the plugin will call in order to\n *                                             inform a file was copied.\n ",
      "start": 20118,
      "end": 20629,
      "loc": {
        "start": {
          "line": 440,
          "column": 0
        },
        "end": {
          "line": 447,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Middleware\n * ================================================================================================\n ",
      "start": 20631,
      "end": 20852,
      "loc": {
        "start": {
          "line": 449,
          "column": 0
        },
        "end": {
          "line": 453,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {function} MiddlewareGetDirectory\n * @return {string}\n * The build directory of the target implementing the middleware.\n ",
      "start": 20854,
      "end": 20993,
      "loc": {
        "start": {
          "line": 455,
          "column": 0
        },
        "end": {
          "line": 459,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {function} MiddlewareGetFileSystem\n * @return {Promise<FileSystem,Error>}\n * The reason this is resolved on a promise is to avoid trying to accessing files before they are\n * generated.\n ",
      "start": 20995,
      "end": 21200,
      "loc": {
        "start": {
          "line": 461,
          "column": 0
        },
        "end": {
          "line": 466,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} MiddlewareInformation\n * @property {Middleware} middleware\n * The middleware that implements the Rollup build process.\n * @property {MiddlewareGetDirectory} getDirectory\n * To access the target implementing the middleware build directory.\n * @property {MiddlewareGetFileSystem} getFileSystem\n * To access the file system only when the middleware finishes the build process.\n ",
      "start": 21202,
      "end": 21604,
      "loc": {
        "start": {
          "line": 468,
          "column": 0
        },
        "end": {
          "line": 476,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Configurations\n * ================================================================================================\n ",
      "start": 21606,
      "end": 21831,
      "loc": {
        "start": {
          "line": 478,
          "column": 0
        },
        "end": {
          "line": 482,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} RollupConfigurationsByEnvironment\n * @property {ConfigurationFile} production\n * The configuration service for a the target type production build.\n * @property {ConfigurationFile} development\n * The configuration service for a the target type development build.\n ",
      "start": 21833,
      "end": 22123,
      "loc": {
        "start": {
          "line": 484,
          "column": 0
        },
        "end": {
          "line": 490,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} RollupConfigurations\n * @property {RollupConfigurationsByEnvironment} node\n * The build types configurations for a Node target.\n * @property {RollupConfigurationsByEnvironment} browser\n * The build types configurations for a browser target.\n ",
      "start": 22125,
      "end": 22394,
      "loc": {
        "start": {
          "line": 492,
          "column": 0
        },
        "end": {
          "line": 498,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Others\n * ================================================================================================\n ",
      "start": 22396,
      "end": 22613,
      "loc": {
        "start": {
          "line": 500,
          "column": 0
        },
        "end": {
          "line": 504,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} RollupConfigurationOutputParams\n * @property {string}  file      The path where the bundle will be generated.\n * @property {string}  format    The format of the bundle (`iife`, `cjs` or `umd`).\n * @property {boolean} sourcemap Whether or not a source map should be generated for the bundle.\n * @property {string}  name      The export name of the bundle.\n * @property {?string} exports   This is implemented when the target is a library. It allows the\n *                               bundle to have named exports.\n ",
      "start": 22615,
      "end": 23158,
      "loc": {
        "start": {
          "line": 506,
          "column": 0
        },
        "end": {
          "line": 514,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} RollupConfigurationPathsParams\n * @property {string} js\n * The filename format and path for the bundle, on the distribution directory.\n * @property {string} css\n * The filename format and path for the generated stylesheet, on the distribution directory.\n * @property {string} images\n * The filename format and path for the images that are going to be copied to the distribution\n * directory.\n * @property {string} fonts\n * The filename format and path for the font files that are going to be copied to the distribution\n * directory.\n ",
      "start": 23160,
      "end": 23721,
      "loc": {
        "start": {
          "line": 516,
          "column": 0
        },
        "end": {
          "line": 528,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} RollupConfigurationParams\n * @property {string}                          input       The path for the entry file.\n * @property {RollupConfigurationOutputParams} output      The Rollup settings for the bundle\n *                                                         generation.\n * @property {Target}                          target      The information of the target being\n *                                                         bundled.\n * @property {TargetFileRules}                 targetRules The rules to find the different file\n *                                                         types a target may use.\n * @property {Object}                          definitions A dictionary of defined variables that\n *                                                         will be replaced on the bundled code.\n * @property {string}                          buildType   The intended build type: `development`\n *                                                         or `production`.\n * @property {RollupConfigurationPathsParams}  paths       A dictionary with the filenames formats\n *                                                         and paths of the different files the\n *                                                         bundle can generate.\n * @property {Array}                           copy        A list of\n *                                                         {@link TargetExtraFile} with\n *                                                         the information of files that need to\n *                                                         be copied during the bundling process.\n\n/**\n * @typedef {Object} RollupPluginInfo\n * @property {string} name          The name of the plugin.\n * @property {string} configuration The path to the Rollup configuration file.\n * @property {Array}  external      The list of subpaths the plugin exposes and that should be\n *                                  handled as external dependencies, in order to avoid bundling\n *                                  them.\n ",
      "start": 23723,
      "end": 25784,
      "loc": {
        "start": {
          "line": 530,
          "column": 0
        },
        "end": {
          "line": 558,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {function} ProviderRegisterMethod\n * @param {Jimple} app\n * A reference to the dependency injection container.\n ",
      "start": 25786,
      "end": 25916,
      "loc": {
        "start": {
          "line": 560,
          "column": 0
        },
        "end": {
          "line": 564,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} Provider\n * @property {ProviderRegisterMethod} register\n * The method that gets called when registering the provider.\n ",
      "start": 25918,
      "end": 26064,
      "loc": {
        "start": {
          "line": 566,
          "column": 0
        },
        "end": {
          "line": 570,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {string|Object} StringOrObject\n ",
      "start": 26066,
      "end": 26116,
      "loc": {
        "start": {
          "line": 572,
          "column": 0
        },
        "end": {
          "line": 574,
          "column": 3
        }
      }
    }
  ],
  "tokens": [
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Externals\n * ================================================================================================\n ",
      "start": 0,
      "end": 220,
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Jimple}\n * https://yarnpkg.com/en/package/jimple\n ",
      "start": 222,
      "end": 292,
      "loc": {
        "start": {
          "line": 7,
          "column": 0
        },
        "end": {
          "line": 10,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Jimpex}\n * https://yarnpkg.com/en/package/jimpex\n ",
      "start": 294,
      "end": 364,
      "loc": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 15,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Express}\n * https://expressjs.com\n ",
      "start": 366,
      "end": 421,
      "loc": {
        "start": {
          "line": 17,
          "column": 0
        },
        "end": {
          "line": 20,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {FileSystem}\n * https://nodejs.org/api/fs.html\n ",
      "start": 423,
      "end": 490,
      "loc": {
        "start": {
          "line": 22,
          "column": 0
        },
        "end": {
          "line": 25,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {PathUtils}\n * https://homer0.github.io/wootils/class/wootils/node/pathUtils.js~PathUtils.html\n ",
      "start": 492,
      "end": 607,
      "loc": {
        "start": {
          "line": 27,
          "column": 0
        },
        "end": {
          "line": 30,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Logger}\n * https://homer0.github.io/wootils/class/wootils/node/logger.js~Logger.html\n ",
      "start": 609,
      "end": 715,
      "loc": {
        "start": {
          "line": 32,
          "column": 0
        },
        "end": {
          "line": 35,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {EnvironmentUtils}\n * https://homer0.github.io/wootils/class/wootils/node/environmentUtils.js~EnvironmentUtils.html\n ",
      "start": 717,
      "end": 853,
      "loc": {
        "start": {
          "line": 37,
          "column": 0
        },
        "end": {
          "line": 40,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Projext}\n * https://homer0.github.io/projext/class/src/app/index.js~Projext.html\n ",
      "start": 855,
      "end": 957,
      "loc": {
        "start": {
          "line": 42,
          "column": 0
        },
        "end": {
          "line": 45,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {BuildVersion}\n * https://homer0.github.io/projext/class/src/services/building/buildVersion.js~BuildVersion.html\n ",
      "start": 959,
      "end": 1092,
      "loc": {
        "start": {
          "line": 47,
          "column": 0
        },
        "end": {
          "line": 50,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Events}\n * https://homer0.github.io/projext/class/src/services/common/events.js~Events.html\n ",
      "start": 1094,
      "end": 1207,
      "loc": {
        "start": {
          "line": 52,
          "column": 0
        },
        "end": {
          "line": 55,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Targets}\n * https://homer0.github.io/projext/class/src/services/targets/targets.js~Targets.html\n ",
      "start": 1209,
      "end": 1326,
      "loc": {
        "start": {
          "line": 57,
          "column": 0
        },
        "end": {
          "line": 60,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {TargetsFileRules}\n *  ttps://homer0.github.io/projext/class/src/services/targets/targetsFileRules/targetsFileRules.js~TargetsFileRules.html\n  ",
      "start": 1328,
      "end": 1490,
      "loc": {
        "start": {
          "line": 62,
          "column": 0
        },
        "end": {
          "line": 65,
          "column": 4
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {TargetFileRules}\n * https://homer0.github.io/projext/typedef/index.html#static-typedef-TargetFileRules\n ",
      "start": 1492,
      "end": 1616,
      "loc": {
        "start": {
          "line": 67,
          "column": 0
        },
        "end": {
          "line": 70,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {TargetsHTML}\n * https://homer0.github.io/projext/class/src/services/targets/targetsHTML.js~TargetsHTML.html\n ",
      "start": 1618,
      "end": 1747,
      "loc": {
        "start": {
          "line": 72,
          "column": 0
        },
        "end": {
          "line": 75,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Target}\n * https://homer0.github.io/projext/typedef/index.html#static-typedef-Target\n ",
      "start": 1749,
      "end": 1855,
      "loc": {
        "start": {
          "line": 77,
          "column": 0
        },
        "end": {
          "line": 80,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {TargetConfigurationCreator}\n * https://homer0.github.io/projext/typedef/index.html#static-typedef-TargetConfigurationCreator\n ",
      "start": 1857,
      "end": 2003,
      "loc": {
        "start": {
          "line": 82,
          "column": 0
        },
        "end": {
          "line": 85,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {TargetExtraFile}\n * https://homer0.github.io/projext/typedef/index.html#static-typedef-TargetExtraFile\n ",
      "start": 2005,
      "end": 2129,
      "loc": {
        "start": {
          "line": 87,
          "column": 0
        },
        "end": {
          "line": 90,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {BabelConfiguration}\n *  ttps://homer0.github.io/projext/class/src/services/configurations/babelConfiguration.js~BabelConfiguration.html\n  ",
      "start": 2131,
      "end": 2289,
      "loc": {
        "start": {
          "line": 92,
          "column": 0
        },
        "end": {
          "line": 95,
          "column": 4
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {NodeInspectorSettings}\n * https://homer0.github.io/projext/typedef/index.html#static-typedef-NodeInspectorSettings\n ",
      "start": 2291,
      "end": 2427,
      "loc": {
        "start": {
          "line": 97,
          "column": 0
        },
        "end": {
          "line": 100,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Middleware}\n * http://expressjs.com/en/guide/using-middleware.html\n ",
      "start": 2429,
      "end": 2517,
      "loc": {
        "start": {
          "line": 102,
          "column": 0
        },
        "end": {
          "line": 105,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {HTTPRequest}\n * https://nodejs.org/api/http.html#http_class_http_clientrequest\n ",
      "start": 2519,
      "end": 2619,
      "loc": {
        "start": {
          "line": 107,
          "column": 0
        },
        "end": {
          "line": 110,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {HTTPResponse}\n * https://nodejs.org/api/http.html#http_class_http_serverresponse\n ",
      "start": 2621,
      "end": 2723,
      "loc": {
        "start": {
          "line": 112,
          "column": 0
        },
        "end": {
          "line": 115,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Buffer}\n * https://nodejs.org/api/buffer.html\n ",
      "start": 2725,
      "end": 2792,
      "loc": {
        "start": {
          "line": 117,
          "column": 0
        },
        "end": {
          "line": 120,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Plugins > Commons\n * ================================================================================================\n ",
      "start": 2794,
      "end": 3022,
      "loc": {
        "start": {
          "line": 122,
          "column": 0
        },
        "end": {
          "line": 126,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {function} RollupFilter\n * @param {string} filepath The path to validate.\n * @return {boolean} Whether or not the path is valid.\n ",
      "start": 3024,
      "end": 3172,
      "loc": {
        "start": {
          "line": 128,
          "column": 0
        },
        "end": {
          "line": 132,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {function} RollupStylesheetProcessor\n * @param {string} code The style code to process.\n * @return {Promise<StringOrObject,Error>} If the Promise gets resolved as a string, that would\n *                                          be used as the style code to either return or inject.\n *                                          But if it gets resolved as an `Object`, it's expected\n *                                          for it to have a `css`  key with the style code, the\n *                                          rest of the keys will be added as named exports.\n ",
      "start": 3174,
      "end": 3763,
      "loc": {
        "start": {
          "line": 134,
          "column": 0
        },
        "end": {
          "line": 142,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} RollupFileDefinition\n * @param {string} code The file contents.\n * @param {Object} map Extra information for the file map.\n ",
      "start": 3765,
      "end": 3916,
      "loc": {
        "start": {
          "line": 144,
          "column": 0
        },
        "end": {
          "line": 148,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {function} ProjextRollupPluginsStats\n * @param {string} plugin   The name of the plugin that generated/copied the file.\n * @param {string} filepath The file that was generated/copied.\n ",
      "start": 3918,
      "end": 4121,
      "loc": {
        "start": {
          "line": 150,
          "column": 0
        },
        "end": {
          "line": 154,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupPluginURL\n * @property {Array}  include A list of expressions the name of a file should match in order to be\n *                            processed by the plugin.\n * @property {Array}  exclude A list of expressions the name of a file shouldn't match in order to\n *                            be processed by the plugin.\n * @property {string} output  The path to the where the a file would be copied. It supports the\n *                            placeholders `[name]` for the file name and `[ext]` for its\n *                            extension.\n * @property {string} url     The URL for the file. It supports the placeholders `[name]` for the\n *                            file name and `[ext]` for its extension.\n ",
      "start": 4123,
      "end": 4881,
      "loc": {
        "start": {
          "line": 156,
          "column": 0
        },
        "end": {
          "line": 167,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Plugins > Compression\n * ================================================================================================\n ",
      "start": 4883,
      "end": 5115,
      "loc": {
        "start": {
          "line": 169,
          "column": 0
        },
        "end": {
          "line": 173,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupCompressionPluginOptions\n * @property {string}                    folder  The directory where the plugin will search for\n *                                               files.\n * @property {Array}                     include A list of expressions the name of a file should\n *                                               match in order to be processed by the plugin.\n * @property {Array}                     exclude A list of expressions the name of a file\n *                                               shouldn't match in order to be processed by the\n *                                               plugin.\n * @property {ProjextRollupPluginsStats} stats   The function the plugin will call in order to\n *                                               inform a file was created.\n ",
      "start": 5117,
      "end": 5942,
      "loc": {
        "start": {
          "line": 175,
          "column": 0
        },
        "end": {
          "line": 186,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupCompressionPluginEntry\n * @property {string} original   The path to the file that was compressed.\n * @property {string} compressed The path to the compressed file.\n ",
      "start": 5944,
      "end": 6149,
      "loc": {
        "start": {
          "line": 188,
          "column": 0
        },
        "end": {
          "line": 192,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Plugins > Copy\n * ================================================================================================\n ",
      "start": 6151,
      "end": 6376,
      "loc": {
        "start": {
          "line": 194,
          "column": 0
        },
        "end": {
          "line": 198,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {function} ProjextRollupCopyPluginItemTransform\n * @param {Buffer} contents The original contents of the file.\n * @return {Promise<string,Error>} The updated contents.\n ",
      "start": 6378,
      "end": 6565,
      "loc": {
        "start": {
          "line": 200,
          "column": 0
        },
        "end": {
          "line": 204,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupCopyPluginItem\n * @property {string}                                from      The file origin path.\n * @property {string}                                to        The file destination path.\n * @property {?ProjextRollupCopyPluginItemTransform} transform A custom function to modify the\n *                                                             contents of the file to copy.\n ",
      "start": 6567,
      "end": 6986,
      "loc": {
        "start": {
          "line": 206,
          "column": 0
        },
        "end": {
          "line": 212,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupCopyPluginOptions\n * @property {Array}                      files A list of files information so the plugin can copy\n *                                              them. Each item should have a `from` and `to`\n *                                              property, otherwise the plugin will throw an error.\n *                                              See {@link ProjextRollupCopyPluginItem}.\n * @property {ProjextRollupPluginsStats}  stats The function the plugin will call in order to\n *                                              inform a file was copied.\n ",
      "start": 6988,
      "end": 7597,
      "loc": {
        "start": {
          "line": 214,
          "column": 0
        },
        "end": {
          "line": 222,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Plugins > CSS\n * ================================================================================================\n ",
      "start": 7599,
      "end": 7823,
      "loc": {
        "start": {
          "line": 224,
          "column": 0
        },
        "end": {
          "line": 228,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupCSSPluginOptions\n * @property {Array}                      include      A list of expressions the name of a file\n *                                                     should match in order to be processed by\n *                                                     the plugin.\n * @property {Array}                      exclude      A list of expressions the name of a file\n *                                                     shouldn't match in order to be processed by\n *                                                     the plugin.\n * @property {boolean}                    insert       Whether the styles should be injected on\n *                                                     the app `<head >` when the bundle finishes\n *                                                     loading.\n * @property {string|boolean}             output       This can be the name a file where all the\n *                                                     files that match the filter would be\n *                                                     bundled. The option can also be set to\n *                                                     `false` so the styles would be returned as\n *                                                     a string when `require`d.\n * @property {?RollupStylesheetProcessor} processor    A custom function to processed the styles.\n * @property {string}                     insertFnName If `insert` is `true`, this will be used as\n *                                                     the name of the function in charge of\n *                                                     injecting the styles.\n * @property {ProjextRollupPluginsStats}  stats        The function the plugin will call in order\n *                                                     to inform a file was created.\n ",
      "start": 7825,
      "end": 9674,
      "loc": {
        "start": {
          "line": 230,
          "column": 0
        },
        "end": {
          "line": 252,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Plugins > DevServer\n * ================================================================================================\n ",
      "start": 9676,
      "end": 9906,
      "loc": {
        "start": {
          "line": 254,
          "column": 0
        },
        "end": {
          "line": 258,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {function} ProjextRollupDevServerPluginEvent\n * @param {ProjextRollupDevServerPlugin} plugin\n ",
      "start": 9908,
      "end": 10020,
      "loc": {
        "start": {
          "line": 260,
          "column": 0
        },
        "end": {
          "line": 263,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupDevServerPluginOptions\n * @property {string}                            host               The server hostname.\n * @property {number}                            port               The server port.\n * @property {Array|string}                      contentBase        The directory from where the\n *                                                                  files are going to be served.\n *                                                                  It can be a single directory\n *                                                                  or a list of them.\n * @property {boolean}                           historyApiFallback Whether or not the server\n *                                                                  should redirect the user to\n *                                                                  the `index.html` after a\n *                                                                  `404`.\n * @property {null|HTTPSOptions}                 https              The required files to run the\n *                                                                  server on HTTPs. They are the\n *                                                                  same that `https.createServer`\n *                                                                  supports.\n * @property {boolean}                           open               Whether or not the browser\n *                                                                  should be opened after\n *                                                                  starting the server.\n * @property {?Logger}                           logger             A custom logger to log the\n *                                                                  server events.\n * @property {ProjextRollupDevServerPluginEvent} onStart            A callback to be called when\n *                                                                  the server starts.\n * @property {ProjextRollupDevServerPluginEvent} onStop             A callback to be called when\n *                                                                  the server stops.\n ",
      "start": 10022,
      "end": 12190,
      "loc": {
        "start": {
          "line": 265,
          "column": 0
        },
        "end": {
          "line": 290,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Plugins > NodeRunner\n * ================================================================================================\n ",
      "start": 12192,
      "end": 12423,
      "loc": {
        "start": {
          "line": 292,
          "column": 0
        },
        "end": {
          "line": 296,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {function} ProjextRollupNodeRunnerPluginEvent\n * @param {ProjextRollupNodeRunnerPlugin} plugin\n ",
      "start": 12425,
      "end": 12539,
      "loc": {
        "start": {
          "line": 298,
          "column": 0
        },
        "end": {
          "line": 301,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupNodeRunnerPluginOptions\n * @property {string}                             file    The file to execute\n * @property {?Logger}                            logger  A custom logger to log the server\n *                                                        events.\n * @property {?NodeInspectorSettings}             inspect The custom settings for the Node\n *                                                        Inspector.\n * @property {ProjextRollupNodeRunnerPluginEvent} onStart A callback to be called when the\n *                                                        execution starts.\n * @property {ProjextRollupNodeRunnerPluginEvent} onStop  A callback to be called when the\n *                                                        execution stops.\n ",
      "start": 12541,
      "end": 13335,
      "loc": {
        "start": {
          "line": 303,
          "column": 0
        },
        "end": {
          "line": 314,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Plugins > Stats\n * ================================================================================================\n ",
      "start": 13337,
      "end": 13563,
      "loc": {
        "start": {
          "line": 316,
          "column": 0
        },
        "end": {
          "line": 320,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupStatsPluginOptions\n * @property {string} path The path to the directory where all the files are generated. The plugin\n *                         needs it so it can be removed when showing the files list.\n ",
      "start": 13565,
      "end": 13810,
      "loc": {
        "start": {
          "line": 322,
          "column": 0
        },
        "end": {
          "line": 326,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupStatsPluginReset\n * @property {function} intro The method Rollup calls to get code to add on the top of the bundle.\n *                            The plugin uses it as a _\"hook\"_ in order to reset the entries list\n *                            and thus, avoid duplicated entries when Rollup is on _\"watch mode\"_.\n ",
      "start": 13812,
      "end": 14166,
      "loc": {
        "start": {
          "line": 328,
          "column": 0
        },
        "end": {
          "line": 333,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupStatsPluginLogOptions\n * @property {Array}     extraEntries A list of extra entries to add.\n * @property {?Logger}   logger       A custom instance of {@link Logger} to log the report table.\n * @property {?function} afterLog     A custom callback to call after the report table is logged.\n ",
      "start": 14168,
      "end": 14498,
      "loc": {
        "start": {
          "line": 335,
          "column": 0
        },
        "end": {
          "line": 340,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupStatsPluginLog\n * @property {function} onwrite The method Rollup calls after writing the files on the file system.\n *                              When this happens, the plugin will log the report table on the\n *                              console.\n ",
      "start": 14500,
      "end": 14792,
      "loc": {
        "start": {
          "line": 342,
          "column": 0
        },
        "end": {
          "line": 347,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupStatsPluginCellsWidth\n * @property {number} plugin The width for the plugin's cell.\n * @property {number} file   The width for the file path cell.\n * @property {number} size   The width for the file size cell.\n ",
      "start": 14794,
      "end": 15045,
      "loc": {
        "start": {
          "line": 349,
          "column": 0
        },
        "end": {
          "line": 354,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Plugins > Stylesheet Assets\n * ================================================================================================\n ",
      "start": 15047,
      "end": 15285,
      "loc": {
        "start": {
          "line": 356,
          "column": 0
        },
        "end": {
          "line": 360,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupStylesheetAssetsPluginOptions\n * @property {string}                    stylesheet    The path to the CSS or JS file where the\n *                                                     styles should be fixed.\n * @property {Array}                     insertFnNames In case the `stylesheet` is a JS file, it's\n *                                                     possible that the styles are being injected\n *                                                     by a function, so this option can be used\n *                                                     the different function names the plugin\n *                                                     should search for in order to find CSS\n *                                                     blocks.\n * @property {ProjextRollupPluginURL}    urls          The set of URLs the plugin will use to\n *                                                     validate the files inside the stylesheet in\n *                                                     order to know if they should be processed,\n *                                                     where to copy them and which URL to use.\n * @property {ProjextRollupPluginsStats} stats         The function the plugin will call in order\n *                                                     to inform a file was created.\n ",
      "start": 15287,
      "end": 16650,
      "loc": {
        "start": {
          "line": 362,
          "column": 0
        },
        "end": {
          "line": 378,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupStylesheetAssetsHelperPluginOptions\n * @property {Array}  include A list of expressions the name of a file should match in order to be\n *                            processed by the plugin.\n * @property {Array}  exclude A list of expressions the name of a file shouldn't match in order to\n *                            be processed by the plugin.\n * @property {string} fnName  The name of the function that will be used to wrap the code.\n ",
      "start": 16652,
      "end": 17131,
      "loc": {
        "start": {
          "line": 380,
          "column": 0
        },
        "end": {
          "line": 387,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Plugins > Stylesheet Modules Fixer\n * ================================================================================================\n ",
      "start": 17133,
      "end": 17378,
      "loc": {
        "start": {
          "line": 389,
          "column": 0
        },
        "end": {
          "line": 393,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupStylesheetModulesFixerPluginOptions\n * @property {Array}  include           A list of expressions the name of a file should match in\n *                                      order to be processed by the plugin.\n * @property {Array}  exclude           A list of expressions the name of a file shouldn't match\n *                                      in order to be processed by the plugin.\n * @property {string} modulesExportName The name of the export statement for the CSS modules\n *                                      locals.\n ",
      "start": 17380,
      "end": 17949,
      "loc": {
        "start": {
          "line": 395,
          "column": 0
        },
        "end": {
          "line": 403,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Plugins > Template\n * ================================================================================================\n ",
      "start": 17951,
      "end": 18180,
      "loc": {
        "start": {
          "line": 405,
          "column": 0
        },
        "end": {
          "line": 409,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupTemplatePluginOptions\n * @property {string}                    template      The path to the template file the plugin\n *                                                     will use to inject the JS and CSS files.\n * @property {string}                    output        The path where the final file will be\n *                                                     written.\n * @property {Array}                     scripts       A list of JS files that will be linked on\n *                                                     the template.\n * @property {boolean}                   scriptsAsync  Whether or not to use `async` attribute on\n *                                                     the script tags.\n * @property {boolean}                   scriptsOnBody Whether or not to place the script tags on\n *                                                     the body.\n * @property {Array}                     stylesheets   A list of CSS files that will be linked on\n *                                                     the template.\n * @property {ProjextRollupPluginURL}    urls          The set of URLs the plugin will use to\n *                                                     validate the files `require`d on the\n *                                                     template in order to know if they should be\n *                                                     processed, where to copy them and which URL\n *                                                     to use.\n * @property {ProjextRollupPluginsStats} stats         The function the plugin will call in order\n *                                                     to inform a file was copied.\n ",
      "start": 18182,
      "end": 19889,
      "loc": {
        "start": {
          "line": 411,
          "column": 0
        },
        "end": {
          "line": 432,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Plugins > URLS\n * ================================================================================================\n ",
      "start": 19891,
      "end": 20116,
      "loc": {
        "start": {
          "line": 434,
          "column": 0
        },
        "end": {
          "line": 438,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjextRollupURLsPluginOptions\n * @property {ProjextRollupPluginURL}    urls  The set of URLs the plugin will use to validate the\n *                                             files in order to know if they should be processed,\n *                                             where to copy them and which URL to use.\n * @property {ProjextRollupPluginsStats} stats The function the plugin will call in order to\n *                                             inform a file was copied.\n ",
      "start": 20118,
      "end": 20629,
      "loc": {
        "start": {
          "line": 440,
          "column": 0
        },
        "end": {
          "line": 447,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Middleware\n * ================================================================================================\n ",
      "start": 20631,
      "end": 20852,
      "loc": {
        "start": {
          "line": 449,
          "column": 0
        },
        "end": {
          "line": 453,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {function} MiddlewareGetDirectory\n * @return {string}\n * The build directory of the target implementing the middleware.\n ",
      "start": 20854,
      "end": 20993,
      "loc": {
        "start": {
          "line": 455,
          "column": 0
        },
        "end": {
          "line": 459,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {function} MiddlewareGetFileSystem\n * @return {Promise<FileSystem,Error>}\n * The reason this is resolved on a promise is to avoid trying to accessing files before they are\n * generated.\n ",
      "start": 20995,
      "end": 21200,
      "loc": {
        "start": {
          "line": 461,
          "column": 0
        },
        "end": {
          "line": 466,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} MiddlewareInformation\n * @property {Middleware} middleware\n * The middleware that implements the Rollup build process.\n * @property {MiddlewareGetDirectory} getDirectory\n * To access the target implementing the middleware build directory.\n * @property {MiddlewareGetFileSystem} getFileSystem\n * To access the file system only when the middleware finishes the build process.\n ",
      "start": 21202,
      "end": 21604,
      "loc": {
        "start": {
          "line": 468,
          "column": 0
        },
        "end": {
          "line": 476,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Configurations\n * ================================================================================================\n ",
      "start": 21606,
      "end": 21831,
      "loc": {
        "start": {
          "line": 478,
          "column": 0
        },
        "end": {
          "line": 482,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} RollupConfigurationsByEnvironment\n * @property {ConfigurationFile} production\n * The configuration service for a the target type production build.\n * @property {ConfigurationFile} development\n * The configuration service for a the target type development build.\n ",
      "start": 21833,
      "end": 22123,
      "loc": {
        "start": {
          "line": 484,
          "column": 0
        },
        "end": {
          "line": 490,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} RollupConfigurations\n * @property {RollupConfigurationsByEnvironment} node\n * The build types configurations for a Node target.\n * @property {RollupConfigurationsByEnvironment} browser\n * The build types configurations for a browser target.\n ",
      "start": 22125,
      "end": 22394,
      "loc": {
        "start": {
          "line": 492,
          "column": 0
        },
        "end": {
          "line": 498,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Others\n * ================================================================================================\n ",
      "start": 22396,
      "end": 22613,
      "loc": {
        "start": {
          "line": 500,
          "column": 0
        },
        "end": {
          "line": 504,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} RollupConfigurationOutputParams\n * @property {string}  file      The path where the bundle will be generated.\n * @property {string}  format    The format of the bundle (`iife`, `cjs` or `umd`).\n * @property {boolean} sourcemap Whether or not a source map should be generated for the bundle.\n * @property {string}  name      The export name of the bundle.\n * @property {?string} exports   This is implemented when the target is a library. It allows the\n *                               bundle to have named exports.\n ",
      "start": 22615,
      "end": 23158,
      "loc": {
        "start": {
          "line": 506,
          "column": 0
        },
        "end": {
          "line": 514,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} RollupConfigurationPathsParams\n * @property {string} js\n * The filename format and path for the bundle, on the distribution directory.\n * @property {string} css\n * The filename format and path for the generated stylesheet, on the distribution directory.\n * @property {string} images\n * The filename format and path for the images that are going to be copied to the distribution\n * directory.\n * @property {string} fonts\n * The filename format and path for the font files that are going to be copied to the distribution\n * directory.\n ",
      "start": 23160,
      "end": 23721,
      "loc": {
        "start": {
          "line": 516,
          "column": 0
        },
        "end": {
          "line": 528,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} RollupConfigurationParams\n * @property {string}                          input       The path for the entry file.\n * @property {RollupConfigurationOutputParams} output      The Rollup settings for the bundle\n *                                                         generation.\n * @property {Target}                          target      The information of the target being\n *                                                         bundled.\n * @property {TargetFileRules}                 targetRules The rules to find the different file\n *                                                         types a target may use.\n * @property {Object}                          definitions A dictionary of defined variables that\n *                                                         will be replaced on the bundled code.\n * @property {string}                          buildType   The intended build type: `development`\n *                                                         or `production`.\n * @property {RollupConfigurationPathsParams}  paths       A dictionary with the filenames formats\n *                                                         and paths of the different files the\n *                                                         bundle can generate.\n * @property {Array}                           copy        A list of\n *                                                         {@link TargetExtraFile} with\n *                                                         the information of files that need to\n *                                                         be copied during the bundling process.\n\n/**\n * @typedef {Object} RollupPluginInfo\n * @property {string} name          The name of the plugin.\n * @property {string} configuration The path to the Rollup configuration file.\n * @property {Array}  external      The list of subpaths the plugin exposes and that should be\n *                                  handled as external dependencies, in order to avoid bundling\n *                                  them.\n ",
      "start": 23723,
      "end": 25784,
      "loc": {
        "start": {
          "line": 530,
          "column": 0
        },
        "end": {
          "line": 558,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {function} ProviderRegisterMethod\n * @param {Jimple} app\n * A reference to the dependency injection container.\n ",
      "start": 25786,
      "end": 25916,
      "loc": {
        "start": {
          "line": 560,
          "column": 0
        },
        "end": {
          "line": 564,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} Provider\n * @property {ProviderRegisterMethod} register\n * The method that gets called when registering the provider.\n ",
      "start": 25918,
      "end": 26064,
      "loc": {
        "start": {
          "line": 566,
          "column": 0
        },
        "end": {
          "line": 570,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {string|Object} StringOrObject\n ",
      "start": 26066,
      "end": 26116,
      "loc": {
        "start": {
          "line": 572,
          "column": 0
        },
        "end": {
          "line": 574,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "eof",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 26117,
      "end": 26117,
      "loc": {
        "start": {
          "line": 575,
          "column": 0
        },
        "end": {
          "line": 575,
          "column": 0
        }
      }
    }
  ]
}